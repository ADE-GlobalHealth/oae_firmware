
LED_NucleoFlash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002860  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080029ec  080029ec  000129ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a2c  08002a2c  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a2c  08002a2c  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a2c  08002a2c  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a2c  08002a2c  00012a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a30  08002a30  00012a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08002a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000020c  08002c40  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08002c40  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c23e  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d75  00000000  00000000  0002c47a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  0002e1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  0002ee90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eecb  00000000  00000000  0002fa48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d2eb  00000000  00000000  0004e913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c21a6  00000000  00000000  0005bbfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011dda4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000344c  00000000  00000000  0011ddf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000020c 	.word	0x2000020c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080029d4 	.word	0x080029d4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000210 	.word	0x20000210
 80001c8:	080029d4 	.word	0x080029d4

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 faae 	bl	8000732 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f82b 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f917 	bl	800040c <MX_GPIO_Init>
  MX_DMA_Init();
 80001de:	f000 f8f7 	bl	80003d0 <MX_DMA_Init>
  MX_DAC1_Init();
 80001e2:	f000 f875 	bl	80002d0 <MX_DAC1_Init>
  MX_TIM2_Init();
 80001e6:	f000 f8a5 	bl	8000334 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
//  setup();
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)Wave_LUT, 128, DAC_ALIGN_12B_R);
 80001ea:	2300      	movs	r3, #0
 80001ec:	9300      	str	r3, [sp, #0]
 80001ee:	2380      	movs	r3, #128	; 0x80
 80001f0:	4a0b      	ldr	r2, [pc, #44]	; (8000220 <main+0x54>)
 80001f2:	2100      	movs	r1, #0
 80001f4:	480b      	ldr	r0, [pc, #44]	; (8000224 <main+0x58>)
 80001f6:	f000 fc69 	bl	8000acc <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 80001fa:	480b      	ldr	r0, [pc, #44]	; (8000228 <main+0x5c>)
 80001fc:	f002 f944 	bl	8002488 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000200:	2108      	movs	r1, #8
 8000202:	480a      	ldr	r0, [pc, #40]	; (800022c <main+0x60>)
 8000204:	f001 fa6a 	bl	80016dc <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 8000208:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800020c:	f000 fb06 	bl	800081c <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000210:	2108      	movs	r1, #8
 8000212:	4806      	ldr	r0, [pc, #24]	; (800022c <main+0x60>)
 8000214:	f001 fa62 	bl	80016dc <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8000218:	2064      	movs	r0, #100	; 0x64
 800021a:	f000 faff 	bl	800081c <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800021e:	e7ef      	b.n	8000200 <main+0x34>
 8000220:	20000000 	.word	0x20000000
 8000224:	20000228 	.word	0x20000228
 8000228:	20000284 	.word	0x20000284
 800022c:	48000400 	.word	0x48000400

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b096      	sub	sp, #88	; 0x58
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0314 	add.w	r3, r7, #20
 800023a:	2244      	movs	r2, #68	; 0x44
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f002 fbc0 	bl	80029c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	463b      	mov	r3, r7
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]
 8000250:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000252:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000256:	f001 fa69 	bl	800172c <HAL_PWREx_ControlVoltageScaling>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000260:	f000 f942 	bl	80004e8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000264:	2301      	movs	r3, #1
 8000266:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000268:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800026c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026e:	2302      	movs	r3, #2
 8000270:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000272:	2303      	movs	r3, #3
 8000274:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000276:	2301      	movs	r3, #1
 8000278:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800027a:	2314      	movs	r3, #20
 800027c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800027e:	2307      	movs	r3, #7
 8000280:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000282:	2302      	movs	r3, #2
 8000284:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8000286:	2306      	movs	r3, #6
 8000288:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028a:	f107 0314 	add.w	r3, r7, #20
 800028e:	4618      	mov	r0, r3
 8000290:	f001 faa2 	bl	80017d8 <HAL_RCC_OscConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800029a:	f000 f925 	bl	80004e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029e:	230f      	movs	r3, #15
 80002a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a2:	2303      	movs	r3, #3
 80002a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002b2:	463b      	mov	r3, r7
 80002b4:	2101      	movs	r1, #1
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 fea2 	bl	8002000 <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002c2:	f000 f911 	bl	80004e8 <Error_Handler>
  }
}
 80002c6:	bf00      	nop
 80002c8:	3758      	adds	r7, #88	; 0x58
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b08a      	sub	sp, #40	; 0x28
 80002d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2224      	movs	r2, #36	; 0x24
 80002da:	2100      	movs	r1, #0
 80002dc:	4618      	mov	r0, r3
 80002de:	f002 fb71 	bl	80029c4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80002e2:	4b12      	ldr	r3, [pc, #72]	; (800032c <MX_DAC1_Init+0x5c>)
 80002e4:	4a12      	ldr	r2, [pc, #72]	; (8000330 <MX_DAC1_Init+0x60>)
 80002e6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80002e8:	4810      	ldr	r0, [pc, #64]	; (800032c <MX_DAC1_Init+0x5c>)
 80002ea:	f000 fbcc 	bl	8000a86 <HAL_DAC_Init>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80002f4:	f000 f8f8 	bl	80004e8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80002f8:	2300      	movs	r3, #0
 80002fa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80002fc:	2324      	movs	r3, #36	; 0x24
 80002fe:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000300:	2300      	movs	r3, #0
 8000302:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000304:	2300      	movs	r3, #0
 8000306:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000308:	2300      	movs	r3, #0
 800030a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2200      	movs	r2, #0
 8000310:	4619      	mov	r1, r3
 8000312:	4806      	ldr	r0, [pc, #24]	; (800032c <MX_DAC1_Init+0x5c>)
 8000314:	f000 fcc4 	bl	8000ca0 <HAL_DAC_ConfigChannel>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800031e:	f000 f8e3 	bl	80004e8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000322:	bf00      	nop
 8000324:	3728      	adds	r7, #40	; 0x28
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000228 	.word	0x20000228
 8000330:	40007400 	.word	0x40007400

08000334 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b088      	sub	sp, #32
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800033a:	f107 0310 	add.w	r3, r7, #16
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000352:	4b1e      	ldr	r3, [pc, #120]	; (80003cc <MX_TIM2_Init+0x98>)
 8000354:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000358:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800035a:	4b1c      	ldr	r3, [pc, #112]	; (80003cc <MX_TIM2_Init+0x98>)
 800035c:	2200      	movs	r2, #0
 800035e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000360:	4b1a      	ldr	r3, [pc, #104]	; (80003cc <MX_TIM2_Init+0x98>)
 8000362:	2200      	movs	r2, #0
 8000364:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 624;
 8000366:	4b19      	ldr	r3, [pc, #100]	; (80003cc <MX_TIM2_Init+0x98>)
 8000368:	f44f 721c 	mov.w	r2, #624	; 0x270
 800036c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800036e:	4b17      	ldr	r3, [pc, #92]	; (80003cc <MX_TIM2_Init+0x98>)
 8000370:	2200      	movs	r2, #0
 8000372:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000374:	4b15      	ldr	r3, [pc, #84]	; (80003cc <MX_TIM2_Init+0x98>)
 8000376:	2200      	movs	r2, #0
 8000378:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800037a:	4814      	ldr	r0, [pc, #80]	; (80003cc <MX_TIM2_Init+0x98>)
 800037c:	f002 f82c 	bl	80023d8 <HAL_TIM_Base_Init>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000386:	f000 f8af 	bl	80004e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800038a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800038e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000390:	f107 0310 	add.w	r3, r7, #16
 8000394:	4619      	mov	r1, r3
 8000396:	480d      	ldr	r0, [pc, #52]	; (80003cc <MX_TIM2_Init+0x98>)
 8000398:	f002 f8c2 	bl	8002520 <HAL_TIM_ConfigClockSource>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80003a2:	f000 f8a1 	bl	80004e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80003a6:	2320      	movs	r3, #32
 80003a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003aa:	2300      	movs	r3, #0
 80003ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	4619      	mov	r1, r3
 80003b2:	4806      	ldr	r0, [pc, #24]	; (80003cc <MX_TIM2_Init+0x98>)
 80003b4:	f002 fa7c 	bl	80028b0 <HAL_TIMEx_MasterConfigSynchronization>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80003be:	f000 f893 	bl	80004e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003c2:	bf00      	nop
 80003c4:	3720      	adds	r7, #32
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000284 	.word	0x20000284

080003d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003d6:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <MX_DMA_Init+0x38>)
 80003d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80003da:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <MX_DMA_Init+0x38>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6493      	str	r3, [r2, #72]	; 0x48
 80003e2:	4b09      	ldr	r3, [pc, #36]	; (8000408 <MX_DMA_Init+0x38>)
 80003e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80003ee:	2200      	movs	r2, #0
 80003f0:	2100      	movs	r1, #0
 80003f2:	200d      	movs	r0, #13
 80003f4:	f000 fb11 	bl	8000a1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80003f8:	200d      	movs	r0, #13
 80003fa:	f000 fb2a 	bl	8000a52 <HAL_NVIC_EnableIRQ>

}
 80003fe:	bf00      	nop
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40021000 	.word	0x40021000

0800040c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b088      	sub	sp, #32
 8000410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000412:	f107 030c 	add.w	r3, r7, #12
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]
 8000420:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000422:	4b2f      	ldr	r3, [pc, #188]	; (80004e0 <MX_GPIO_Init+0xd4>)
 8000424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000426:	4a2e      	ldr	r2, [pc, #184]	; (80004e0 <MX_GPIO_Init+0xd4>)
 8000428:	f043 0304 	orr.w	r3, r3, #4
 800042c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800042e:	4b2c      	ldr	r3, [pc, #176]	; (80004e0 <MX_GPIO_Init+0xd4>)
 8000430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000432:	f003 0304 	and.w	r3, r3, #4
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043a:	4b29      	ldr	r3, [pc, #164]	; (80004e0 <MX_GPIO_Init+0xd4>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043e:	4a28      	ldr	r2, [pc, #160]	; (80004e0 <MX_GPIO_Init+0xd4>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000446:	4b26      	ldr	r3, [pc, #152]	; (80004e0 <MX_GPIO_Init+0xd4>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000452:	4b23      	ldr	r3, [pc, #140]	; (80004e0 <MX_GPIO_Init+0xd4>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000456:	4a22      	ldr	r2, [pc, #136]	; (80004e0 <MX_GPIO_Init+0xd4>)
 8000458:	f043 0302 	orr.w	r3, r3, #2
 800045c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800045e:	4b20      	ldr	r3, [pc, #128]	; (80004e0 <MX_GPIO_Init+0xd4>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	f003 0302 	and.w	r3, r3, #2
 8000466:	603b      	str	r3, [r7, #0]
 8000468:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800046a:	2200      	movs	r2, #0
 800046c:	2108      	movs	r1, #8
 800046e:	481d      	ldr	r0, [pc, #116]	; (80004e4 <MX_GPIO_Init+0xd8>)
 8000470:	f001 f91c 	bl	80016ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000474:	2304      	movs	r3, #4
 8000476:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000478:	2302      	movs	r3, #2
 800047a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047c:	2300      	movs	r3, #0
 800047e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000480:	2303      	movs	r3, #3
 8000482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000484:	2307      	movs	r3, #7
 8000486:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000488:	f107 030c 	add.w	r3, r7, #12
 800048c:	4619      	mov	r1, r3
 800048e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000492:	f000 ffa1 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800049a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800049c:	2302      	movs	r3, #2
 800049e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004a4:	2303      	movs	r3, #3
 80004a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80004a8:	2303      	movs	r3, #3
 80004aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80004ac:	f107 030c 	add.w	r3, r7, #12
 80004b0:	4619      	mov	r1, r3
 80004b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b6:	f000 ff8f 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80004ba:	2308      	movs	r3, #8
 80004bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004be:	2301      	movs	r3, #1
 80004c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c2:	2300      	movs	r3, #0
 80004c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80004ca:	f107 030c 	add.w	r3, r7, #12
 80004ce:	4619      	mov	r1, r3
 80004d0:	4804      	ldr	r0, [pc, #16]	; (80004e4 <MX_GPIO_Init+0xd8>)
 80004d2:	f000 ff81 	bl	80013d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004d6:	bf00      	nop
 80004d8:	3720      	adds	r7, #32
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000
 80004e4:	48000400 	.word	0x48000400

080004e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ec:	b672      	cpsid	i
}
 80004ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <Error_Handler+0x8>
	...

080004f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <HAL_MspInit+0x44>)
 80004fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004fe:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <HAL_MspInit+0x44>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	6613      	str	r3, [r2, #96]	; 0x60
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <HAL_MspInit+0x44>)
 8000508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <HAL_MspInit+0x44>)
 8000514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000516:	4a08      	ldr	r2, [pc, #32]	; (8000538 <HAL_MspInit+0x44>)
 8000518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800051c:	6593      	str	r3, [r2, #88]	; 0x58
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <HAL_MspInit+0x44>)
 8000520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	40021000 	.word	0x40021000

0800053c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08a      	sub	sp, #40	; 0x28
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000544:	f107 0314 	add.w	r3, r7, #20
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a2b      	ldr	r2, [pc, #172]	; (8000608 <HAL_DAC_MspInit+0xcc>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d150      	bne.n	8000600 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800055e:	4b2b      	ldr	r3, [pc, #172]	; (800060c <HAL_DAC_MspInit+0xd0>)
 8000560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000562:	4a2a      	ldr	r2, [pc, #168]	; (800060c <HAL_DAC_MspInit+0xd0>)
 8000564:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000568:	6593      	str	r3, [r2, #88]	; 0x58
 800056a:	4b28      	ldr	r3, [pc, #160]	; (800060c <HAL_DAC_MspInit+0xd0>)
 800056c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000572:	613b      	str	r3, [r7, #16]
 8000574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b25      	ldr	r3, [pc, #148]	; (800060c <HAL_DAC_MspInit+0xd0>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	4a24      	ldr	r2, [pc, #144]	; (800060c <HAL_DAC_MspInit+0xd0>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000582:	4b22      	ldr	r3, [pc, #136]	; (800060c <HAL_DAC_MspInit+0xd0>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800058e:	2310      	movs	r3, #16
 8000590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000592:	2303      	movs	r3, #3
 8000594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	2300      	movs	r3, #0
 8000598:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	4619      	mov	r1, r3
 80005a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a4:	f000 ff18 	bl	80013d8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80005a8:	4b19      	ldr	r3, [pc, #100]	; (8000610 <HAL_DAC_MspInit+0xd4>)
 80005aa:	4a1a      	ldr	r2, [pc, #104]	; (8000614 <HAL_DAC_MspInit+0xd8>)
 80005ac:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80005ae:	4b18      	ldr	r3, [pc, #96]	; (8000610 <HAL_DAC_MspInit+0xd4>)
 80005b0:	2206      	movs	r2, #6
 80005b2:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80005b4:	4b16      	ldr	r3, [pc, #88]	; (8000610 <HAL_DAC_MspInit+0xd4>)
 80005b6:	2210      	movs	r2, #16
 80005b8:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005ba:	4b15      	ldr	r3, [pc, #84]	; (8000610 <HAL_DAC_MspInit+0xd4>)
 80005bc:	2200      	movs	r2, #0
 80005be:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <HAL_DAC_MspInit+0xd4>)
 80005c2:	2280      	movs	r2, #128	; 0x80
 80005c4:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005c6:	4b12      	ldr	r3, [pc, #72]	; (8000610 <HAL_DAC_MspInit+0xd4>)
 80005c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005cc:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <HAL_DAC_MspInit+0xd4>)
 80005d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005d4:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <HAL_DAC_MspInit+0xd4>)
 80005d8:	2220      	movs	r2, #32
 80005da:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <HAL_DAC_MspInit+0xd4>)
 80005de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80005e4:	480a      	ldr	r0, [pc, #40]	; (8000610 <HAL_DAC_MspInit+0xd4>)
 80005e6:	f000 fcff 	bl	8000fe8 <HAL_DMA_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 80005f0:	f7ff ff7a 	bl	80004e8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a06      	ldr	r2, [pc, #24]	; (8000610 <HAL_DAC_MspInit+0xd4>)
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	4a05      	ldr	r2, [pc, #20]	; (8000610 <HAL_DAC_MspInit+0xd4>)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000600:	bf00      	nop
 8000602:	3728      	adds	r7, #40	; 0x28
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40007400 	.word	0x40007400
 800060c:	40021000 	.word	0x40021000
 8000610:	2000023c 	.word	0x2000023c
 8000614:	40020030 	.word	0x40020030

08000618 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000628:	d10b      	bne.n	8000642 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <HAL_TIM_Base_MspInit+0x38>)
 800062c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800062e:	4a08      	ldr	r2, [pc, #32]	; (8000650 <HAL_TIM_Base_MspInit+0x38>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6593      	str	r3, [r2, #88]	; 0x58
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <HAL_TIM_Base_MspInit+0x38>)
 8000638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000642:	bf00      	nop
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	40021000 	.word	0x40021000

08000654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <NMI_Handler+0x4>

0800065a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <HardFault_Handler+0x4>

08000660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <MemManage_Handler+0x4>

08000666 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800066a:	e7fe      	b.n	800066a <BusFault_Handler+0x4>

0800066c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <UsageFault_Handler+0x4>

08000672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a0:	f000 f89c 	bl	80007dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80006ac:	4802      	ldr	r0, [pc, #8]	; (80006b8 <DMA1_Channel3_IRQHandler+0x10>)
 80006ae:	f000 fdb3 	bl	8001218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000023c 	.word	0x2000023c

080006bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <SystemInit+0x20>)
 80006c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006c6:	4a05      	ldr	r2, [pc, #20]	; (80006dc <SystemInit+0x20>)
 80006c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000718 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006e4:	f7ff ffea 	bl	80006bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e8:	480c      	ldr	r0, [pc, #48]	; (800071c <LoopForever+0x6>)
  ldr r1, =_edata
 80006ea:	490d      	ldr	r1, [pc, #52]	; (8000720 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ec:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <LoopForever+0xe>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f0:	e002      	b.n	80006f8 <LoopCopyDataInit>

080006f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f6:	3304      	adds	r3, #4

080006f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006fc:	d3f9      	bcc.n	80006f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fe:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000700:	4c0a      	ldr	r4, [pc, #40]	; (800072c <LoopForever+0x16>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000704:	e001      	b.n	800070a <LoopFillZerobss>

08000706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000708:	3204      	adds	r2, #4

0800070a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800070c:	d3fb      	bcc.n	8000706 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800070e:	f002 f935 	bl	800297c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000712:	f7ff fd5b 	bl	80001cc <main>

08000716 <LoopForever>:

LoopForever:
    b LoopForever
 8000716:	e7fe      	b.n	8000716 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000718:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800071c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000720:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8000724:	08002a34 	.word	0x08002a34
  ldr r2, =_sbss
 8000728:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 800072c:	200002d4 	.word	0x200002d4

08000730 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000730:	e7fe      	b.n	8000730 <ADC1_IRQHandler>

08000732 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b082      	sub	sp, #8
 8000736:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000738:	2300      	movs	r3, #0
 800073a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800073c:	2003      	movs	r0, #3
 800073e:	f000 f961 	bl	8000a04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000742:	2000      	movs	r0, #0
 8000744:	f000 f80e 	bl	8000764 <HAL_InitTick>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d002      	beq.n	8000754 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800074e:	2301      	movs	r3, #1
 8000750:	71fb      	strb	r3, [r7, #7]
 8000752:	e001      	b.n	8000758 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000754:	f7ff fece 	bl	80004f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000758:	79fb      	ldrb	r3, [r7, #7]
}
 800075a:	4618      	mov	r0, r3
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800076c:	2300      	movs	r3, #0
 800076e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000770:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <HAL_InitTick+0x6c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d023      	beq.n	80007c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000778:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <HAL_InitTick+0x70>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <HAL_InitTick+0x6c>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	4619      	mov	r1, r3
 8000782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000786:	fbb3 f3f1 	udiv	r3, r3, r1
 800078a:	fbb2 f3f3 	udiv	r3, r2, r3
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f96d 	bl	8000a6e <HAL_SYSTICK_Config>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d10f      	bne.n	80007ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b0f      	cmp	r3, #15
 800079e:	d809      	bhi.n	80007b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a0:	2200      	movs	r2, #0
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	f04f 30ff 	mov.w	r0, #4294967295
 80007a8:	f000 f937 	bl	8000a1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007ac:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <HAL_InitTick+0x74>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6013      	str	r3, [r2, #0]
 80007b2:	e007      	b.n	80007c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007b4:	2301      	movs	r3, #1
 80007b6:	73fb      	strb	r3, [r7, #15]
 80007b8:	e004      	b.n	80007c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	73fb      	strb	r3, [r7, #15]
 80007be:	e001      	b.n	80007c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007c0:	2301      	movs	r3, #1
 80007c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000208 	.word	0x20000208
 80007d4:	20000200 	.word	0x20000200
 80007d8:	20000204 	.word	0x20000204

080007dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_IncTick+0x20>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_IncTick+0x24>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4413      	add	r3, r2
 80007ec:	4a04      	ldr	r2, [pc, #16]	; (8000800 <HAL_IncTick+0x24>)
 80007ee:	6013      	str	r3, [r2, #0]
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	20000208 	.word	0x20000208
 8000800:	200002d0 	.word	0x200002d0

08000804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  return uwTick;
 8000808:	4b03      	ldr	r3, [pc, #12]	; (8000818 <HAL_GetTick+0x14>)
 800080a:	681b      	ldr	r3, [r3, #0]
}
 800080c:	4618      	mov	r0, r3
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	200002d0 	.word	0x200002d0

0800081c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000824:	f7ff ffee 	bl	8000804 <HAL_GetTick>
 8000828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000834:	d005      	beq.n	8000842 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <HAL_Delay+0x44>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	461a      	mov	r2, r3
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	4413      	add	r3, r2
 8000840:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000842:	bf00      	nop
 8000844:	f7ff ffde 	bl	8000804 <HAL_GetTick>
 8000848:	4602      	mov	r2, r0
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	429a      	cmp	r2, r3
 8000852:	d8f7      	bhi.n	8000844 <HAL_Delay+0x28>
  {
  }
}
 8000854:	bf00      	nop
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000208 	.word	0x20000208

08000864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f003 0307 	and.w	r3, r3, #7
 8000872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800087a:	68ba      	ldr	r2, [r7, #8]
 800087c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000880:	4013      	ands	r3, r2
 8000882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800088c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000896:	4a04      	ldr	r2, [pc, #16]	; (80008a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	60d3      	str	r3, [r2, #12]
}
 800089c:	bf00      	nop
 800089e:	3714      	adds	r7, #20
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b0:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <__NVIC_GetPriorityGrouping+0x18>)
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	0a1b      	lsrs	r3, r3, #8
 80008b6:	f003 0307 	and.w	r3, r3, #7
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	db0b      	blt.n	80008f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	f003 021f 	and.w	r2, r3, #31
 80008e0:	4907      	ldr	r1, [pc, #28]	; (8000900 <__NVIC_EnableIRQ+0x38>)
 80008e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e6:	095b      	lsrs	r3, r3, #5
 80008e8:	2001      	movs	r0, #1
 80008ea:	fa00 f202 	lsl.w	r2, r0, r2
 80008ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e000e100 	.word	0xe000e100

08000904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	6039      	str	r1, [r7, #0]
 800090e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000914:	2b00      	cmp	r3, #0
 8000916:	db0a      	blt.n	800092e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	b2da      	uxtb	r2, r3
 800091c:	490c      	ldr	r1, [pc, #48]	; (8000950 <__NVIC_SetPriority+0x4c>)
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	0112      	lsls	r2, r2, #4
 8000924:	b2d2      	uxtb	r2, r2
 8000926:	440b      	add	r3, r1
 8000928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800092c:	e00a      	b.n	8000944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4908      	ldr	r1, [pc, #32]	; (8000954 <__NVIC_SetPriority+0x50>)
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	f003 030f 	and.w	r3, r3, #15
 800093a:	3b04      	subs	r3, #4
 800093c:	0112      	lsls	r2, r2, #4
 800093e:	b2d2      	uxtb	r2, r2
 8000940:	440b      	add	r3, r1
 8000942:	761a      	strb	r2, [r3, #24]
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	e000e100 	.word	0xe000e100
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000958:	b480      	push	{r7}
 800095a:	b089      	sub	sp, #36	; 0x24
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	f1c3 0307 	rsb	r3, r3, #7
 8000972:	2b04      	cmp	r3, #4
 8000974:	bf28      	it	cs
 8000976:	2304      	movcs	r3, #4
 8000978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	3304      	adds	r3, #4
 800097e:	2b06      	cmp	r3, #6
 8000980:	d902      	bls.n	8000988 <NVIC_EncodePriority+0x30>
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	3b03      	subs	r3, #3
 8000986:	e000      	b.n	800098a <NVIC_EncodePriority+0x32>
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800098c:	f04f 32ff 	mov.w	r2, #4294967295
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	43da      	mvns	r2, r3
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	401a      	ands	r2, r3
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a0:	f04f 31ff 	mov.w	r1, #4294967295
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	fa01 f303 	lsl.w	r3, r1, r3
 80009aa:	43d9      	mvns	r1, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b0:	4313      	orrs	r3, r2
         );
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3724      	adds	r7, #36	; 0x24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
	...

080009c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009d0:	d301      	bcc.n	80009d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009d2:	2301      	movs	r3, #1
 80009d4:	e00f      	b.n	80009f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <SysTick_Config+0x40>)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3b01      	subs	r3, #1
 80009dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009de:	210f      	movs	r1, #15
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	f7ff ff8e 	bl	8000904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <SysTick_Config+0x40>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ee:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <SysTick_Config+0x40>)
 80009f0:	2207      	movs	r2, #7
 80009f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	e000e010 	.word	0xe000e010

08000a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f7ff ff29 	bl	8000864 <__NVIC_SetPriorityGrouping>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b086      	sub	sp, #24
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	4603      	mov	r3, r0
 8000a22:	60b9      	str	r1, [r7, #8]
 8000a24:	607a      	str	r2, [r7, #4]
 8000a26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a2c:	f7ff ff3e 	bl	80008ac <__NVIC_GetPriorityGrouping>
 8000a30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	68b9      	ldr	r1, [r7, #8]
 8000a36:	6978      	ldr	r0, [r7, #20]
 8000a38:	f7ff ff8e 	bl	8000958 <NVIC_EncodePriority>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a42:	4611      	mov	r1, r2
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff ff5d 	bl	8000904 <__NVIC_SetPriority>
}
 8000a4a:	bf00      	nop
 8000a4c:	3718      	adds	r7, #24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	4603      	mov	r3, r0
 8000a5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff31 	bl	80008c8 <__NVIC_EnableIRQ>
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff ffa2 	bl	80009c0 <SysTick_Config>
 8000a7c:	4603      	mov	r3, r0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d101      	bne.n	8000a98 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000a94:	2301      	movs	r3, #1
 8000a96:	e014      	b.n	8000ac2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	791b      	ldrb	r3, [r3, #4]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d105      	bne.n	8000aae <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff fd47 	bl	800053c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2201      	movs	r2, #1
 8000abe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
 8000ad8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	795b      	ldrb	r3, [r3, #5]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d101      	bne.n	8000aea <HAL_DAC_Start_DMA+0x1e>
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	e0ab      	b.n	8000c42 <HAL_DAC_Start_DMA+0x176>
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	2201      	movs	r2, #1
 8000aee:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	2202      	movs	r2, #2
 8000af4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d12f      	bne.n	8000b5c <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	4a52      	ldr	r2, [pc, #328]	; (8000c4c <HAL_DAC_Start_DMA+0x180>)
 8000b02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	4a51      	ldr	r2, [pc, #324]	; (8000c50 <HAL_DAC_Start_DMA+0x184>)
 8000b0a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	4a50      	ldr	r2, [pc, #320]	; (8000c54 <HAL_DAC_Start_DMA+0x188>)
 8000b12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000b22:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000b24:	6a3b      	ldr	r3, [r7, #32]
 8000b26:	2b08      	cmp	r3, #8
 8000b28:	d013      	beq.n	8000b52 <HAL_DAC_Start_DMA+0x86>
 8000b2a:	6a3b      	ldr	r3, [r7, #32]
 8000b2c:	2b08      	cmp	r3, #8
 8000b2e:	d845      	bhi.n	8000bbc <HAL_DAC_Start_DMA+0xf0>
 8000b30:	6a3b      	ldr	r3, [r7, #32]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d003      	beq.n	8000b3e <HAL_DAC_Start_DMA+0x72>
 8000b36:	6a3b      	ldr	r3, [r7, #32]
 8000b38:	2b04      	cmp	r3, #4
 8000b3a:	d005      	beq.n	8000b48 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000b3c:	e03e      	b.n	8000bbc <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	3308      	adds	r3, #8
 8000b44:	613b      	str	r3, [r7, #16]
        break;
 8000b46:	e03c      	b.n	8000bc2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	330c      	adds	r3, #12
 8000b4e:	613b      	str	r3, [r7, #16]
        break;
 8000b50:	e037      	b.n	8000bc2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	3310      	adds	r3, #16
 8000b58:	613b      	str	r3, [r7, #16]
        break;
 8000b5a:	e032      	b.n	8000bc2 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	4a3d      	ldr	r2, [pc, #244]	; (8000c58 <HAL_DAC_Start_DMA+0x18c>)
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	4a3c      	ldr	r2, [pc, #240]	; (8000c5c <HAL_DAC_Start_DMA+0x190>)
 8000b6a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	4a3b      	ldr	r2, [pc, #236]	; (8000c60 <HAL_DAC_Start_DMA+0x194>)
 8000b72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b82:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000b84:	6a3b      	ldr	r3, [r7, #32]
 8000b86:	2b08      	cmp	r3, #8
 8000b88:	d013      	beq.n	8000bb2 <HAL_DAC_Start_DMA+0xe6>
 8000b8a:	6a3b      	ldr	r3, [r7, #32]
 8000b8c:	2b08      	cmp	r3, #8
 8000b8e:	d817      	bhi.n	8000bc0 <HAL_DAC_Start_DMA+0xf4>
 8000b90:	6a3b      	ldr	r3, [r7, #32]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d003      	beq.n	8000b9e <HAL_DAC_Start_DMA+0xd2>
 8000b96:	6a3b      	ldr	r3, [r7, #32]
 8000b98:	2b04      	cmp	r3, #4
 8000b9a:	d005      	beq.n	8000ba8 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000b9c:	e010      	b.n	8000bc0 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	3314      	adds	r3, #20
 8000ba4:	613b      	str	r3, [r7, #16]
        break;
 8000ba6:	e00c      	b.n	8000bc2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	3318      	adds	r3, #24
 8000bae:	613b      	str	r3, [r7, #16]
        break;
 8000bb0:	e007      	b.n	8000bc2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	331c      	adds	r3, #28
 8000bb8:	613b      	str	r3, [r7, #16]
        break;
 8000bba:	e002      	b.n	8000bc2 <HAL_DAC_Start_DMA+0xf6>
        break;
 8000bbc:	bf00      	nop
 8000bbe:	e000      	b.n	8000bc2 <HAL_DAC_Start_DMA+0xf6>
        break;
 8000bc0:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d111      	bne.n	8000bec <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000bd6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	6898      	ldr	r0, [r3, #8]
 8000bdc:	6879      	ldr	r1, [r7, #4]
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	f000 fab9 	bl	8001158 <HAL_DMA_Start_IT>
 8000be6:	4603      	mov	r3, r0
 8000be8:	75fb      	strb	r3, [r7, #23]
 8000bea:	e010      	b.n	8000c0e <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000bfa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	68d8      	ldr	r0, [r3, #12]
 8000c00:	6879      	ldr	r1, [r7, #4]
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	f000 faa7 	bl	8001158 <HAL_DMA_Start_IT>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	2200      	movs	r2, #0
 8000c12:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8000c14:	7dfb      	ldrb	r3, [r7, #23]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d10c      	bne.n	8000c34 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	6819      	ldr	r1, [r3, #0]
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	f003 0310 	and.w	r3, r3, #16
 8000c26:	2201      	movs	r2, #1
 8000c28:	409a      	lsls	r2, r3
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	e005      	b.n	8000c40 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	691b      	ldr	r3, [r3, #16]
 8000c38:	f043 0204 	orr.w	r2, r3, #4
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	08000ed5 	.word	0x08000ed5
 8000c50:	08000ef7 	.word	0x08000ef7
 8000c54:	08000f13 	.word	0x08000f13
 8000c58:	08000f7d 	.word	0x08000f7d
 8000c5c:	08000f9f 	.word	0x08000f9f
 8000c60:	08000fbb 	.word	0x08000fbb

08000c64 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	795b      	ldrb	r3, [r3, #5]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d101      	bne.n	8000cbc <HAL_DAC_ConfigChannel+0x1c>
 8000cb8:	2302      	movs	r3, #2
 8000cba:	e107      	b.n	8000ecc <HAL_DAC_ConfigChannel+0x22c>
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	2202      	movs	r2, #2
 8000cc6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b04      	cmp	r3, #4
 8000cce:	d174      	bne.n	8000dba <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000cd0:	f7ff fd98 	bl	8000804 <HAL_GetTick>
 8000cd4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d134      	bne.n	8000d46 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000cdc:	e011      	b.n	8000d02 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000cde:	f7ff fd91 	bl	8000804 <HAL_GetTick>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d90a      	bls.n	8000d02 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	691b      	ldr	r3, [r3, #16]
 8000cf0:	f043 0208 	orr.w	r2, r3, #8
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e0e4      	b.n	8000ecc <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1e6      	bne.n	8000cde <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000d10:	2001      	movs	r0, #1
 8000d12:	f7ff fd83 	bl	800081c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	6992      	ldr	r2, [r2, #24]
 8000d1e:	641a      	str	r2, [r3, #64]	; 0x40
 8000d20:	e01e      	b.n	8000d60 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000d22:	f7ff fd6f 	bl	8000804 <HAL_GetTick>
 8000d26:	4602      	mov	r2, r0
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d90a      	bls.n	8000d46 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	691b      	ldr	r3, [r3, #16]
 8000d34:	f043 0208 	orr.w	r2, r3, #8
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	2203      	movs	r2, #3
 8000d40:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000d42:	2303      	movs	r3, #3
 8000d44:	e0c2      	b.n	8000ecc <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	dbe8      	blt.n	8000d22 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000d50:	2001      	movs	r0, #1
 8000d52:	f7ff fd63 	bl	800081c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	6992      	ldr	r2, [r2, #24]
 8000d5e:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f003 0310 	and.w	r3, r3, #16
 8000d6c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000d70:	fa01 f303 	lsl.w	r3, r1, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	ea02 0103 	and.w	r1, r2, r3
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	69da      	ldr	r2, [r3, #28]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f003 0310 	and.w	r3, r3, #16
 8000d84:	409a      	lsls	r2, r3
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f003 0310 	and.w	r3, r3, #16
 8000d9a:	21ff      	movs	r1, #255	; 0xff
 8000d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	ea02 0103 	and.w	r1, r2, r3
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	6a1a      	ldr	r2, [r3, #32]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f003 0310 	and.w	r3, r3, #16
 8000db0:	409a      	lsls	r2, r3
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	430a      	orrs	r2, r1
 8000db8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	691b      	ldr	r3, [r3, #16]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d11d      	bne.n	8000dfe <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dc8:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f003 0310 	and.w	r3, r3, #16
 8000dd0:	221f      	movs	r2, #31
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f003 0310 	and.w	r3, r3, #16
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e04:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f003 0310 	and.w	r3, r3, #16
 8000e0c:	2207      	movs	r2, #7
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4013      	ands	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	431a      	orrs	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f003 0310 	and.w	r3, r3, #16
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	6819      	ldr	r1, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f003 0310 	and.w	r3, r3, #16
 8000e52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	400a      	ands	r2, r1
 8000e62:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f003 0310 	and.w	r3, r3, #16
 8000e72:	f640 72fc 	movw	r2, #4092	; 0xffc
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f003 0310 	and.w	r3, r3, #16
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	6819      	ldr	r1, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0310 	and.w	r3, r3, #16
 8000eae:	22c0      	movs	r2, #192	; 0xc0
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43da      	mvns	r2, r3
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	400a      	ands	r2, r1
 8000ebc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3720      	adds	r7, #32
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8000ee2:	68f8      	ldr	r0, [r7, #12]
 8000ee4:	f7ff febe 	bl	8000c64 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2201      	movs	r2, #1
 8000eec:	711a      	strb	r2, [r3, #4]
}
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b084      	sub	sp, #16
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f02:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	f7ff feb7 	bl	8000c78 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b084      	sub	sp, #16
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	691b      	ldr	r3, [r3, #16]
 8000f24:	f043 0204 	orr.w	r2, r3, #4
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8000f2c:	68f8      	ldr	r0, [r7, #12]
 8000f2e:	f7ff fead 	bl	8000c8c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2201      	movs	r2, #1
 8000f36:	711a      	strb	r2, [r3, #4]
}
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f88:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f7ff ffd8 	bl	8000f40 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2201      	movs	r2, #1
 8000f94:	711a      	strb	r2, [r3, #4]
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b084      	sub	sp, #16
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000faa:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	f7ff ffd1 	bl	8000f54 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b084      	sub	sp, #16
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	f043 0204 	orr.w	r2, r3, #4
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f7ff ffc7 	bl	8000f68 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	711a      	strb	r2, [r3, #4]
}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e098      	b.n	800112c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	4b4d      	ldr	r3, [pc, #308]	; (8001138 <HAL_DMA_Init+0x150>)
 8001002:	429a      	cmp	r2, r3
 8001004:	d80f      	bhi.n	8001026 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	4b4b      	ldr	r3, [pc, #300]	; (800113c <HAL_DMA_Init+0x154>)
 800100e:	4413      	add	r3, r2
 8001010:	4a4b      	ldr	r2, [pc, #300]	; (8001140 <HAL_DMA_Init+0x158>)
 8001012:	fba2 2303 	umull	r2, r3, r2, r3
 8001016:	091b      	lsrs	r3, r3, #4
 8001018:	009a      	lsls	r2, r3, #2
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a48      	ldr	r2, [pc, #288]	; (8001144 <HAL_DMA_Init+0x15c>)
 8001022:	641a      	str	r2, [r3, #64]	; 0x40
 8001024:	e00e      	b.n	8001044 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	4b46      	ldr	r3, [pc, #280]	; (8001148 <HAL_DMA_Init+0x160>)
 800102e:	4413      	add	r3, r2
 8001030:	4a43      	ldr	r2, [pc, #268]	; (8001140 <HAL_DMA_Init+0x158>)
 8001032:	fba2 2303 	umull	r2, r3, r2, r3
 8001036:	091b      	lsrs	r3, r3, #4
 8001038:	009a      	lsls	r2, r3, #2
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a42      	ldr	r2, [pc, #264]	; (800114c <HAL_DMA_Init+0x164>)
 8001042:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2202      	movs	r2, #2
 8001048:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800105a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800105e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001068:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001074:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001080:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	4313      	orrs	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800109e:	d039      	beq.n	8001114 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	4a27      	ldr	r2, [pc, #156]	; (8001144 <HAL_DMA_Init+0x15c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d11a      	bne.n	80010e0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80010aa:	4b29      	ldr	r3, [pc, #164]	; (8001150 <HAL_DMA_Init+0x168>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	f003 031c 	and.w	r3, r3, #28
 80010b6:	210f      	movs	r1, #15
 80010b8:	fa01 f303 	lsl.w	r3, r1, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	4924      	ldr	r1, [pc, #144]	; (8001150 <HAL_DMA_Init+0x168>)
 80010c0:	4013      	ands	r3, r2
 80010c2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80010c4:	4b22      	ldr	r3, [pc, #136]	; (8001150 <HAL_DMA_Init+0x168>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6859      	ldr	r1, [r3, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d0:	f003 031c 	and.w	r3, r3, #28
 80010d4:	fa01 f303 	lsl.w	r3, r1, r3
 80010d8:	491d      	ldr	r1, [pc, #116]	; (8001150 <HAL_DMA_Init+0x168>)
 80010da:	4313      	orrs	r3, r2
 80010dc:	600b      	str	r3, [r1, #0]
 80010de:	e019      	b.n	8001114 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80010e0:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <HAL_DMA_Init+0x16c>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e8:	f003 031c 	and.w	r3, r3, #28
 80010ec:	210f      	movs	r1, #15
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	4917      	ldr	r1, [pc, #92]	; (8001154 <HAL_DMA_Init+0x16c>)
 80010f6:	4013      	ands	r3, r2
 80010f8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <HAL_DMA_Init+0x16c>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6859      	ldr	r1, [r3, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	f003 031c 	and.w	r3, r3, #28
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	4911      	ldr	r1, [pc, #68]	; (8001154 <HAL_DMA_Init+0x16c>)
 8001110:	4313      	orrs	r3, r2
 8001112:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2201      	movs	r2, #1
 800111e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	40020407 	.word	0x40020407
 800113c:	bffdfff8 	.word	0xbffdfff8
 8001140:	cccccccd 	.word	0xcccccccd
 8001144:	40020000 	.word	0x40020000
 8001148:	bffdfbf8 	.word	0xbffdfbf8
 800114c:	40020400 	.word	0x40020400
 8001150:	400200a8 	.word	0x400200a8
 8001154:	400204a8 	.word	0x400204a8

08001158 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
 8001164:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001166:	2300      	movs	r3, #0
 8001168:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001170:	2b01      	cmp	r3, #1
 8001172:	d101      	bne.n	8001178 <HAL_DMA_Start_IT+0x20>
 8001174:	2302      	movs	r3, #2
 8001176:	e04b      	b.n	8001210 <HAL_DMA_Start_IT+0xb8>
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2201      	movs	r2, #1
 800117c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b01      	cmp	r3, #1
 800118a:	d13a      	bne.n	8001202 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2202      	movs	r2, #2
 8001190:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2200      	movs	r2, #0
 8001198:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 0201 	bic.w	r2, r2, #1
 80011a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	68b9      	ldr	r1, [r7, #8]
 80011b0:	68f8      	ldr	r0, [r7, #12]
 80011b2:	f000 f8e0 	bl	8001376 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d008      	beq.n	80011d0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f042 020e 	orr.w	r2, r2, #14
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	e00f      	b.n	80011f0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0204 	bic.w	r2, r2, #4
 80011de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f042 020a 	orr.w	r2, r2, #10
 80011ee:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f042 0201 	orr.w	r2, r2, #1
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	e005      	b.n	800120e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800120a:	2302      	movs	r3, #2
 800120c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800120e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001234:	f003 031c 	and.w	r3, r3, #28
 8001238:	2204      	movs	r2, #4
 800123a:	409a      	lsls	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4013      	ands	r3, r2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d026      	beq.n	8001292 <HAL_DMA_IRQHandler+0x7a>
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	2b00      	cmp	r3, #0
 800124c:	d021      	beq.n	8001292 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0320 	and.w	r3, r3, #32
 8001258:	2b00      	cmp	r3, #0
 800125a:	d107      	bne.n	800126c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 0204 	bic.w	r2, r2, #4
 800126a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001270:	f003 021c 	and.w	r2, r3, #28
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	2104      	movs	r1, #4
 800127a:	fa01 f202 	lsl.w	r2, r1, r2
 800127e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001284:	2b00      	cmp	r3, #0
 8001286:	d071      	beq.n	800136c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001290:	e06c      	b.n	800136c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f003 031c 	and.w	r3, r3, #28
 800129a:	2202      	movs	r2, #2
 800129c:	409a      	lsls	r2, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4013      	ands	r3, r2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d02e      	beq.n	8001304 <HAL_DMA_IRQHandler+0xec>
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d029      	beq.n	8001304 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0320 	and.w	r3, r3, #32
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10b      	bne.n	80012d6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 020a 	bic.w	r2, r2, #10
 80012cc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	f003 021c 	and.w	r2, r3, #28
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	2102      	movs	r1, #2
 80012e4:	fa01 f202 	lsl.w	r2, r1, r2
 80012e8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d038      	beq.n	800136c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001302:	e033      	b.n	800136c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001308:	f003 031c 	and.w	r3, r3, #28
 800130c:	2208      	movs	r2, #8
 800130e:	409a      	lsls	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4013      	ands	r3, r2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d02a      	beq.n	800136e <HAL_DMA_IRQHandler+0x156>
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	2b00      	cmp	r3, #0
 8001320:	d025      	beq.n	800136e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 020e 	bic.w	r2, r2, #14
 8001330:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f003 021c 	and.w	r2, r3, #28
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	2101      	movs	r1, #1
 8001340:	fa01 f202 	lsl.w	r2, r1, r2
 8001344:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001360:	2b00      	cmp	r3, #0
 8001362:	d004      	beq.n	800136e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800136c:	bf00      	nop
 800136e:	bf00      	nop
}
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001376:	b480      	push	{r7}
 8001378:	b085      	sub	sp, #20
 800137a:	af00      	add	r7, sp, #0
 800137c:	60f8      	str	r0, [r7, #12]
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
 8001382:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001388:	f003 021c 	and.w	r2, r3, #28
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	2101      	movs	r1, #1
 8001392:	fa01 f202 	lsl.w	r2, r1, r2
 8001396:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	2b10      	cmp	r3, #16
 80013a6:	d108      	bne.n	80013ba <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68ba      	ldr	r2, [r7, #8]
 80013b6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80013b8:	e007      	b.n	80013ca <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	60da      	str	r2, [r3, #12]
}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d8:	b480      	push	{r7}
 80013da:	b087      	sub	sp, #28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e6:	e148      	b.n	800167a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	2101      	movs	r1, #1
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	fa01 f303 	lsl.w	r3, r1, r3
 80013f4:	4013      	ands	r3, r2
 80013f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 813a 	beq.w	8001674 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	2b01      	cmp	r3, #1
 800140a:	d005      	beq.n	8001418 <HAL_GPIO_Init+0x40>
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d130      	bne.n	800147a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	2203      	movs	r2, #3
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	68da      	ldr	r2, [r3, #12]
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800144e:	2201      	movs	r2, #1
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	091b      	lsrs	r3, r3, #4
 8001464:	f003 0201 	and.w	r2, r3, #1
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	2b03      	cmp	r3, #3
 8001484:	d017      	beq.n	80014b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	2203      	movs	r2, #3
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d123      	bne.n	800150a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	08da      	lsrs	r2, r3, #3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3208      	adds	r2, #8
 80014ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	220f      	movs	r2, #15
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	691a      	ldr	r2, [r3, #16]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	08da      	lsrs	r2, r3, #3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3208      	adds	r2, #8
 8001504:	6939      	ldr	r1, [r7, #16]
 8001506:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	2203      	movs	r2, #3
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f003 0203 	and.w	r2, r3, #3
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 8094 	beq.w	8001674 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154c:	4b52      	ldr	r3, [pc, #328]	; (8001698 <HAL_GPIO_Init+0x2c0>)
 800154e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001550:	4a51      	ldr	r2, [pc, #324]	; (8001698 <HAL_GPIO_Init+0x2c0>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6613      	str	r3, [r2, #96]	; 0x60
 8001558:	4b4f      	ldr	r3, [pc, #316]	; (8001698 <HAL_GPIO_Init+0x2c0>)
 800155a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001564:	4a4d      	ldr	r2, [pc, #308]	; (800169c <HAL_GPIO_Init+0x2c4>)
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	089b      	lsrs	r3, r3, #2
 800156a:	3302      	adds	r3, #2
 800156c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	220f      	movs	r2, #15
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800158e:	d00d      	beq.n	80015ac <HAL_GPIO_Init+0x1d4>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a43      	ldr	r2, [pc, #268]	; (80016a0 <HAL_GPIO_Init+0x2c8>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d007      	beq.n	80015a8 <HAL_GPIO_Init+0x1d0>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a42      	ldr	r2, [pc, #264]	; (80016a4 <HAL_GPIO_Init+0x2cc>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d101      	bne.n	80015a4 <HAL_GPIO_Init+0x1cc>
 80015a0:	2302      	movs	r3, #2
 80015a2:	e004      	b.n	80015ae <HAL_GPIO_Init+0x1d6>
 80015a4:	2307      	movs	r3, #7
 80015a6:	e002      	b.n	80015ae <HAL_GPIO_Init+0x1d6>
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <HAL_GPIO_Init+0x1d6>
 80015ac:	2300      	movs	r3, #0
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	f002 0203 	and.w	r2, r2, #3
 80015b4:	0092      	lsls	r2, r2, #2
 80015b6:	4093      	lsls	r3, r2
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015be:	4937      	ldr	r1, [pc, #220]	; (800169c <HAL_GPIO_Init+0x2c4>)
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	3302      	adds	r3, #2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015cc:	4b36      	ldr	r3, [pc, #216]	; (80016a8 <HAL_GPIO_Init+0x2d0>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015f0:	4a2d      	ldr	r2, [pc, #180]	; (80016a8 <HAL_GPIO_Init+0x2d0>)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015f6:	4b2c      	ldr	r3, [pc, #176]	; (80016a8 <HAL_GPIO_Init+0x2d0>)
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	43db      	mvns	r3, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4313      	orrs	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800161a:	4a23      	ldr	r2, [pc, #140]	; (80016a8 <HAL_GPIO_Init+0x2d0>)
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001620:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <HAL_GPIO_Init+0x2d0>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	43db      	mvns	r3, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	4313      	orrs	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001644:	4a18      	ldr	r2, [pc, #96]	; (80016a8 <HAL_GPIO_Init+0x2d0>)
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800164a:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <HAL_GPIO_Init+0x2d0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	43db      	mvns	r3, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800166e:	4a0e      	ldr	r2, [pc, #56]	; (80016a8 <HAL_GPIO_Init+0x2d0>)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	3301      	adds	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	fa22 f303 	lsr.w	r3, r2, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	f47f aeaf 	bne.w	80013e8 <HAL_GPIO_Init+0x10>
  }
}
 800168a:	bf00      	nop
 800168c:	bf00      	nop
 800168e:	371c      	adds	r7, #28
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	40021000 	.word	0x40021000
 800169c:	40010000 	.word	0x40010000
 80016a0:	48000400 	.word	0x48000400
 80016a4:	48000800 	.word	0x48000800
 80016a8:	40010400 	.word	0x40010400

080016ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	807b      	strh	r3, [r7, #2]
 80016b8:	4613      	mov	r3, r2
 80016ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016bc:	787b      	ldrb	r3, [r7, #1]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016c2:	887a      	ldrh	r2, [r7, #2]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016c8:	e002      	b.n	80016d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016ca:	887a      	ldrh	r2, [r7, #2]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016ee:	887a      	ldrh	r2, [r7, #2]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4013      	ands	r3, r2
 80016f4:	041a      	lsls	r2, r3, #16
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	43d9      	mvns	r1, r3
 80016fa:	887b      	ldrh	r3, [r7, #2]
 80016fc:	400b      	ands	r3, r1
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	619a      	str	r2, [r3, #24]
}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <HAL_PWREx_GetVoltageRange+0x18>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800171c:	4618      	mov	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40007000 	.word	0x40007000

0800172c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800173a:	d130      	bne.n	800179e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800173c:	4b23      	ldr	r3, [pc, #140]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001748:	d038      	beq.n	80017bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001752:	4a1e      	ldr	r2, [pc, #120]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001754:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001758:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800175a:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2232      	movs	r2, #50	; 0x32
 8001760:	fb02 f303 	mul.w	r3, r2, r3
 8001764:	4a1b      	ldr	r2, [pc, #108]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001766:	fba2 2303 	umull	r2, r3, r2, r3
 800176a:	0c9b      	lsrs	r3, r3, #18
 800176c:	3301      	adds	r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001770:	e002      	b.n	8001778 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	3b01      	subs	r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001778:	4b14      	ldr	r3, [pc, #80]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001784:	d102      	bne.n	800178c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1f2      	bne.n	8001772 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001798:	d110      	bne.n	80017bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e00f      	b.n	80017be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017aa:	d007      	beq.n	80017bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017ac:	4b07      	ldr	r3, [pc, #28]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017b4:	4a05      	ldr	r2, [pc, #20]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40007000 	.word	0x40007000
 80017d0:	20000200 	.word	0x20000200
 80017d4:	431bde83 	.word	0x431bde83

080017d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d102      	bne.n	80017ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	f000 bc02 	b.w	8001ff0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ec:	4b96      	ldr	r3, [pc, #600]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 030c 	and.w	r3, r3, #12
 80017f4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017f6:	4b94      	ldr	r3, [pc, #592]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0310 	and.w	r3, r3, #16
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 80e4 	beq.w	80019d6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d007      	beq.n	8001824 <HAL_RCC_OscConfig+0x4c>
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	2b0c      	cmp	r3, #12
 8001818:	f040 808b 	bne.w	8001932 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	2b01      	cmp	r3, #1
 8001820:	f040 8087 	bne.w	8001932 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001824:	4b88      	ldr	r3, [pc, #544]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <HAL_RCC_OscConfig+0x64>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e3d9      	b.n	8001ff0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a1a      	ldr	r2, [r3, #32]
 8001840:	4b81      	ldr	r3, [pc, #516]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0308 	and.w	r3, r3, #8
 8001848:	2b00      	cmp	r3, #0
 800184a:	d004      	beq.n	8001856 <HAL_RCC_OscConfig+0x7e>
 800184c:	4b7e      	ldr	r3, [pc, #504]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001854:	e005      	b.n	8001862 <HAL_RCC_OscConfig+0x8a>
 8001856:	4b7c      	ldr	r3, [pc, #496]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800185c:	091b      	lsrs	r3, r3, #4
 800185e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001862:	4293      	cmp	r3, r2
 8001864:	d223      	bcs.n	80018ae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	4618      	mov	r0, r3
 800186c:	f000 fd54 	bl	8002318 <RCC_SetFlashLatencyFromMSIRange>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e3ba      	b.n	8001ff0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800187a:	4b73      	ldr	r3, [pc, #460]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a72      	ldr	r2, [pc, #456]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001880:	f043 0308 	orr.w	r3, r3, #8
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	4b70      	ldr	r3, [pc, #448]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	496d      	ldr	r1, [pc, #436]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001894:	4313      	orrs	r3, r2
 8001896:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001898:	4b6b      	ldr	r3, [pc, #428]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	021b      	lsls	r3, r3, #8
 80018a6:	4968      	ldr	r1, [pc, #416]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	604b      	str	r3, [r1, #4]
 80018ac:	e025      	b.n	80018fa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018ae:	4b66      	ldr	r3, [pc, #408]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a65      	ldr	r2, [pc, #404]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 80018b4:	f043 0308 	orr.w	r3, r3, #8
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	4b63      	ldr	r3, [pc, #396]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	4960      	ldr	r1, [pc, #384]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018cc:	4b5e      	ldr	r3, [pc, #376]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	021b      	lsls	r3, r3, #8
 80018da:	495b      	ldr	r1, [pc, #364]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d109      	bne.n	80018fa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 fd14 	bl	8002318 <RCC_SetFlashLatencyFromMSIRange>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e37a      	b.n	8001ff0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018fa:	f000 fc81 	bl	8002200 <HAL_RCC_GetSysClockFreq>
 80018fe:	4602      	mov	r2, r0
 8001900:	4b51      	ldr	r3, [pc, #324]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	091b      	lsrs	r3, r3, #4
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	4950      	ldr	r1, [pc, #320]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 800190c:	5ccb      	ldrb	r3, [r1, r3]
 800190e:	f003 031f 	and.w	r3, r3, #31
 8001912:	fa22 f303 	lsr.w	r3, r2, r3
 8001916:	4a4e      	ldr	r2, [pc, #312]	; (8001a50 <HAL_RCC_OscConfig+0x278>)
 8001918:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800191a:	4b4e      	ldr	r3, [pc, #312]	; (8001a54 <HAL_RCC_OscConfig+0x27c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe ff20 	bl	8000764 <HAL_InitTick>
 8001924:	4603      	mov	r3, r0
 8001926:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d052      	beq.n	80019d4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	e35e      	b.n	8001ff0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d032      	beq.n	80019a0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800193a:	4b43      	ldr	r3, [pc, #268]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a42      	ldr	r2, [pc, #264]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001946:	f7fe ff5d 	bl	8000804 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800194e:	f7fe ff59 	bl	8000804 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e347      	b.n	8001ff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001960:	4b39      	ldr	r3, [pc, #228]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f0      	beq.n	800194e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800196c:	4b36      	ldr	r3, [pc, #216]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a35      	ldr	r2, [pc, #212]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001972:	f043 0308 	orr.w	r3, r3, #8
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	4b33      	ldr	r3, [pc, #204]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	4930      	ldr	r1, [pc, #192]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001986:	4313      	orrs	r3, r2
 8001988:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800198a:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	021b      	lsls	r3, r3, #8
 8001998:	492b      	ldr	r1, [pc, #172]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 800199a:	4313      	orrs	r3, r2
 800199c:	604b      	str	r3, [r1, #4]
 800199e:	e01a      	b.n	80019d6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019a0:	4b29      	ldr	r3, [pc, #164]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a28      	ldr	r2, [pc, #160]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 80019a6:	f023 0301 	bic.w	r3, r3, #1
 80019aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019ac:	f7fe ff2a 	bl	8000804 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019b4:	f7fe ff26 	bl	8000804 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e314      	b.n	8001ff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019c6:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x1dc>
 80019d2:	e000      	b.n	80019d6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d073      	beq.n	8001aca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d005      	beq.n	80019f4 <HAL_RCC_OscConfig+0x21c>
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	2b0c      	cmp	r3, #12
 80019ec:	d10e      	bne.n	8001a0c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d10b      	bne.n	8001a0c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f4:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d063      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x2f0>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d15f      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e2f1      	b.n	8001ff0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a14:	d106      	bne.n	8001a24 <HAL_RCC_OscConfig+0x24c>
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a0b      	ldr	r2, [pc, #44]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	e025      	b.n	8001a70 <HAL_RCC_OscConfig+0x298>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a2c:	d114      	bne.n	8001a58 <HAL_RCC_OscConfig+0x280>
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a05      	ldr	r2, [pc, #20]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a02      	ldr	r2, [pc, #8]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 8001a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	e013      	b.n	8001a70 <HAL_RCC_OscConfig+0x298>
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	080029ec 	.word	0x080029ec
 8001a50:	20000200 	.word	0x20000200
 8001a54:	20000204 	.word	0x20000204
 8001a58:	4ba0      	ldr	r3, [pc, #640]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a9f      	ldr	r2, [pc, #636]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	4b9d      	ldr	r3, [pc, #628]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a9c      	ldr	r2, [pc, #624]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d013      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a78:	f7fe fec4 	bl	8000804 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a80:	f7fe fec0 	bl	8000804 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b64      	cmp	r3, #100	; 0x64
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e2ae      	b.n	8001ff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a92:	4b92      	ldr	r3, [pc, #584]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCC_OscConfig+0x2a8>
 8001a9e:	e014      	b.n	8001aca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7fe feb0 	bl	8000804 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa8:	f7fe feac 	bl	8000804 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	; 0x64
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e29a      	b.n	8001ff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aba:	4b88      	ldr	r3, [pc, #544]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x2d0>
 8001ac6:	e000      	b.n	8001aca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d060      	beq.n	8001b98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d005      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x310>
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	2b0c      	cmp	r3, #12
 8001ae0:	d119      	bne.n	8001b16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d116      	bne.n	8001b16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ae8:	4b7c      	ldr	r3, [pc, #496]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <HAL_RCC_OscConfig+0x328>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e277      	b.n	8001ff0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b00:	4b76      	ldr	r3, [pc, #472]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	061b      	lsls	r3, r3, #24
 8001b0e:	4973      	ldr	r1, [pc, #460]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b14:	e040      	b.n	8001b98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d023      	beq.n	8001b66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b1e:	4b6f      	ldr	r3, [pc, #444]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a6e      	ldr	r2, [pc, #440]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2a:	f7fe fe6b 	bl	8000804 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b32:	f7fe fe67 	bl	8000804 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e255      	b.n	8001ff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b44:	4b65      	ldr	r3, [pc, #404]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b50:	4b62      	ldr	r3, [pc, #392]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	061b      	lsls	r3, r3, #24
 8001b5e:	495f      	ldr	r1, [pc, #380]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	604b      	str	r3, [r1, #4]
 8001b64:	e018      	b.n	8001b98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b66:	4b5d      	ldr	r3, [pc, #372]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a5c      	ldr	r2, [pc, #368]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b72:	f7fe fe47 	bl	8000804 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b7a:	f7fe fe43 	bl	8000804 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e231      	b.n	8001ff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b8c:	4b53      	ldr	r3, [pc, #332]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1f0      	bne.n	8001b7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d03c      	beq.n	8001c1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d01c      	beq.n	8001be6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bac:	4b4b      	ldr	r3, [pc, #300]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb2:	4a4a      	ldr	r2, [pc, #296]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbc:	f7fe fe22 	bl	8000804 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc4:	f7fe fe1e 	bl	8000804 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e20c      	b.n	8001ff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bd6:	4b41      	ldr	r3, [pc, #260]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0ef      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x3ec>
 8001be4:	e01b      	b.n	8001c1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be6:	4b3d      	ldr	r3, [pc, #244]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bec:	4a3b      	ldr	r2, [pc, #236]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001bee:	f023 0301 	bic.w	r3, r3, #1
 8001bf2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf6:	f7fe fe05 	bl	8000804 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfe:	f7fe fe01 	bl	8000804 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e1ef      	b.n	8001ff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c10:	4b32      	ldr	r3, [pc, #200]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1ef      	bne.n	8001bfe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 80a6 	beq.w	8001d78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c30:	4b2a      	ldr	r3, [pc, #168]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10d      	bne.n	8001c58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3c:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c40:	4a26      	ldr	r2, [pc, #152]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c46:	6593      	str	r3, [r2, #88]	; 0x58
 8001c48:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c54:	2301      	movs	r3, #1
 8001c56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c58:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d118      	bne.n	8001c96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c64:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a1d      	ldr	r2, [pc, #116]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c70:	f7fe fdc8 	bl	8000804 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c78:	f7fe fdc4 	bl	8000804 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e1b2      	b.n	8001ff0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c8a:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d108      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x4d8>
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca4:	4a0d      	ldr	r2, [pc, #52]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cae:	e029      	b.n	8001d04 <HAL_RCC_OscConfig+0x52c>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b05      	cmp	r3, #5
 8001cb6:	d115      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x50c>
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cbe:	4a07      	ldr	r2, [pc, #28]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001cc0:	f043 0304 	orr.w	r3, r3, #4
 8001cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cc8:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cce:	4a03      	ldr	r2, [pc, #12]	; (8001cdc <HAL_RCC_OscConfig+0x504>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cd8:	e014      	b.n	8001d04 <HAL_RCC_OscConfig+0x52c>
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40007000 	.word	0x40007000
 8001ce4:	4b9a      	ldr	r3, [pc, #616]	; (8001f50 <HAL_RCC_OscConfig+0x778>)
 8001ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cea:	4a99      	ldr	r2, [pc, #612]	; (8001f50 <HAL_RCC_OscConfig+0x778>)
 8001cec:	f023 0301 	bic.w	r3, r3, #1
 8001cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cf4:	4b96      	ldr	r3, [pc, #600]	; (8001f50 <HAL_RCC_OscConfig+0x778>)
 8001cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cfa:	4a95      	ldr	r2, [pc, #596]	; (8001f50 <HAL_RCC_OscConfig+0x778>)
 8001cfc:	f023 0304 	bic.w	r3, r3, #4
 8001d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d016      	beq.n	8001d3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0c:	f7fe fd7a 	bl	8000804 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d12:	e00a      	b.n	8001d2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d14:	f7fe fd76 	bl	8000804 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e162      	b.n	8001ff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d2a:	4b89      	ldr	r3, [pc, #548]	; (8001f50 <HAL_RCC_OscConfig+0x778>)
 8001d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0ed      	beq.n	8001d14 <HAL_RCC_OscConfig+0x53c>
 8001d38:	e015      	b.n	8001d66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3a:	f7fe fd63 	bl	8000804 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d40:	e00a      	b.n	8001d58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d42:	f7fe fd5f 	bl	8000804 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e14b      	b.n	8001ff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d58:	4b7d      	ldr	r3, [pc, #500]	; (8001f50 <HAL_RCC_OscConfig+0x778>)
 8001d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1ed      	bne.n	8001d42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d66:	7ffb      	ldrb	r3, [r7, #31]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d105      	bne.n	8001d78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d6c:	4b78      	ldr	r3, [pc, #480]	; (8001f50 <HAL_RCC_OscConfig+0x778>)
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d70:	4a77      	ldr	r2, [pc, #476]	; (8001f50 <HAL_RCC_OscConfig+0x778>)
 8001d72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d76:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0320 	and.w	r3, r3, #32
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d03c      	beq.n	8001dfe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d01c      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d8c:	4b70      	ldr	r3, [pc, #448]	; (8001f50 <HAL_RCC_OscConfig+0x778>)
 8001d8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d92:	4a6f      	ldr	r2, [pc, #444]	; (8001f50 <HAL_RCC_OscConfig+0x778>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9c:	f7fe fd32 	bl	8000804 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001da4:	f7fe fd2e 	bl	8000804 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e11c      	b.n	8001ff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001db6:	4b66      	ldr	r3, [pc, #408]	; (8001f50 <HAL_RCC_OscConfig+0x778>)
 8001db8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0ef      	beq.n	8001da4 <HAL_RCC_OscConfig+0x5cc>
 8001dc4:	e01b      	b.n	8001dfe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dc6:	4b62      	ldr	r3, [pc, #392]	; (8001f50 <HAL_RCC_OscConfig+0x778>)
 8001dc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dcc:	4a60      	ldr	r2, [pc, #384]	; (8001f50 <HAL_RCC_OscConfig+0x778>)
 8001dce:	f023 0301 	bic.w	r3, r3, #1
 8001dd2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd6:	f7fe fd15 	bl	8000804 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dde:	f7fe fd11 	bl	8000804 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e0ff      	b.n	8001ff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001df0:	4b57      	ldr	r3, [pc, #348]	; (8001f50 <HAL_RCC_OscConfig+0x778>)
 8001df2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1ef      	bne.n	8001dde <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 80f3 	beq.w	8001fee <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	f040 80c9 	bne.w	8001fa4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e12:	4b4f      	ldr	r3, [pc, #316]	; (8001f50 <HAL_RCC_OscConfig+0x778>)
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f003 0203 	and.w	r2, r3, #3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d12c      	bne.n	8001e80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e30:	3b01      	subs	r3, #1
 8001e32:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d123      	bne.n	8001e80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e42:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d11b      	bne.n	8001e80 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e52:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d113      	bne.n	8001e80 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e62:	085b      	lsrs	r3, r3, #1
 8001e64:	3b01      	subs	r3, #1
 8001e66:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d109      	bne.n	8001e80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	085b      	lsrs	r3, r3, #1
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d06b      	beq.n	8001f58 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	2b0c      	cmp	r3, #12
 8001e84:	d062      	beq.n	8001f4c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e86:	4b32      	ldr	r3, [pc, #200]	; (8001f50 <HAL_RCC_OscConfig+0x778>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e0ac      	b.n	8001ff0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e96:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <HAL_RCC_OscConfig+0x778>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a2d      	ldr	r2, [pc, #180]	; (8001f50 <HAL_RCC_OscConfig+0x778>)
 8001e9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ea0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ea2:	f7fe fcaf 	bl	8000804 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eaa:	f7fe fcab 	bl	8000804 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e099      	b.n	8001ff0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ebc:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <HAL_RCC_OscConfig+0x778>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1f0      	bne.n	8001eaa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ec8:	4b21      	ldr	r3, [pc, #132]	; (8001f50 <HAL_RCC_OscConfig+0x778>)
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	4b21      	ldr	r3, [pc, #132]	; (8001f54 <HAL_RCC_OscConfig+0x77c>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ed8:	3a01      	subs	r2, #1
 8001eda:	0112      	lsls	r2, r2, #4
 8001edc:	4311      	orrs	r1, r2
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ee2:	0212      	lsls	r2, r2, #8
 8001ee4:	4311      	orrs	r1, r2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001eea:	0852      	lsrs	r2, r2, #1
 8001eec:	3a01      	subs	r2, #1
 8001eee:	0552      	lsls	r2, r2, #21
 8001ef0:	4311      	orrs	r1, r2
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ef6:	0852      	lsrs	r2, r2, #1
 8001ef8:	3a01      	subs	r2, #1
 8001efa:	0652      	lsls	r2, r2, #25
 8001efc:	4311      	orrs	r1, r2
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f02:	06d2      	lsls	r2, r2, #27
 8001f04:	430a      	orrs	r2, r1
 8001f06:	4912      	ldr	r1, [pc, #72]	; (8001f50 <HAL_RCC_OscConfig+0x778>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f0c:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <HAL_RCC_OscConfig+0x778>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a0f      	ldr	r2, [pc, #60]	; (8001f50 <HAL_RCC_OscConfig+0x778>)
 8001f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f18:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <HAL_RCC_OscConfig+0x778>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	4a0c      	ldr	r2, [pc, #48]	; (8001f50 <HAL_RCC_OscConfig+0x778>)
 8001f1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f24:	f7fe fc6e 	bl	8000804 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2c:	f7fe fc6a 	bl	8000804 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e058      	b.n	8001ff0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f3e:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <HAL_RCC_OscConfig+0x778>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f0      	beq.n	8001f2c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f4a:	e050      	b.n	8001fee <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e04f      	b.n	8001ff0 <HAL_RCC_OscConfig+0x818>
 8001f50:	40021000 	.word	0x40021000
 8001f54:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f58:	4b27      	ldr	r3, [pc, #156]	; (8001ff8 <HAL_RCC_OscConfig+0x820>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d144      	bne.n	8001fee <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f64:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <HAL_RCC_OscConfig+0x820>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a23      	ldr	r2, [pc, #140]	; (8001ff8 <HAL_RCC_OscConfig+0x820>)
 8001f6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f70:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <HAL_RCC_OscConfig+0x820>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	4a20      	ldr	r2, [pc, #128]	; (8001ff8 <HAL_RCC_OscConfig+0x820>)
 8001f76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f7c:	f7fe fc42 	bl	8000804 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f84:	f7fe fc3e 	bl	8000804 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e02c      	b.n	8001ff0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f96:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <HAL_RCC_OscConfig+0x820>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0x7ac>
 8001fa2:	e024      	b.n	8001fee <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	2b0c      	cmp	r3, #12
 8001fa8:	d01f      	beq.n	8001fea <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001faa:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <HAL_RCC_OscConfig+0x820>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a12      	ldr	r2, [pc, #72]	; (8001ff8 <HAL_RCC_OscConfig+0x820>)
 8001fb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb6:	f7fe fc25 	bl	8000804 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fbe:	f7fe fc21 	bl	8000804 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e00f      	b.n	8001ff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fd0:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <HAL_RCC_OscConfig+0x820>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1f0      	bne.n	8001fbe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_RCC_OscConfig+0x820>)
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	4905      	ldr	r1, [pc, #20]	; (8001ff8 <HAL_RCC_OscConfig+0x820>)
 8001fe2:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_RCC_OscConfig+0x824>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60cb      	str	r3, [r1, #12]
 8001fe8:	e001      	b.n	8001fee <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3720      	adds	r7, #32
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	feeefffc 	.word	0xfeeefffc

08002000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e0e7      	b.n	80021e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002014:	4b75      	ldr	r3, [pc, #468]	; (80021ec <HAL_RCC_ClockConfig+0x1ec>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d910      	bls.n	8002044 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002022:	4b72      	ldr	r3, [pc, #456]	; (80021ec <HAL_RCC_ClockConfig+0x1ec>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 0207 	bic.w	r2, r3, #7
 800202a:	4970      	ldr	r1, [pc, #448]	; (80021ec <HAL_RCC_ClockConfig+0x1ec>)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	4313      	orrs	r3, r2
 8002030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002032:	4b6e      	ldr	r3, [pc, #440]	; (80021ec <HAL_RCC_ClockConfig+0x1ec>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d001      	beq.n	8002044 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0cf      	b.n	80021e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d010      	beq.n	8002072 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	4b66      	ldr	r3, [pc, #408]	; (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800205c:	429a      	cmp	r2, r3
 800205e:	d908      	bls.n	8002072 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002060:	4b63      	ldr	r3, [pc, #396]	; (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	4960      	ldr	r1, [pc, #384]	; (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 800206e:	4313      	orrs	r3, r2
 8002070:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d04c      	beq.n	8002118 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b03      	cmp	r3, #3
 8002084:	d107      	bne.n	8002096 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002086:	4b5a      	ldr	r3, [pc, #360]	; (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d121      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e0a6      	b.n	80021e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b02      	cmp	r3, #2
 800209c:	d107      	bne.n	80020ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800209e:	4b54      	ldr	r3, [pc, #336]	; (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d115      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e09a      	b.n	80021e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d107      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020b6:	4b4e      	ldr	r3, [pc, #312]	; (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d109      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e08e      	b.n	80021e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020c6:	4b4a      	ldr	r3, [pc, #296]	; (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e086      	b.n	80021e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020d6:	4b46      	ldr	r3, [pc, #280]	; (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f023 0203 	bic.w	r2, r3, #3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	4943      	ldr	r1, [pc, #268]	; (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020e8:	f7fe fb8c 	bl	8000804 <HAL_GetTick>
 80020ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ee:	e00a      	b.n	8002106 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f0:	f7fe fb88 	bl	8000804 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fe:	4293      	cmp	r3, r2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e06e      	b.n	80021e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002106:	4b3a      	ldr	r3, [pc, #232]	; (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 020c 	and.w	r2, r3, #12
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	429a      	cmp	r2, r3
 8002116:	d1eb      	bne.n	80020f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d010      	beq.n	8002146 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	4b31      	ldr	r3, [pc, #196]	; (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002130:	429a      	cmp	r2, r3
 8002132:	d208      	bcs.n	8002146 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002134:	4b2e      	ldr	r3, [pc, #184]	; (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	492b      	ldr	r1, [pc, #172]	; (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002142:	4313      	orrs	r3, r2
 8002144:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002146:	4b29      	ldr	r3, [pc, #164]	; (80021ec <HAL_RCC_ClockConfig+0x1ec>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d210      	bcs.n	8002176 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002154:	4b25      	ldr	r3, [pc, #148]	; (80021ec <HAL_RCC_ClockConfig+0x1ec>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f023 0207 	bic.w	r2, r3, #7
 800215c:	4923      	ldr	r1, [pc, #140]	; (80021ec <HAL_RCC_ClockConfig+0x1ec>)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	4313      	orrs	r3, r2
 8002162:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002164:	4b21      	ldr	r3, [pc, #132]	; (80021ec <HAL_RCC_ClockConfig+0x1ec>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d001      	beq.n	8002176 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e036      	b.n	80021e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	2b00      	cmp	r3, #0
 8002180:	d008      	beq.n	8002194 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002182:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	4918      	ldr	r1, [pc, #96]	; (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002190:	4313      	orrs	r3, r2
 8002192:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	2b00      	cmp	r3, #0
 800219e:	d009      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021a0:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	4910      	ldr	r1, [pc, #64]	; (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021b4:	f000 f824 	bl	8002200 <HAL_RCC_GetSysClockFreq>
 80021b8:	4602      	mov	r2, r0
 80021ba:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <HAL_RCC_ClockConfig+0x1f0>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	091b      	lsrs	r3, r3, #4
 80021c0:	f003 030f 	and.w	r3, r3, #15
 80021c4:	490b      	ldr	r1, [pc, #44]	; (80021f4 <HAL_RCC_ClockConfig+0x1f4>)
 80021c6:	5ccb      	ldrb	r3, [r1, r3]
 80021c8:	f003 031f 	and.w	r3, r3, #31
 80021cc:	fa22 f303 	lsr.w	r3, r2, r3
 80021d0:	4a09      	ldr	r2, [pc, #36]	; (80021f8 <HAL_RCC_ClockConfig+0x1f8>)
 80021d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021d4:	4b09      	ldr	r3, [pc, #36]	; (80021fc <HAL_RCC_ClockConfig+0x1fc>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe fac3 	bl	8000764 <HAL_InitTick>
 80021de:	4603      	mov	r3, r0
 80021e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80021e2:	7afb      	ldrb	r3, [r7, #11]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40022000 	.word	0x40022000
 80021f0:	40021000 	.word	0x40021000
 80021f4:	080029ec 	.word	0x080029ec
 80021f8:	20000200 	.word	0x20000200
 80021fc:	20000204 	.word	0x20000204

08002200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002200:	b480      	push	{r7}
 8002202:	b089      	sub	sp, #36	; 0x24
 8002204:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	2300      	movs	r3, #0
 800220c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800220e:	4b3e      	ldr	r3, [pc, #248]	; (8002308 <HAL_RCC_GetSysClockFreq+0x108>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002218:	4b3b      	ldr	r3, [pc, #236]	; (8002308 <HAL_RCC_GetSysClockFreq+0x108>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0x34>
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	2b0c      	cmp	r3, #12
 800222c:	d121      	bne.n	8002272 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d11e      	bne.n	8002272 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002234:	4b34      	ldr	r3, [pc, #208]	; (8002308 <HAL_RCC_GetSysClockFreq+0x108>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0308 	and.w	r3, r3, #8
 800223c:	2b00      	cmp	r3, #0
 800223e:	d107      	bne.n	8002250 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002240:	4b31      	ldr	r3, [pc, #196]	; (8002308 <HAL_RCC_GetSysClockFreq+0x108>)
 8002242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002246:	0a1b      	lsrs	r3, r3, #8
 8002248:	f003 030f 	and.w	r3, r3, #15
 800224c:	61fb      	str	r3, [r7, #28]
 800224e:	e005      	b.n	800225c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002250:	4b2d      	ldr	r3, [pc, #180]	; (8002308 <HAL_RCC_GetSysClockFreq+0x108>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800225c:	4a2b      	ldr	r2, [pc, #172]	; (800230c <HAL_RCC_GetSysClockFreq+0x10c>)
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002264:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10d      	bne.n	8002288 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002270:	e00a      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2b04      	cmp	r3, #4
 8002276:	d102      	bne.n	800227e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002278:	4b25      	ldr	r3, [pc, #148]	; (8002310 <HAL_RCC_GetSysClockFreq+0x110>)
 800227a:	61bb      	str	r3, [r7, #24]
 800227c:	e004      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	2b08      	cmp	r3, #8
 8002282:	d101      	bne.n	8002288 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002284:	4b23      	ldr	r3, [pc, #140]	; (8002314 <HAL_RCC_GetSysClockFreq+0x114>)
 8002286:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	2b0c      	cmp	r3, #12
 800228c:	d134      	bne.n	80022f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800228e:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <HAL_RCC_GetSysClockFreq+0x108>)
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d003      	beq.n	80022a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d003      	beq.n	80022ac <HAL_RCC_GetSysClockFreq+0xac>
 80022a4:	e005      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022a6:	4b1a      	ldr	r3, [pc, #104]	; (8002310 <HAL_RCC_GetSysClockFreq+0x110>)
 80022a8:	617b      	str	r3, [r7, #20]
      break;
 80022aa:	e005      	b.n	80022b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022ac:	4b19      	ldr	r3, [pc, #100]	; (8002314 <HAL_RCC_GetSysClockFreq+0x114>)
 80022ae:	617b      	str	r3, [r7, #20]
      break;
 80022b0:	e002      	b.n	80022b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	617b      	str	r3, [r7, #20]
      break;
 80022b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022b8:	4b13      	ldr	r3, [pc, #76]	; (8002308 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	091b      	lsrs	r3, r3, #4
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	3301      	adds	r3, #1
 80022c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <HAL_RCC_GetSysClockFreq+0x108>)
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	0a1b      	lsrs	r3, r3, #8
 80022cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	fb03 f202 	mul.w	r2, r3, r2
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022de:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <HAL_RCC_GetSysClockFreq+0x108>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	0e5b      	lsrs	r3, r3, #25
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	3301      	adds	r3, #1
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022f8:	69bb      	ldr	r3, [r7, #24]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3724      	adds	r7, #36	; 0x24
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40021000 	.word	0x40021000
 800230c:	080029fc 	.word	0x080029fc
 8002310:	00f42400 	.word	0x00f42400
 8002314:	007a1200 	.word	0x007a1200

08002318 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002320:	2300      	movs	r3, #0
 8002322:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002324:	4b2a      	ldr	r3, [pc, #168]	; (80023d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002330:	f7ff f9ee 	bl	8001710 <HAL_PWREx_GetVoltageRange>
 8002334:	6178      	str	r0, [r7, #20]
 8002336:	e014      	b.n	8002362 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002338:	4b25      	ldr	r3, [pc, #148]	; (80023d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	4a24      	ldr	r2, [pc, #144]	; (80023d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800233e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002342:	6593      	str	r3, [r2, #88]	; 0x58
 8002344:	4b22      	ldr	r3, [pc, #136]	; (80023d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002350:	f7ff f9de 	bl	8001710 <HAL_PWREx_GetVoltageRange>
 8002354:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002356:	4b1e      	ldr	r3, [pc, #120]	; (80023d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235a:	4a1d      	ldr	r2, [pc, #116]	; (80023d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800235c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002360:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002368:	d10b      	bne.n	8002382 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b80      	cmp	r3, #128	; 0x80
 800236e:	d919      	bls.n	80023a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2ba0      	cmp	r3, #160	; 0xa0
 8002374:	d902      	bls.n	800237c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002376:	2302      	movs	r3, #2
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	e013      	b.n	80023a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800237c:	2301      	movs	r3, #1
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	e010      	b.n	80023a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b80      	cmp	r3, #128	; 0x80
 8002386:	d902      	bls.n	800238e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002388:	2303      	movs	r3, #3
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	e00a      	b.n	80023a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b80      	cmp	r3, #128	; 0x80
 8002392:	d102      	bne.n	800239a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002394:	2302      	movs	r3, #2
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	e004      	b.n	80023a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b70      	cmp	r3, #112	; 0x70
 800239e:	d101      	bne.n	80023a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023a0:	2301      	movs	r3, #1
 80023a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f023 0207 	bic.w	r2, r3, #7
 80023ac:	4909      	ldr	r1, [pc, #36]	; (80023d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023b4:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d001      	beq.n	80023c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40022000 	.word	0x40022000

080023d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e049      	b.n	800247e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d106      	bne.n	8002404 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7fe f90a 	bl	8000618 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2202      	movs	r2, #2
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3304      	adds	r3, #4
 8002414:	4619      	mov	r1, r3
 8002416:	4610      	mov	r0, r2
 8002418:	f000 f94c 	bl	80026b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b01      	cmp	r3, #1
 800249a:	d001      	beq.n	80024a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e033      	b.n	8002508 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2202      	movs	r2, #2
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a19      	ldr	r2, [pc, #100]	; (8002514 <HAL_TIM_Base_Start+0x8c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d009      	beq.n	80024c6 <HAL_TIM_Base_Start+0x3e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ba:	d004      	beq.n	80024c6 <HAL_TIM_Base_Start+0x3e>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a15      	ldr	r2, [pc, #84]	; (8002518 <HAL_TIM_Base_Start+0x90>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d115      	bne.n	80024f2 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	4b13      	ldr	r3, [pc, #76]	; (800251c <HAL_TIM_Base_Start+0x94>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2b06      	cmp	r3, #6
 80024d6:	d015      	beq.n	8002504 <HAL_TIM_Base_Start+0x7c>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024de:	d011      	beq.n	8002504 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0201 	orr.w	r2, r2, #1
 80024ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f0:	e008      	b.n	8002504 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0201 	orr.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	e000      	b.n	8002506 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002504:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	40012c00 	.word	0x40012c00
 8002518:	40014000 	.word	0x40014000
 800251c:	00010007 	.word	0x00010007

08002520 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_TIM_ConfigClockSource+0x1c>
 8002538:	2302      	movs	r3, #2
 800253a:	e0b6      	b.n	80026aa <HAL_TIM_ConfigClockSource+0x18a>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2202      	movs	r2, #2
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800255a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800255e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002566:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002578:	d03e      	beq.n	80025f8 <HAL_TIM_ConfigClockSource+0xd8>
 800257a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800257e:	f200 8087 	bhi.w	8002690 <HAL_TIM_ConfigClockSource+0x170>
 8002582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002586:	f000 8086 	beq.w	8002696 <HAL_TIM_ConfigClockSource+0x176>
 800258a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800258e:	d87f      	bhi.n	8002690 <HAL_TIM_ConfigClockSource+0x170>
 8002590:	2b70      	cmp	r3, #112	; 0x70
 8002592:	d01a      	beq.n	80025ca <HAL_TIM_ConfigClockSource+0xaa>
 8002594:	2b70      	cmp	r3, #112	; 0x70
 8002596:	d87b      	bhi.n	8002690 <HAL_TIM_ConfigClockSource+0x170>
 8002598:	2b60      	cmp	r3, #96	; 0x60
 800259a:	d050      	beq.n	800263e <HAL_TIM_ConfigClockSource+0x11e>
 800259c:	2b60      	cmp	r3, #96	; 0x60
 800259e:	d877      	bhi.n	8002690 <HAL_TIM_ConfigClockSource+0x170>
 80025a0:	2b50      	cmp	r3, #80	; 0x50
 80025a2:	d03c      	beq.n	800261e <HAL_TIM_ConfigClockSource+0xfe>
 80025a4:	2b50      	cmp	r3, #80	; 0x50
 80025a6:	d873      	bhi.n	8002690 <HAL_TIM_ConfigClockSource+0x170>
 80025a8:	2b40      	cmp	r3, #64	; 0x40
 80025aa:	d058      	beq.n	800265e <HAL_TIM_ConfigClockSource+0x13e>
 80025ac:	2b40      	cmp	r3, #64	; 0x40
 80025ae:	d86f      	bhi.n	8002690 <HAL_TIM_ConfigClockSource+0x170>
 80025b0:	2b30      	cmp	r3, #48	; 0x30
 80025b2:	d064      	beq.n	800267e <HAL_TIM_ConfigClockSource+0x15e>
 80025b4:	2b30      	cmp	r3, #48	; 0x30
 80025b6:	d86b      	bhi.n	8002690 <HAL_TIM_ConfigClockSource+0x170>
 80025b8:	2b20      	cmp	r3, #32
 80025ba:	d060      	beq.n	800267e <HAL_TIM_ConfigClockSource+0x15e>
 80025bc:	2b20      	cmp	r3, #32
 80025be:	d867      	bhi.n	8002690 <HAL_TIM_ConfigClockSource+0x170>
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d05c      	beq.n	800267e <HAL_TIM_ConfigClockSource+0x15e>
 80025c4:	2b10      	cmp	r3, #16
 80025c6:	d05a      	beq.n	800267e <HAL_TIM_ConfigClockSource+0x15e>
 80025c8:	e062      	b.n	8002690 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	6899      	ldr	r1, [r3, #8]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f000 f949 	bl	8002870 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	609a      	str	r2, [r3, #8]
      break;
 80025f6:	e04f      	b.n	8002698 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6818      	ldr	r0, [r3, #0]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	6899      	ldr	r1, [r3, #8]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	f000 f932 	bl	8002870 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800261a:	609a      	str	r2, [r3, #8]
      break;
 800261c:	e03c      	b.n	8002698 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6818      	ldr	r0, [r3, #0]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	6859      	ldr	r1, [r3, #4]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	461a      	mov	r2, r3
 800262c:	f000 f8a6 	bl	800277c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2150      	movs	r1, #80	; 0x50
 8002636:	4618      	mov	r0, r3
 8002638:	f000 f8ff 	bl	800283a <TIM_ITRx_SetConfig>
      break;
 800263c:	e02c      	b.n	8002698 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6859      	ldr	r1, [r3, #4]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	461a      	mov	r2, r3
 800264c:	f000 f8c5 	bl	80027da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2160      	movs	r1, #96	; 0x60
 8002656:	4618      	mov	r0, r3
 8002658:	f000 f8ef 	bl	800283a <TIM_ITRx_SetConfig>
      break;
 800265c:	e01c      	b.n	8002698 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	6859      	ldr	r1, [r3, #4]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	461a      	mov	r2, r3
 800266c:	f000 f886 	bl	800277c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2140      	movs	r1, #64	; 0x40
 8002676:	4618      	mov	r0, r3
 8002678:	f000 f8df 	bl	800283a <TIM_ITRx_SetConfig>
      break;
 800267c:	e00c      	b.n	8002698 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4619      	mov	r1, r3
 8002688:	4610      	mov	r0, r2
 800268a:	f000 f8d6 	bl	800283a <TIM_ITRx_SetConfig>
      break;
 800268e:	e003      	b.n	8002698 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	73fb      	strb	r3, [r7, #15]
      break;
 8002694:	e000      	b.n	8002698 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002696:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a2a      	ldr	r2, [pc, #168]	; (8002770 <TIM_Base_SetConfig+0xbc>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d003      	beq.n	80026d4 <TIM_Base_SetConfig+0x20>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d2:	d108      	bne.n	80026e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a21      	ldr	r2, [pc, #132]	; (8002770 <TIM_Base_SetConfig+0xbc>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d00b      	beq.n	8002706 <TIM_Base_SetConfig+0x52>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f4:	d007      	beq.n	8002706 <TIM_Base_SetConfig+0x52>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a1e      	ldr	r2, [pc, #120]	; (8002774 <TIM_Base_SetConfig+0xc0>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d003      	beq.n	8002706 <TIM_Base_SetConfig+0x52>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a1d      	ldr	r2, [pc, #116]	; (8002778 <TIM_Base_SetConfig+0xc4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d108      	bne.n	8002718 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800270c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	4313      	orrs	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	4313      	orrs	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a0c      	ldr	r2, [pc, #48]	; (8002770 <TIM_Base_SetConfig+0xbc>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d007      	beq.n	8002754 <TIM_Base_SetConfig+0xa0>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a0b      	ldr	r2, [pc, #44]	; (8002774 <TIM_Base_SetConfig+0xc0>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d003      	beq.n	8002754 <TIM_Base_SetConfig+0xa0>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <TIM_Base_SetConfig+0xc4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d103      	bne.n	800275c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	691a      	ldr	r2, [r3, #16]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	615a      	str	r2, [r3, #20]
}
 8002762:	bf00      	nop
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40012c00 	.word	0x40012c00
 8002774:	40014000 	.word	0x40014000
 8002778:	40014400 	.word	0x40014400

0800277c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800277c:	b480      	push	{r7}
 800277e:	b087      	sub	sp, #28
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	f023 0201 	bic.w	r2, r3, #1
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f023 030a 	bic.w	r3, r3, #10
 80027b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4313      	orrs	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	621a      	str	r2, [r3, #32]
}
 80027ce:	bf00      	nop
 80027d0:	371c      	adds	r7, #28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027da:	b480      	push	{r7}
 80027dc:	b087      	sub	sp, #28
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	f023 0210 	bic.w	r2, r3, #16
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002804:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	031b      	lsls	r3, r3, #12
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002816:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	621a      	str	r2, [r3, #32]
}
 800282e:	bf00      	nop
 8002830:	371c      	adds	r7, #28
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800283a:	b480      	push	{r7}
 800283c:	b085      	sub	sp, #20
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002850:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4313      	orrs	r3, r2
 8002858:	f043 0307 	orr.w	r3, r3, #7
 800285c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	609a      	str	r2, [r3, #8]
}
 8002864:	bf00      	nop
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002870:	b480      	push	{r7}
 8002872:	b087      	sub	sp, #28
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
 800287c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800288a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	021a      	lsls	r2, r3, #8
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	431a      	orrs	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4313      	orrs	r3, r2
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	4313      	orrs	r3, r2
 800289c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	609a      	str	r2, [r3, #8]
}
 80028a4:	bf00      	nop
 80028a6:	371c      	adds	r7, #28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e04f      	b.n	8002968 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a21      	ldr	r2, [pc, #132]	; (8002974 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d108      	bne.n	8002904 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80028f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	4313      	orrs	r3, r2
 8002902:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a14      	ldr	r2, [pc, #80]	; (8002974 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d009      	beq.n	800293c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002930:	d004      	beq.n	800293c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a10      	ldr	r2, [pc, #64]	; (8002978 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d10c      	bne.n	8002956 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002942:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	4313      	orrs	r3, r2
 800294c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	40012c00 	.word	0x40012c00
 8002978:	40014000 	.word	0x40014000

0800297c <__libc_init_array>:
 800297c:	b570      	push	{r4, r5, r6, lr}
 800297e:	4d0d      	ldr	r5, [pc, #52]	; (80029b4 <__libc_init_array+0x38>)
 8002980:	4c0d      	ldr	r4, [pc, #52]	; (80029b8 <__libc_init_array+0x3c>)
 8002982:	1b64      	subs	r4, r4, r5
 8002984:	10a4      	asrs	r4, r4, #2
 8002986:	2600      	movs	r6, #0
 8002988:	42a6      	cmp	r6, r4
 800298a:	d109      	bne.n	80029a0 <__libc_init_array+0x24>
 800298c:	4d0b      	ldr	r5, [pc, #44]	; (80029bc <__libc_init_array+0x40>)
 800298e:	4c0c      	ldr	r4, [pc, #48]	; (80029c0 <__libc_init_array+0x44>)
 8002990:	f000 f820 	bl	80029d4 <_init>
 8002994:	1b64      	subs	r4, r4, r5
 8002996:	10a4      	asrs	r4, r4, #2
 8002998:	2600      	movs	r6, #0
 800299a:	42a6      	cmp	r6, r4
 800299c:	d105      	bne.n	80029aa <__libc_init_array+0x2e>
 800299e:	bd70      	pop	{r4, r5, r6, pc}
 80029a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029a4:	4798      	blx	r3
 80029a6:	3601      	adds	r6, #1
 80029a8:	e7ee      	b.n	8002988 <__libc_init_array+0xc>
 80029aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ae:	4798      	blx	r3
 80029b0:	3601      	adds	r6, #1
 80029b2:	e7f2      	b.n	800299a <__libc_init_array+0x1e>
 80029b4:	08002a2c 	.word	0x08002a2c
 80029b8:	08002a2c 	.word	0x08002a2c
 80029bc:	08002a2c 	.word	0x08002a2c
 80029c0:	08002a30 	.word	0x08002a30

080029c4 <memset>:
 80029c4:	4402      	add	r2, r0
 80029c6:	4603      	mov	r3, r0
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d100      	bne.n	80029ce <memset+0xa>
 80029cc:	4770      	bx	lr
 80029ce:	f803 1b01 	strb.w	r1, [r3], #1
 80029d2:	e7f9      	b.n	80029c8 <memset+0x4>

080029d4 <_init>:
 80029d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d6:	bf00      	nop
 80029d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029da:	bc08      	pop	{r3}
 80029dc:	469e      	mov	lr, r3
 80029de:	4770      	bx	lr

080029e0 <_fini>:
 80029e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029e2:	bf00      	nop
 80029e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029e6:	bc08      	pop	{r3}
 80029e8:	469e      	mov	lr, r3
 80029ea:	4770      	bx	lr
