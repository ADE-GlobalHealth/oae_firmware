
LED_NucleoFlash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028b8  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08002a44  08002a44  00012a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c84  08002c84  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c84  08002c84  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c84  08002c84  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c84  08002c84  00012c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c88  08002c88  00012c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  08002c98  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08002c98  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbf7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f26  00000000  00000000  0002cc33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  0002eb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  0002f828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f09a  00000000  00000000  000303f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9aa  00000000  00000000  0004f492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c21cb  00000000  00000000  0005ce3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f007  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034c4  00000000  00000000  0011f058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002a2c 	.word	0x08002a2c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002a2c 	.word	0x08002a2c

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fa91 	bl	80006f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f80d 	bl	80001f2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f8fa 	bl	80003d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80001dc:	f000 f8da 	bl	8000394 <MX_DMA_Init>
  MX_DAC1_Init();
 80001e0:	f000 f858 	bl	8000294 <MX_DAC1_Init>
  MX_TIM2_Init();
 80001e4:	f000 f888 	bl	80002f8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //Looking for something? Check app\app_main.c
  //Check https://www.e-tinkers.com/2022/04/a-better-way-to-setup-stm32cubeide/ for the setup

  app_setup();
 80001e8:	f002 fbaa 	bl	8002940 <app_setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    app_loop();
 80001ec:	f002 fbce 	bl	800298c <app_loop>
 80001f0:	e7fc      	b.n	80001ec <main+0x20>

080001f2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f2:	b580      	push	{r7, lr}
 80001f4:	b096      	sub	sp, #88	; 0x58
 80001f6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f8:	f107 0314 	add.w	r3, r7, #20
 80001fc:	2244      	movs	r2, #68	; 0x44
 80001fe:	2100      	movs	r1, #0
 8000200:	4618      	mov	r0, r3
 8000202:	f002 fc0b 	bl	8002a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000206:	463b      	mov	r3, r7
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]
 8000210:	60da      	str	r2, [r3, #12]
 8000212:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000214:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000218:	f001 fa6a 	bl	80016f0 <HAL_PWREx_ControlVoltageScaling>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000222:	f000 f943 	bl	80004ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000226:	2302      	movs	r3, #2
 8000228:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800022e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000230:	2310      	movs	r3, #16
 8000232:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000234:	2302      	movs	r3, #2
 8000236:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000238:	2302      	movs	r3, #2
 800023a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800023c:	2301      	movs	r3, #1
 800023e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000240:	2314      	movs	r3, #20
 8000242:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000244:	2307      	movs	r3, #7
 8000246:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000248:	2302      	movs	r3, #2
 800024a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 800024c:	2306      	movs	r3, #6
 800024e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000250:	f107 0314 	add.w	r3, r7, #20
 8000254:	4618      	mov	r0, r3
 8000256:	f001 faa1 	bl	800179c <HAL_RCC_OscConfig>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000260:	f000 f924 	bl	80004ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000264:	230f      	movs	r3, #15
 8000266:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000268:	2303      	movs	r3, #3
 800026a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000278:	463b      	mov	r3, r7
 800027a:	2103      	movs	r1, #3
 800027c:	4618      	mov	r0, r3
 800027e:	f001 fea1 	bl	8001fc4 <HAL_RCC_ClockConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000288:	f000 f910 	bl	80004ac <Error_Handler>
  }
}
 800028c:	bf00      	nop
 800028e:	3758      	adds	r7, #88	; 0x58
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}

08000294 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b08a      	sub	sp, #40	; 0x28
 8000298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	2224      	movs	r2, #36	; 0x24
 800029e:	2100      	movs	r1, #0
 80002a0:	4618      	mov	r0, r3
 80002a2:	f002 fbbb 	bl	8002a1c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80002a6:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <MX_DAC1_Init+0x5c>)
 80002a8:	4a12      	ldr	r2, [pc, #72]	; (80002f4 <MX_DAC1_Init+0x60>)
 80002aa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80002ac:	4810      	ldr	r0, [pc, #64]	; (80002f0 <MX_DAC1_Init+0x5c>)
 80002ae:	f000 fbcc 	bl	8000a4a <HAL_DAC_Init>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80002b8:	f000 f8f8 	bl	80004ac <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80002bc:	2300      	movs	r3, #0
 80002be:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80002c0:	2324      	movs	r3, #36	; 0x24
 80002c2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80002c4:	2300      	movs	r3, #0
 80002c6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80002c8:	2300      	movs	r3, #0
 80002ca:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80002cc:	2300      	movs	r3, #0
 80002ce:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2200      	movs	r2, #0
 80002d4:	4619      	mov	r1, r3
 80002d6:	4806      	ldr	r0, [pc, #24]	; (80002f0 <MX_DAC1_Init+0x5c>)
 80002d8:	f000 fcc4 	bl	8000c64 <HAL_DAC_ConfigChannel>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80002e2:	f000 f8e3 	bl	80004ac <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80002e6:	bf00      	nop
 80002e8:	3728      	adds	r7, #40	; 0x28
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	20000028 	.word	0x20000028
 80002f4:	40007400 	.word	0x40007400

080002f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b088      	sub	sp, #32
 80002fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002fe:	f107 0310 	add.w	r3, r7, #16
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000316:	4b1e      	ldr	r3, [pc, #120]	; (8000390 <MX_TIM2_Init+0x98>)
 8000318:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800031c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800031e:	4b1c      	ldr	r3, [pc, #112]	; (8000390 <MX_TIM2_Init+0x98>)
 8000320:	2200      	movs	r2, #0
 8000322:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000324:	4b1a      	ldr	r3, [pc, #104]	; (8000390 <MX_TIM2_Init+0x98>)
 8000326:	2200      	movs	r2, #0
 8000328:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 624;
 800032a:	4b19      	ldr	r3, [pc, #100]	; (8000390 <MX_TIM2_Init+0x98>)
 800032c:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000330:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000332:	4b17      	ldr	r3, [pc, #92]	; (8000390 <MX_TIM2_Init+0x98>)
 8000334:	2200      	movs	r2, #0
 8000336:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000338:	4b15      	ldr	r3, [pc, #84]	; (8000390 <MX_TIM2_Init+0x98>)
 800033a:	2200      	movs	r2, #0
 800033c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800033e:	4814      	ldr	r0, [pc, #80]	; (8000390 <MX_TIM2_Init+0x98>)
 8000340:	f002 f82c 	bl	800239c <HAL_TIM_Base_Init>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800034a:	f000 f8af 	bl	80004ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800034e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000352:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000354:	f107 0310 	add.w	r3, r7, #16
 8000358:	4619      	mov	r1, r3
 800035a:	480d      	ldr	r0, [pc, #52]	; (8000390 <MX_TIM2_Init+0x98>)
 800035c:	f002 f8c2 	bl	80024e4 <HAL_TIM_ConfigClockSource>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000366:	f000 f8a1 	bl	80004ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800036a:	2320      	movs	r3, #32
 800036c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800036e:	2300      	movs	r3, #0
 8000370:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	4619      	mov	r1, r3
 8000376:	4806      	ldr	r0, [pc, #24]	; (8000390 <MX_TIM2_Init+0x98>)
 8000378:	f002 fa7c 	bl	8002874 <HAL_TIMEx_MasterConfigSynchronization>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000382:	f000 f893 	bl	80004ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000386:	bf00      	nop
 8000388:	3720      	adds	r7, #32
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	20000084 	.word	0x20000084

08000394 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800039a:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <MX_DMA_Init+0x38>)
 800039c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800039e:	4a0b      	ldr	r2, [pc, #44]	; (80003cc <MX_DMA_Init+0x38>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	6493      	str	r3, [r2, #72]	; 0x48
 80003a6:	4b09      	ldr	r3, [pc, #36]	; (80003cc <MX_DMA_Init+0x38>)
 80003a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80003aa:	f003 0301 	and.w	r3, r3, #1
 80003ae:	607b      	str	r3, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2100      	movs	r1, #0
 80003b6:	200d      	movs	r0, #13
 80003b8:	f000 fb11 	bl	80009de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80003bc:	200d      	movs	r0, #13
 80003be:	f000 fb2a 	bl	8000a16 <HAL_NVIC_EnableIRQ>

}
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40021000 	.word	0x40021000

080003d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b088      	sub	sp, #32
 80003d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d6:	f107 030c 	add.w	r3, r7, #12
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
 80003e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e6:	4b2f      	ldr	r3, [pc, #188]	; (80004a4 <MX_GPIO_Init+0xd4>)
 80003e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ea:	4a2e      	ldr	r2, [pc, #184]	; (80004a4 <MX_GPIO_Init+0xd4>)
 80003ec:	f043 0304 	orr.w	r3, r3, #4
 80003f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f2:	4b2c      	ldr	r3, [pc, #176]	; (80004a4 <MX_GPIO_Init+0xd4>)
 80003f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f6:	f003 0304 	and.w	r3, r3, #4
 80003fa:	60bb      	str	r3, [r7, #8]
 80003fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fe:	4b29      	ldr	r3, [pc, #164]	; (80004a4 <MX_GPIO_Init+0xd4>)
 8000400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000402:	4a28      	ldr	r2, [pc, #160]	; (80004a4 <MX_GPIO_Init+0xd4>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800040a:	4b26      	ldr	r3, [pc, #152]	; (80004a4 <MX_GPIO_Init+0xd4>)
 800040c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	607b      	str	r3, [r7, #4]
 8000414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000416:	4b23      	ldr	r3, [pc, #140]	; (80004a4 <MX_GPIO_Init+0xd4>)
 8000418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041a:	4a22      	ldr	r2, [pc, #136]	; (80004a4 <MX_GPIO_Init+0xd4>)
 800041c:	f043 0302 	orr.w	r3, r3, #2
 8000420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000422:	4b20      	ldr	r3, [pc, #128]	; (80004a4 <MX_GPIO_Init+0xd4>)
 8000424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000426:	f003 0302 	and.w	r3, r3, #2
 800042a:	603b      	str	r3, [r7, #0]
 800042c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	2108      	movs	r1, #8
 8000432:	481d      	ldr	r0, [pc, #116]	; (80004a8 <MX_GPIO_Init+0xd8>)
 8000434:	f001 f91c 	bl	8001670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000438:	2304      	movs	r3, #4
 800043a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800043c:	2302      	movs	r3, #2
 800043e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000440:	2300      	movs	r3, #0
 8000442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000444:	2303      	movs	r3, #3
 8000446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000448:	2307      	movs	r3, #7
 800044a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800044c:	f107 030c 	add.w	r3, r7, #12
 8000450:	4619      	mov	r1, r3
 8000452:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000456:	f000 ffa1 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 800045a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800045e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000460:	2302      	movs	r3, #2
 8000462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000468:	2303      	movs	r3, #3
 800046a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800046c:	2303      	movs	r3, #3
 800046e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000470:	f107 030c 	add.w	r3, r7, #12
 8000474:	4619      	mov	r1, r3
 8000476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800047a:	f000 ff8f 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800047e:	2308      	movs	r3, #8
 8000480:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000482:	2301      	movs	r3, #1
 8000484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048a:	2300      	movs	r3, #0
 800048c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800048e:	f107 030c 	add.w	r3, r7, #12
 8000492:	4619      	mov	r1, r3
 8000494:	4804      	ldr	r0, [pc, #16]	; (80004a8 <MX_GPIO_Init+0xd8>)
 8000496:	f000 ff81 	bl	800139c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800049a:	bf00      	nop
 800049c:	3720      	adds	r7, #32
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40021000 	.word	0x40021000
 80004a8:	48000400 	.word	0x48000400

080004ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b0:	b672      	cpsid	i
}
 80004b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <Error_Handler+0x8>
	...

080004b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004be:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <HAL_MspInit+0x44>)
 80004c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004c2:	4a0e      	ldr	r2, [pc, #56]	; (80004fc <HAL_MspInit+0x44>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	6613      	str	r3, [r2, #96]	; 0x60
 80004ca:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <HAL_MspInit+0x44>)
 80004cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d6:	4b09      	ldr	r3, [pc, #36]	; (80004fc <HAL_MspInit+0x44>)
 80004d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004da:	4a08      	ldr	r2, [pc, #32]	; (80004fc <HAL_MspInit+0x44>)
 80004dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004e0:	6593      	str	r3, [r2, #88]	; 0x58
 80004e2:	4b06      	ldr	r3, [pc, #24]	; (80004fc <HAL_MspInit+0x44>)
 80004e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ea:	603b      	str	r3, [r7, #0]
 80004ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000

08000500 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	; 0x28
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000508:	f107 0314 	add.w	r3, r7, #20
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a2b      	ldr	r2, [pc, #172]	; (80005cc <HAL_DAC_MspInit+0xcc>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d150      	bne.n	80005c4 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000522:	4b2b      	ldr	r3, [pc, #172]	; (80005d0 <HAL_DAC_MspInit+0xd0>)
 8000524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000526:	4a2a      	ldr	r2, [pc, #168]	; (80005d0 <HAL_DAC_MspInit+0xd0>)
 8000528:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800052c:	6593      	str	r3, [r2, #88]	; 0x58
 800052e:	4b28      	ldr	r3, [pc, #160]	; (80005d0 <HAL_DAC_MspInit+0xd0>)
 8000530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000532:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	4b25      	ldr	r3, [pc, #148]	; (80005d0 <HAL_DAC_MspInit+0xd0>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	4a24      	ldr	r2, [pc, #144]	; (80005d0 <HAL_DAC_MspInit+0xd0>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000546:	4b22      	ldr	r3, [pc, #136]	; (80005d0 <HAL_DAC_MspInit+0xd0>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000552:	2310      	movs	r3, #16
 8000554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000556:	2303      	movs	r3, #3
 8000558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	2300      	movs	r3, #0
 800055c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	4619      	mov	r1, r3
 8000564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000568:	f000 ff18 	bl	800139c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 800056c:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <HAL_DAC_MspInit+0xd4>)
 800056e:	4a1a      	ldr	r2, [pc, #104]	; (80005d8 <HAL_DAC_MspInit+0xd8>)
 8000570:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8000572:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <HAL_DAC_MspInit+0xd4>)
 8000574:	2206      	movs	r2, #6
 8000576:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <HAL_DAC_MspInit+0xd4>)
 800057a:	2210      	movs	r2, #16
 800057c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800057e:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <HAL_DAC_MspInit+0xd4>)
 8000580:	2200      	movs	r2, #0
 8000582:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000584:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <HAL_DAC_MspInit+0xd4>)
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800058a:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <HAL_DAC_MspInit+0xd4>)
 800058c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000590:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000592:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <HAL_DAC_MspInit+0xd4>)
 8000594:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000598:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <HAL_DAC_MspInit+0xd4>)
 800059c:	2220      	movs	r2, #32
 800059e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <HAL_DAC_MspInit+0xd4>)
 80005a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80005a8:	480a      	ldr	r0, [pc, #40]	; (80005d4 <HAL_DAC_MspInit+0xd4>)
 80005aa:	f000 fcff 	bl	8000fac <HAL_DMA_Init>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 80005b4:	f7ff ff7a 	bl	80004ac <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4a06      	ldr	r2, [pc, #24]	; (80005d4 <HAL_DAC_MspInit+0xd4>)
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	4a05      	ldr	r2, [pc, #20]	; (80005d4 <HAL_DAC_MspInit+0xd4>)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80005c4:	bf00      	nop
 80005c6:	3728      	adds	r7, #40	; 0x28
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40007400 	.word	0x40007400
 80005d0:	40021000 	.word	0x40021000
 80005d4:	2000003c 	.word	0x2000003c
 80005d8:	40020030 	.word	0x40020030

080005dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005ec:	d10b      	bne.n	8000606 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <HAL_TIM_Base_MspInit+0x38>)
 80005f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005f2:	4a08      	ldr	r2, [pc, #32]	; (8000614 <HAL_TIM_Base_MspInit+0x38>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6593      	str	r3, [r2, #88]	; 0x58
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <HAL_TIM_Base_MspInit+0x38>)
 80005fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000

08000618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800061c:	e7fe      	b.n	800061c <NMI_Handler+0x4>

0800061e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000622:	e7fe      	b.n	8000622 <HardFault_Handler+0x4>

08000624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <MemManage_Handler+0x4>

0800062a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800062e:	e7fe      	b.n	800062e <BusFault_Handler+0x4>

08000630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <UsageFault_Handler+0x4>

08000636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000664:	f000 f89c 	bl	80007a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}

0800066c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000670:	4802      	ldr	r0, [pc, #8]	; (800067c <DMA1_Channel3_IRQHandler+0x10>)
 8000672:	f000 fdb3 	bl	80011dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	2000003c 	.word	0x2000003c

08000680 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <SystemInit+0x20>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068a:	4a05      	ldr	r2, [pc, #20]	; (80006a0 <SystemInit+0x20>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006a8:	f7ff ffea 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006ac:	480c      	ldr	r0, [pc, #48]	; (80006e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ae:	490d      	ldr	r1, [pc, #52]	; (80006e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b0:	4a0d      	ldr	r2, [pc, #52]	; (80006e8 <LoopForever+0xe>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b4:	e002      	b.n	80006bc <LoopCopyDataInit>

080006b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ba:	3304      	adds	r3, #4

080006bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c0:	d3f9      	bcc.n	80006b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006c2:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c4:	4c0a      	ldr	r4, [pc, #40]	; (80006f0 <LoopForever+0x16>)
  movs r3, #0
 80006c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c8:	e001      	b.n	80006ce <LoopFillZerobss>

080006ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006cc:	3204      	adds	r2, #4

080006ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d0:	d3fb      	bcc.n	80006ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006d2:	f002 f971 	bl	80029b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006d6:	f7ff fd79 	bl	80001cc <main>

080006da <LoopForever>:

LoopForever:
    b LoopForever
 80006da:	e7fe      	b.n	80006da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006dc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006e8:	08002c8c 	.word	0x08002c8c
  ldr r2, =_sbss
 80006ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006f0:	200000d4 	.word	0x200000d4

080006f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006f4:	e7fe      	b.n	80006f4 <ADC1_IRQHandler>

080006f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b082      	sub	sp, #8
 80006fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006fc:	2300      	movs	r3, #0
 80006fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000700:	2003      	movs	r0, #3
 8000702:	f000 f961 	bl	80009c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000706:	2000      	movs	r0, #0
 8000708:	f000 f80e 	bl	8000728 <HAL_InitTick>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d002      	beq.n	8000718 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000712:	2301      	movs	r3, #1
 8000714:	71fb      	strb	r3, [r7, #7]
 8000716:	e001      	b.n	800071c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000718:	f7ff fece 	bl	80004b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800071c:	79fb      	ldrb	r3, [r7, #7]
}
 800071e:	4618      	mov	r0, r3
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000730:	2300      	movs	r3, #0
 8000732:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <HAL_InitTick+0x6c>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d023      	beq.n	8000784 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800073c:	4b16      	ldr	r3, [pc, #88]	; (8000798 <HAL_InitTick+0x70>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <HAL_InitTick+0x6c>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4619      	mov	r1, r3
 8000746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074a:	fbb3 f3f1 	udiv	r3, r3, r1
 800074e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f96d 	bl	8000a32 <HAL_SYSTICK_Config>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d10f      	bne.n	800077e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2b0f      	cmp	r3, #15
 8000762:	d809      	bhi.n	8000778 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000764:	2200      	movs	r2, #0
 8000766:	6879      	ldr	r1, [r7, #4]
 8000768:	f04f 30ff 	mov.w	r0, #4294967295
 800076c:	f000 f937 	bl	80009de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000770:	4a0a      	ldr	r2, [pc, #40]	; (800079c <HAL_InitTick+0x74>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6013      	str	r3, [r2, #0]
 8000776:	e007      	b.n	8000788 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000778:	2301      	movs	r3, #1
 800077a:	73fb      	strb	r3, [r7, #15]
 800077c:	e004      	b.n	8000788 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	73fb      	strb	r3, [r7, #15]
 8000782:	e001      	b.n	8000788 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000784:	2301      	movs	r3, #1
 8000786:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000788:	7bfb      	ldrb	r3, [r7, #15]
}
 800078a:	4618      	mov	r0, r3
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000008 	.word	0x20000008
 8000798:	20000000 	.word	0x20000000
 800079c:	20000004 	.word	0x20000004

080007a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_IncTick+0x20>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_IncTick+0x24>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4413      	add	r3, r2
 80007b0:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <HAL_IncTick+0x24>)
 80007b2:	6013      	str	r3, [r2, #0]
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	20000008 	.word	0x20000008
 80007c4:	200000d0 	.word	0x200000d0

080007c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  return uwTick;
 80007cc:	4b03      	ldr	r3, [pc, #12]	; (80007dc <HAL_GetTick+0x14>)
 80007ce:	681b      	ldr	r3, [r3, #0]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	200000d0 	.word	0x200000d0

080007e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007e8:	f7ff ffee 	bl	80007c8 <HAL_GetTick>
 80007ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007f8:	d005      	beq.n	8000806 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <HAL_Delay+0x44>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	4413      	add	r3, r2
 8000804:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000806:	bf00      	nop
 8000808:	f7ff ffde 	bl	80007c8 <HAL_GetTick>
 800080c:	4602      	mov	r2, r0
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	429a      	cmp	r2, r3
 8000816:	d8f7      	bhi.n	8000808 <HAL_Delay+0x28>
  {
  }
}
 8000818:	bf00      	nop
 800081a:	bf00      	nop
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000008 	.word	0x20000008

08000828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083e:	68ba      	ldr	r2, [r7, #8]
 8000840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000844:	4013      	ands	r3, r2
 8000846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800085a:	4a04      	ldr	r2, [pc, #16]	; (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	60d3      	str	r3, [r2, #12]
}
 8000860:	bf00      	nop
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <__NVIC_GetPriorityGrouping+0x18>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	0a1b      	lsrs	r3, r3, #8
 800087a:	f003 0307 	and.w	r3, r3, #7
}
 800087e:	4618      	mov	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089a:	2b00      	cmp	r3, #0
 800089c:	db0b      	blt.n	80008b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	f003 021f 	and.w	r2, r3, #31
 80008a4:	4907      	ldr	r1, [pc, #28]	; (80008c4 <__NVIC_EnableIRQ+0x38>)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	095b      	lsrs	r3, r3, #5
 80008ac:	2001      	movs	r0, #1
 80008ae:	fa00 f202 	lsl.w	r2, r0, r2
 80008b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000e100 	.word	0xe000e100

080008c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	6039      	str	r1, [r7, #0]
 80008d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	db0a      	blt.n	80008f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	490c      	ldr	r1, [pc, #48]	; (8000914 <__NVIC_SetPriority+0x4c>)
 80008e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e6:	0112      	lsls	r2, r2, #4
 80008e8:	b2d2      	uxtb	r2, r2
 80008ea:	440b      	add	r3, r1
 80008ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f0:	e00a      	b.n	8000908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4908      	ldr	r1, [pc, #32]	; (8000918 <__NVIC_SetPriority+0x50>)
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	f003 030f 	and.w	r3, r3, #15
 80008fe:	3b04      	subs	r3, #4
 8000900:	0112      	lsls	r2, r2, #4
 8000902:	b2d2      	uxtb	r2, r2
 8000904:	440b      	add	r3, r1
 8000906:	761a      	strb	r2, [r3, #24]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000e100 	.word	0xe000e100
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800091c:	b480      	push	{r7}
 800091e:	b089      	sub	sp, #36	; 0x24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	f1c3 0307 	rsb	r3, r3, #7
 8000936:	2b04      	cmp	r3, #4
 8000938:	bf28      	it	cs
 800093a:	2304      	movcs	r3, #4
 800093c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3304      	adds	r3, #4
 8000942:	2b06      	cmp	r3, #6
 8000944:	d902      	bls.n	800094c <NVIC_EncodePriority+0x30>
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	3b03      	subs	r3, #3
 800094a:	e000      	b.n	800094e <NVIC_EncodePriority+0x32>
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000950:	f04f 32ff 	mov.w	r2, #4294967295
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43da      	mvns	r2, r3
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	401a      	ands	r2, r3
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000964:	f04f 31ff 	mov.w	r1, #4294967295
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	fa01 f303 	lsl.w	r3, r1, r3
 800096e:	43d9      	mvns	r1, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000974:	4313      	orrs	r3, r2
         );
}
 8000976:	4618      	mov	r0, r3
 8000978:	3724      	adds	r7, #36	; 0x24
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
	...

08000984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3b01      	subs	r3, #1
 8000990:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000994:	d301      	bcc.n	800099a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000996:	2301      	movs	r3, #1
 8000998:	e00f      	b.n	80009ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800099a:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <SysTick_Config+0x40>)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3b01      	subs	r3, #1
 80009a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009a2:	210f      	movs	r1, #15
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	f7ff ff8e 	bl	80008c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <SysTick_Config+0x40>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009b2:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <SysTick_Config+0x40>)
 80009b4:	2207      	movs	r2, #7
 80009b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	e000e010 	.word	0xe000e010

080009c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff ff29 	bl	8000828 <__NVIC_SetPriorityGrouping>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b086      	sub	sp, #24
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4603      	mov	r3, r0
 80009e6:	60b9      	str	r1, [r7, #8]
 80009e8:	607a      	str	r2, [r7, #4]
 80009ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009f0:	f7ff ff3e 	bl	8000870 <__NVIC_GetPriorityGrouping>
 80009f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	68b9      	ldr	r1, [r7, #8]
 80009fa:	6978      	ldr	r0, [r7, #20]
 80009fc:	f7ff ff8e 	bl	800091c <NVIC_EncodePriority>
 8000a00:	4602      	mov	r2, r0
 8000a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a06:	4611      	mov	r1, r2
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ff5d 	bl	80008c8 <__NVIC_SetPriority>
}
 8000a0e:	bf00      	nop
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b082      	sub	sp, #8
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ff31 	bl	800088c <__NVIC_EnableIRQ>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b082      	sub	sp, #8
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff ffa2 	bl	8000984 <SysTick_Config>
 8000a40:	4603      	mov	r3, r0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d101      	bne.n	8000a5c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e014      	b.n	8000a86 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	791b      	ldrb	r3, [r3, #4]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d105      	bne.n	8000a72 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f7ff fd47 	bl	8000500 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2202      	movs	r2, #2
 8000a76:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2201      	movs	r2, #1
 8000a82:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	795b      	ldrb	r3, [r3, #5]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d101      	bne.n	8000aae <HAL_DAC_Start_DMA+0x1e>
 8000aaa:	2302      	movs	r3, #2
 8000aac:	e0ab      	b.n	8000c06 <HAL_DAC_Start_DMA+0x176>
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d12f      	bne.n	8000b20 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	4a52      	ldr	r2, [pc, #328]	; (8000c10 <HAL_DAC_Start_DMA+0x180>)
 8000ac6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	4a51      	ldr	r2, [pc, #324]	; (8000c14 <HAL_DAC_Start_DMA+0x184>)
 8000ace:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	4a50      	ldr	r2, [pc, #320]	; (8000c18 <HAL_DAC_Start_DMA+0x188>)
 8000ad6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ae6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000ae8:	6a3b      	ldr	r3, [r7, #32]
 8000aea:	2b08      	cmp	r3, #8
 8000aec:	d013      	beq.n	8000b16 <HAL_DAC_Start_DMA+0x86>
 8000aee:	6a3b      	ldr	r3, [r7, #32]
 8000af0:	2b08      	cmp	r3, #8
 8000af2:	d845      	bhi.n	8000b80 <HAL_DAC_Start_DMA+0xf0>
 8000af4:	6a3b      	ldr	r3, [r7, #32]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d003      	beq.n	8000b02 <HAL_DAC_Start_DMA+0x72>
 8000afa:	6a3b      	ldr	r3, [r7, #32]
 8000afc:	2b04      	cmp	r3, #4
 8000afe:	d005      	beq.n	8000b0c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000b00:	e03e      	b.n	8000b80 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	3308      	adds	r3, #8
 8000b08:	613b      	str	r3, [r7, #16]
        break;
 8000b0a:	e03c      	b.n	8000b86 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	330c      	adds	r3, #12
 8000b12:	613b      	str	r3, [r7, #16]
        break;
 8000b14:	e037      	b.n	8000b86 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	3310      	adds	r3, #16
 8000b1c:	613b      	str	r3, [r7, #16]
        break;
 8000b1e:	e032      	b.n	8000b86 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	4a3d      	ldr	r2, [pc, #244]	; (8000c1c <HAL_DAC_Start_DMA+0x18c>)
 8000b26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	4a3c      	ldr	r2, [pc, #240]	; (8000c20 <HAL_DAC_Start_DMA+0x190>)
 8000b2e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	4a3b      	ldr	r2, [pc, #236]	; (8000c24 <HAL_DAC_Start_DMA+0x194>)
 8000b36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b46:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000b48:	6a3b      	ldr	r3, [r7, #32]
 8000b4a:	2b08      	cmp	r3, #8
 8000b4c:	d013      	beq.n	8000b76 <HAL_DAC_Start_DMA+0xe6>
 8000b4e:	6a3b      	ldr	r3, [r7, #32]
 8000b50:	2b08      	cmp	r3, #8
 8000b52:	d817      	bhi.n	8000b84 <HAL_DAC_Start_DMA+0xf4>
 8000b54:	6a3b      	ldr	r3, [r7, #32]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <HAL_DAC_Start_DMA+0xd2>
 8000b5a:	6a3b      	ldr	r3, [r7, #32]
 8000b5c:	2b04      	cmp	r3, #4
 8000b5e:	d005      	beq.n	8000b6c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000b60:	e010      	b.n	8000b84 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	3314      	adds	r3, #20
 8000b68:	613b      	str	r3, [r7, #16]
        break;
 8000b6a:	e00c      	b.n	8000b86 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	3318      	adds	r3, #24
 8000b72:	613b      	str	r3, [r7, #16]
        break;
 8000b74:	e007      	b.n	8000b86 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	331c      	adds	r3, #28
 8000b7c:	613b      	str	r3, [r7, #16]
        break;
 8000b7e:	e002      	b.n	8000b86 <HAL_DAC_Start_DMA+0xf6>
        break;
 8000b80:	bf00      	nop
 8000b82:	e000      	b.n	8000b86 <HAL_DAC_Start_DMA+0xf6>
        break;
 8000b84:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d111      	bne.n	8000bb0 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000b9a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	6898      	ldr	r0, [r3, #8]
 8000ba0:	6879      	ldr	r1, [r7, #4]
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	f000 fab9 	bl	800111c <HAL_DMA_Start_IT>
 8000baa:	4603      	mov	r3, r0
 8000bac:	75fb      	strb	r3, [r7, #23]
 8000bae:	e010      	b.n	8000bd2 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000bbe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	68d8      	ldr	r0, [r3, #12]
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	f000 faa7 	bl	800111c <HAL_DMA_Start_IT>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8000bd8:	7dfb      	ldrb	r3, [r7, #23]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d10c      	bne.n	8000bf8 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	6819      	ldr	r1, [r3, #0]
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	f003 0310 	and.w	r3, r3, #16
 8000bea:	2201      	movs	r2, #1
 8000bec:	409a      	lsls	r2, r3
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	e005      	b.n	8000c04 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	691b      	ldr	r3, [r3, #16]
 8000bfc:	f043 0204 	orr.w	r2, r3, #4
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	08000e99 	.word	0x08000e99
 8000c14:	08000ebb 	.word	0x08000ebb
 8000c18:	08000ed7 	.word	0x08000ed7
 8000c1c:	08000f41 	.word	0x08000f41
 8000c20:	08000f63 	.word	0x08000f63
 8000c24:	08000f7f 	.word	0x08000f7f

08000c28 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	795b      	ldrb	r3, [r3, #5]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d101      	bne.n	8000c80 <HAL_DAC_ConfigChannel+0x1c>
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	e107      	b.n	8000e90 <HAL_DAC_ConfigChannel+0x22c>
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2201      	movs	r2, #1
 8000c84:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	2202      	movs	r2, #2
 8000c8a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b04      	cmp	r3, #4
 8000c92:	d174      	bne.n	8000d7e <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000c94:	f7ff fd98 	bl	80007c8 <HAL_GetTick>
 8000c98:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d134      	bne.n	8000d0a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000ca0:	e011      	b.n	8000cc6 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000ca2:	f7ff fd91 	bl	80007c8 <HAL_GetTick>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d90a      	bls.n	8000cc6 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	691b      	ldr	r3, [r3, #16]
 8000cb4:	f043 0208 	orr.w	r2, r3, #8
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	e0e4      	b.n	8000e90 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ccc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d1e6      	bne.n	8000ca2 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f7ff fd83 	bl	80007e0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	6992      	ldr	r2, [r2, #24]
 8000ce2:	641a      	str	r2, [r3, #64]	; 0x40
 8000ce4:	e01e      	b.n	8000d24 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000ce6:	f7ff fd6f 	bl	80007c8 <HAL_GetTick>
 8000cea:	4602      	mov	r2, r0
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d90a      	bls.n	8000d0a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	691b      	ldr	r3, [r3, #16]
 8000cf8:	f043 0208 	orr.w	r2, r3, #8
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2203      	movs	r2, #3
 8000d04:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000d06:	2303      	movs	r3, #3
 8000d08:	e0c2      	b.n	8000e90 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	dbe8      	blt.n	8000ce6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000d14:	2001      	movs	r0, #1
 8000d16:	f7ff fd63 	bl	80007e0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	6992      	ldr	r2, [r2, #24]
 8000d22:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f003 0310 	and.w	r3, r3, #16
 8000d30:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000d34:	fa01 f303 	lsl.w	r3, r1, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	ea02 0103 	and.w	r1, r2, r3
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	69da      	ldr	r2, [r3, #28]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f003 0310 	and.w	r3, r3, #16
 8000d48:	409a      	lsls	r2, r3
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f003 0310 	and.w	r3, r3, #16
 8000d5e:	21ff      	movs	r1, #255	; 0xff
 8000d60:	fa01 f303 	lsl.w	r3, r1, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	ea02 0103 	and.w	r1, r2, r3
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	6a1a      	ldr	r2, [r3, #32]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f003 0310 	and.w	r3, r3, #16
 8000d74:	409a      	lsls	r2, r3
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	691b      	ldr	r3, [r3, #16]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d11d      	bne.n	8000dc2 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d8c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f003 0310 	and.w	r3, r3, #16
 8000d94:	221f      	movs	r2, #31
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0310 	and.w	r3, r3, #16
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dc8:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f003 0310 	and.w	r3, r3, #16
 8000dd0:	2207      	movs	r2, #7
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	431a      	orrs	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f003 0310 	and.w	r3, r3, #16
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	6819      	ldr	r1, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f003 0310 	and.w	r3, r3, #16
 8000e16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	400a      	ands	r2, r1
 8000e26:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f003 0310 	and.w	r3, r3, #16
 8000e36:	f640 72fc 	movw	r2, #4092	; 0xffc
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4013      	ands	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f003 0310 	and.w	r3, r3, #16
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	6819      	ldr	r1, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f003 0310 	and.w	r3, r3, #16
 8000e72:	22c0      	movs	r2, #192	; 0xc0
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43da      	mvns	r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	400a      	ands	r2, r1
 8000e80:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2201      	movs	r2, #1
 8000e86:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3720      	adds	r7, #32
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8000ea6:	68f8      	ldr	r0, [r7, #12]
 8000ea8:	f7ff febe 	bl	8000c28 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	711a      	strb	r2, [r3, #4]
}
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b084      	sub	sp, #16
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8000ec8:	68f8      	ldr	r0, [r7, #12]
 8000eca:	f7ff feb7 	bl	8000c3c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b084      	sub	sp, #16
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	691b      	ldr	r3, [r3, #16]
 8000ee8:	f043 0204 	orr.w	r2, r3, #4
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8000ef0:	68f8      	ldr	r0, [r7, #12]
 8000ef2:	f7ff fead 	bl	8000c50 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	711a      	strb	r2, [r3, #4]
}
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f4c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f7ff ffd8 	bl	8000f04 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2201      	movs	r2, #1
 8000f58:	711a      	strb	r2, [r3, #4]
}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b084      	sub	sp, #16
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f6e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	f7ff ffd1 	bl	8000f18 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b084      	sub	sp, #16
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	691b      	ldr	r3, [r3, #16]
 8000f90:	f043 0204 	orr.w	r2, r3, #4
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8000f98:	68f8      	ldr	r0, [r7, #12]
 8000f9a:	f7ff ffc7 	bl	8000f2c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	711a      	strb	r2, [r3, #4]
}
 8000fa4:	bf00      	nop
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e098      	b.n	80010f0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b4d      	ldr	r3, [pc, #308]	; (80010fc <HAL_DMA_Init+0x150>)
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d80f      	bhi.n	8000fea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b4b      	ldr	r3, [pc, #300]	; (8001100 <HAL_DMA_Init+0x154>)
 8000fd2:	4413      	add	r3, r2
 8000fd4:	4a4b      	ldr	r2, [pc, #300]	; (8001104 <HAL_DMA_Init+0x158>)
 8000fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fda:	091b      	lsrs	r3, r3, #4
 8000fdc:	009a      	lsls	r2, r3, #2
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a48      	ldr	r2, [pc, #288]	; (8001108 <HAL_DMA_Init+0x15c>)
 8000fe6:	641a      	str	r2, [r3, #64]	; 0x40
 8000fe8:	e00e      	b.n	8001008 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4b46      	ldr	r3, [pc, #280]	; (800110c <HAL_DMA_Init+0x160>)
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a43      	ldr	r2, [pc, #268]	; (8001104 <HAL_DMA_Init+0x158>)
 8000ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffa:	091b      	lsrs	r3, r3, #4
 8000ffc:	009a      	lsls	r2, r3, #2
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a42      	ldr	r2, [pc, #264]	; (8001110 <HAL_DMA_Init+0x164>)
 8001006:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2202      	movs	r2, #2
 800100c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800101e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001022:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800102c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001038:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001044:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a1b      	ldr	r3, [r3, #32]
 800104a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	4313      	orrs	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001062:	d039      	beq.n	80010d8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	4a27      	ldr	r2, [pc, #156]	; (8001108 <HAL_DMA_Init+0x15c>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d11a      	bne.n	80010a4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800106e:	4b29      	ldr	r3, [pc, #164]	; (8001114 <HAL_DMA_Init+0x168>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	f003 031c 	and.w	r3, r3, #28
 800107a:	210f      	movs	r1, #15
 800107c:	fa01 f303 	lsl.w	r3, r1, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	4924      	ldr	r1, [pc, #144]	; (8001114 <HAL_DMA_Init+0x168>)
 8001084:	4013      	ands	r3, r2
 8001086:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001088:	4b22      	ldr	r3, [pc, #136]	; (8001114 <HAL_DMA_Init+0x168>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6859      	ldr	r1, [r3, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001094:	f003 031c 	and.w	r3, r3, #28
 8001098:	fa01 f303 	lsl.w	r3, r1, r3
 800109c:	491d      	ldr	r1, [pc, #116]	; (8001114 <HAL_DMA_Init+0x168>)
 800109e:	4313      	orrs	r3, r2
 80010a0:	600b      	str	r3, [r1, #0]
 80010a2:	e019      	b.n	80010d8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80010a4:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <HAL_DMA_Init+0x16c>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ac:	f003 031c 	and.w	r3, r3, #28
 80010b0:	210f      	movs	r1, #15
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	4917      	ldr	r1, [pc, #92]	; (8001118 <HAL_DMA_Init+0x16c>)
 80010ba:	4013      	ands	r3, r2
 80010bc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <HAL_DMA_Init+0x16c>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6859      	ldr	r1, [r3, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f003 031c 	and.w	r3, r3, #28
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	4911      	ldr	r1, [pc, #68]	; (8001118 <HAL_DMA_Init+0x16c>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2201      	movs	r2, #1
 80010e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	40020407 	.word	0x40020407
 8001100:	bffdfff8 	.word	0xbffdfff8
 8001104:	cccccccd 	.word	0xcccccccd
 8001108:	40020000 	.word	0x40020000
 800110c:	bffdfbf8 	.word	0xbffdfbf8
 8001110:	40020400 	.word	0x40020400
 8001114:	400200a8 	.word	0x400200a8
 8001118:	400204a8 	.word	0x400204a8

0800111c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001134:	2b01      	cmp	r3, #1
 8001136:	d101      	bne.n	800113c <HAL_DMA_Start_IT+0x20>
 8001138:	2302      	movs	r3, #2
 800113a:	e04b      	b.n	80011d4 <HAL_DMA_Start_IT+0xb8>
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2201      	movs	r2, #1
 8001140:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b01      	cmp	r3, #1
 800114e:	d13a      	bne.n	80011c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2202      	movs	r2, #2
 8001154:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2200      	movs	r2, #0
 800115c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 0201 	bic.w	r2, r2, #1
 800116c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	68b9      	ldr	r1, [r7, #8]
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	f000 f8e0 	bl	800133a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	2b00      	cmp	r3, #0
 8001180:	d008      	beq.n	8001194 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f042 020e 	orr.w	r2, r2, #14
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	e00f      	b.n	80011b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 0204 	bic.w	r2, r2, #4
 80011a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f042 020a 	orr.w	r2, r2, #10
 80011b2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f042 0201 	orr.w	r2, r2, #1
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	e005      	b.n	80011d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80011ce:	2302      	movs	r3, #2
 80011d0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80011d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f8:	f003 031c 	and.w	r3, r3, #28
 80011fc:	2204      	movs	r2, #4
 80011fe:	409a      	lsls	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4013      	ands	r3, r2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d026      	beq.n	8001256 <HAL_DMA_IRQHandler+0x7a>
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	2b00      	cmp	r3, #0
 8001210:	d021      	beq.n	8001256 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0320 	and.w	r3, r3, #32
 800121c:	2b00      	cmp	r3, #0
 800121e:	d107      	bne.n	8001230 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 0204 	bic.w	r2, r2, #4
 800122e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001234:	f003 021c 	and.w	r2, r3, #28
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	2104      	movs	r1, #4
 800123e:	fa01 f202 	lsl.w	r2, r1, r2
 8001242:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001248:	2b00      	cmp	r3, #0
 800124a:	d071      	beq.n	8001330 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001254:	e06c      	b.n	8001330 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	f003 031c 	and.w	r3, r3, #28
 800125e:	2202      	movs	r2, #2
 8001260:	409a      	lsls	r2, r3
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4013      	ands	r3, r2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d02e      	beq.n	80012c8 <HAL_DMA_IRQHandler+0xec>
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d029      	beq.n	80012c8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0320 	and.w	r3, r3, #32
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10b      	bne.n	800129a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 020a 	bic.w	r2, r2, #10
 8001290:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f003 021c 	and.w	r2, r3, #28
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	2102      	movs	r1, #2
 80012a8:	fa01 f202 	lsl.w	r2, r1, r2
 80012ac:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d038      	beq.n	8001330 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80012c6:	e033      	b.n	8001330 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012cc:	f003 031c 	and.w	r3, r3, #28
 80012d0:	2208      	movs	r2, #8
 80012d2:	409a      	lsls	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4013      	ands	r3, r2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d02a      	beq.n	8001332 <HAL_DMA_IRQHandler+0x156>
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d025      	beq.n	8001332 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 020e 	bic.w	r2, r2, #14
 80012f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	f003 021c 	and.w	r2, r3, #28
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	2101      	movs	r1, #1
 8001304:	fa01 f202 	lsl.w	r2, r1, r2
 8001308:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001324:	2b00      	cmp	r3, #0
 8001326:	d004      	beq.n	8001332 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001330:	bf00      	nop
 8001332:	bf00      	nop
}
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800133a:	b480      	push	{r7}
 800133c:	b085      	sub	sp, #20
 800133e:	af00      	add	r7, sp, #0
 8001340:	60f8      	str	r0, [r7, #12]
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134c:	f003 021c 	and.w	r2, r3, #28
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	2101      	movs	r1, #1
 8001356:	fa01 f202 	lsl.w	r2, r1, r2
 800135a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	2b10      	cmp	r3, #16
 800136a:	d108      	bne.n	800137e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800137c:	e007      	b.n	800138e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	60da      	str	r2, [r3, #12]
}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800139c:	b480      	push	{r7}
 800139e:	b087      	sub	sp, #28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013aa:	e148      	b.n	800163e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	2101      	movs	r1, #1
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	fa01 f303 	lsl.w	r3, r1, r3
 80013b8:	4013      	ands	r3, r2
 80013ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 813a 	beq.w	8001638 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d005      	beq.n	80013dc <HAL_GPIO_Init+0x40>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d130      	bne.n	800143e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	2203      	movs	r2, #3
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001412:	2201      	movs	r2, #1
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	091b      	lsrs	r3, r3, #4
 8001428:	f003 0201 	and.w	r2, r3, #1
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	2b03      	cmp	r3, #3
 8001448:	d017      	beq.n	800147a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	2203      	movs	r2, #3
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d123      	bne.n	80014ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	08da      	lsrs	r2, r3, #3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3208      	adds	r2, #8
 800148e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001492:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	220f      	movs	r2, #15
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	691a      	ldr	r2, [r3, #16]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f003 0307 	and.w	r3, r3, #7
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	08da      	lsrs	r2, r3, #3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3208      	adds	r2, #8
 80014c8:	6939      	ldr	r1, [r7, #16]
 80014ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	2203      	movs	r2, #3
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 0203 	and.w	r2, r3, #3
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 8094 	beq.w	8001638 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001510:	4b52      	ldr	r3, [pc, #328]	; (800165c <HAL_GPIO_Init+0x2c0>)
 8001512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001514:	4a51      	ldr	r2, [pc, #324]	; (800165c <HAL_GPIO_Init+0x2c0>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6613      	str	r3, [r2, #96]	; 0x60
 800151c:	4b4f      	ldr	r3, [pc, #316]	; (800165c <HAL_GPIO_Init+0x2c0>)
 800151e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001528:	4a4d      	ldr	r2, [pc, #308]	; (8001660 <HAL_GPIO_Init+0x2c4>)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	089b      	lsrs	r3, r3, #2
 800152e:	3302      	adds	r3, #2
 8001530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001534:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	220f      	movs	r2, #15
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001552:	d00d      	beq.n	8001570 <HAL_GPIO_Init+0x1d4>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a43      	ldr	r2, [pc, #268]	; (8001664 <HAL_GPIO_Init+0x2c8>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d007      	beq.n	800156c <HAL_GPIO_Init+0x1d0>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a42      	ldr	r2, [pc, #264]	; (8001668 <HAL_GPIO_Init+0x2cc>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d101      	bne.n	8001568 <HAL_GPIO_Init+0x1cc>
 8001564:	2302      	movs	r3, #2
 8001566:	e004      	b.n	8001572 <HAL_GPIO_Init+0x1d6>
 8001568:	2307      	movs	r3, #7
 800156a:	e002      	b.n	8001572 <HAL_GPIO_Init+0x1d6>
 800156c:	2301      	movs	r3, #1
 800156e:	e000      	b.n	8001572 <HAL_GPIO_Init+0x1d6>
 8001570:	2300      	movs	r3, #0
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	f002 0203 	and.w	r2, r2, #3
 8001578:	0092      	lsls	r2, r2, #2
 800157a:	4093      	lsls	r3, r2
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4313      	orrs	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001582:	4937      	ldr	r1, [pc, #220]	; (8001660 <HAL_GPIO_Init+0x2c4>)
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	089b      	lsrs	r3, r3, #2
 8001588:	3302      	adds	r3, #2
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001590:	4b36      	ldr	r3, [pc, #216]	; (800166c <HAL_GPIO_Init+0x2d0>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	43db      	mvns	r3, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015b4:	4a2d      	ldr	r2, [pc, #180]	; (800166c <HAL_GPIO_Init+0x2d0>)
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015ba:	4b2c      	ldr	r3, [pc, #176]	; (800166c <HAL_GPIO_Init+0x2d0>)
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4013      	ands	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4313      	orrs	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015de:	4a23      	ldr	r2, [pc, #140]	; (800166c <HAL_GPIO_Init+0x2d0>)
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015e4:	4b21      	ldr	r3, [pc, #132]	; (800166c <HAL_GPIO_Init+0x2d0>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001608:	4a18      	ldr	r2, [pc, #96]	; (800166c <HAL_GPIO_Init+0x2d0>)
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800160e:	4b17      	ldr	r3, [pc, #92]	; (800166c <HAL_GPIO_Init+0x2d0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	43db      	mvns	r3, r3
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4013      	ands	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4313      	orrs	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001632:	4a0e      	ldr	r2, [pc, #56]	; (800166c <HAL_GPIO_Init+0x2d0>)
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	3301      	adds	r3, #1
 800163c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	fa22 f303 	lsr.w	r3, r2, r3
 8001648:	2b00      	cmp	r3, #0
 800164a:	f47f aeaf 	bne.w	80013ac <HAL_GPIO_Init+0x10>
  }
}
 800164e:	bf00      	nop
 8001650:	bf00      	nop
 8001652:	371c      	adds	r7, #28
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	40021000 	.word	0x40021000
 8001660:	40010000 	.word	0x40010000
 8001664:	48000400 	.word	0x48000400
 8001668:	48000800 	.word	0x48000800
 800166c:	40010400 	.word	0x40010400

08001670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	807b      	strh	r3, [r7, #2]
 800167c:	4613      	mov	r3, r2
 800167e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001680:	787b      	ldrb	r3, [r7, #1]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001686:	887a      	ldrh	r2, [r7, #2]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800168c:	e002      	b.n	8001694 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800168e:	887a      	ldrh	r2, [r7, #2]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016b2:	887a      	ldrh	r2, [r7, #2]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4013      	ands	r3, r2
 80016b8:	041a      	lsls	r2, r3, #16
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	43d9      	mvns	r1, r3
 80016be:	887b      	ldrh	r3, [r7, #2]
 80016c0:	400b      	ands	r3, r1
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	619a      	str	r2, [r3, #24]
}
 80016c8:	bf00      	nop
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <HAL_PWREx_GetVoltageRange+0x18>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40007000 	.word	0x40007000

080016f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016fe:	d130      	bne.n	8001762 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001700:	4b23      	ldr	r3, [pc, #140]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800170c:	d038      	beq.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800170e:	4b20      	ldr	r3, [pc, #128]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001716:	4a1e      	ldr	r2, [pc, #120]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001718:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800171c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800171e:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2232      	movs	r2, #50	; 0x32
 8001724:	fb02 f303 	mul.w	r3, r2, r3
 8001728:	4a1b      	ldr	r2, [pc, #108]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800172a:	fba2 2303 	umull	r2, r3, r2, r3
 800172e:	0c9b      	lsrs	r3, r3, #18
 8001730:	3301      	adds	r3, #1
 8001732:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001734:	e002      	b.n	800173c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	3b01      	subs	r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800173c:	4b14      	ldr	r3, [pc, #80]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001748:	d102      	bne.n	8001750 <HAL_PWREx_ControlVoltageScaling+0x60>
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1f2      	bne.n	8001736 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001750:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800175c:	d110      	bne.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e00f      	b.n	8001782 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800176a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800176e:	d007      	beq.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001770:	4b07      	ldr	r3, [pc, #28]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001778:	4a05      	ldr	r2, [pc, #20]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800177a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800177e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40007000 	.word	0x40007000
 8001794:	20000000 	.word	0x20000000
 8001798:	431bde83 	.word	0x431bde83

0800179c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d102      	bne.n	80017b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	f000 bc02 	b.w	8001fb4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017b0:	4b96      	ldr	r3, [pc, #600]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 030c 	and.w	r3, r3, #12
 80017b8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017ba:	4b94      	ldr	r3, [pc, #592]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0310 	and.w	r3, r3, #16
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80e4 	beq.w	800199a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d007      	beq.n	80017e8 <HAL_RCC_OscConfig+0x4c>
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	2b0c      	cmp	r3, #12
 80017dc:	f040 808b 	bne.w	80018f6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	f040 8087 	bne.w	80018f6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017e8:	4b88      	ldr	r3, [pc, #544]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <HAL_RCC_OscConfig+0x64>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d101      	bne.n	8001800 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e3d9      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a1a      	ldr	r2, [r3, #32]
 8001804:	4b81      	ldr	r3, [pc, #516]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	2b00      	cmp	r3, #0
 800180e:	d004      	beq.n	800181a <HAL_RCC_OscConfig+0x7e>
 8001810:	4b7e      	ldr	r3, [pc, #504]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001818:	e005      	b.n	8001826 <HAL_RCC_OscConfig+0x8a>
 800181a:	4b7c      	ldr	r3, [pc, #496]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 800181c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001820:	091b      	lsrs	r3, r3, #4
 8001822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001826:	4293      	cmp	r3, r2
 8001828:	d223      	bcs.n	8001872 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	4618      	mov	r0, r3
 8001830:	f000 fd54 	bl	80022dc <RCC_SetFlashLatencyFromMSIRange>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e3ba      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800183e:	4b73      	ldr	r3, [pc, #460]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a72      	ldr	r2, [pc, #456]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001844:	f043 0308 	orr.w	r3, r3, #8
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	4b70      	ldr	r3, [pc, #448]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	496d      	ldr	r1, [pc, #436]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001858:	4313      	orrs	r3, r2
 800185a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800185c:	4b6b      	ldr	r3, [pc, #428]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	4968      	ldr	r1, [pc, #416]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 800186c:	4313      	orrs	r3, r2
 800186e:	604b      	str	r3, [r1, #4]
 8001870:	e025      	b.n	80018be <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001872:	4b66      	ldr	r3, [pc, #408]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a65      	ldr	r2, [pc, #404]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001878:	f043 0308 	orr.w	r3, r3, #8
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	4b63      	ldr	r3, [pc, #396]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	4960      	ldr	r1, [pc, #384]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 800188c:	4313      	orrs	r3, r2
 800188e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001890:	4b5e      	ldr	r3, [pc, #376]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	495b      	ldr	r1, [pc, #364]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d109      	bne.n	80018be <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fd14 	bl	80022dc <RCC_SetFlashLatencyFromMSIRange>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e37a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018be:	f000 fc81 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 80018c2:	4602      	mov	r2, r0
 80018c4:	4b51      	ldr	r3, [pc, #324]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	091b      	lsrs	r3, r3, #4
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	4950      	ldr	r1, [pc, #320]	; (8001a10 <HAL_RCC_OscConfig+0x274>)
 80018d0:	5ccb      	ldrb	r3, [r1, r3]
 80018d2:	f003 031f 	and.w	r3, r3, #31
 80018d6:	fa22 f303 	lsr.w	r3, r2, r3
 80018da:	4a4e      	ldr	r2, [pc, #312]	; (8001a14 <HAL_RCC_OscConfig+0x278>)
 80018dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018de:	4b4e      	ldr	r3, [pc, #312]	; (8001a18 <HAL_RCC_OscConfig+0x27c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe ff20 	bl	8000728 <HAL_InitTick>
 80018e8:	4603      	mov	r3, r0
 80018ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d052      	beq.n	8001998 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	e35e      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d032      	beq.n	8001964 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018fe:	4b43      	ldr	r3, [pc, #268]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a42      	ldr	r2, [pc, #264]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800190a:	f7fe ff5d 	bl	80007c8 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001912:	f7fe ff59 	bl	80007c8 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e347      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001924:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001930:	4b36      	ldr	r3, [pc, #216]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a35      	ldr	r2, [pc, #212]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001936:	f043 0308 	orr.w	r3, r3, #8
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	4b33      	ldr	r3, [pc, #204]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	4930      	ldr	r1, [pc, #192]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 800194a:	4313      	orrs	r3, r2
 800194c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800194e:	4b2f      	ldr	r3, [pc, #188]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	492b      	ldr	r1, [pc, #172]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 800195e:	4313      	orrs	r3, r2
 8001960:	604b      	str	r3, [r1, #4]
 8001962:	e01a      	b.n	800199a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001964:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a28      	ldr	r2, [pc, #160]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 800196a:	f023 0301 	bic.w	r3, r3, #1
 800196e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001970:	f7fe ff2a 	bl	80007c8 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001978:	f7fe ff26 	bl	80007c8 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e314      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800198a:	4b20      	ldr	r3, [pc, #128]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x1dc>
 8001996:	e000      	b.n	800199a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001998:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d073      	beq.n	8001a8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d005      	beq.n	80019b8 <HAL_RCC_OscConfig+0x21c>
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	2b0c      	cmp	r3, #12
 80019b0:	d10e      	bne.n	80019d0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d10b      	bne.n	80019d0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b8:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d063      	beq.n	8001a8c <HAL_RCC_OscConfig+0x2f0>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d15f      	bne.n	8001a8c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e2f1      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d8:	d106      	bne.n	80019e8 <HAL_RCC_OscConfig+0x24c>
 80019da:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 80019e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	e025      	b.n	8001a34 <HAL_RCC_OscConfig+0x298>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019f0:	d114      	bne.n	8001a1c <HAL_RCC_OscConfig+0x280>
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a05      	ldr	r2, [pc, #20]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 80019f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a02      	ldr	r2, [pc, #8]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	e013      	b.n	8001a34 <HAL_RCC_OscConfig+0x298>
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	08002c44 	.word	0x08002c44
 8001a14:	20000000 	.word	0x20000000
 8001a18:	20000004 	.word	0x20000004
 8001a1c:	4ba0      	ldr	r3, [pc, #640]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a9f      	ldr	r2, [pc, #636]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	4b9d      	ldr	r3, [pc, #628]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a9c      	ldr	r2, [pc, #624]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d013      	beq.n	8001a64 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3c:	f7fe fec4 	bl	80007c8 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a44:	f7fe fec0 	bl	80007c8 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	; 0x64
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e2ae      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a56:	4b92      	ldr	r3, [pc, #584]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x2a8>
 8001a62:	e014      	b.n	8001a8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a64:	f7fe feb0 	bl	80007c8 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7fe feac 	bl	80007c8 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	; 0x64
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e29a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a7e:	4b88      	ldr	r3, [pc, #544]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x2d0>
 8001a8a:	e000      	b.n	8001a8e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d060      	beq.n	8001b5c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	d005      	beq.n	8001aac <HAL_RCC_OscConfig+0x310>
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	2b0c      	cmp	r3, #12
 8001aa4:	d119      	bne.n	8001ada <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d116      	bne.n	8001ada <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aac:	4b7c      	ldr	r3, [pc, #496]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d005      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x328>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e277      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac4:	4b76      	ldr	r3, [pc, #472]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	061b      	lsls	r3, r3, #24
 8001ad2:	4973      	ldr	r1, [pc, #460]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad8:	e040      	b.n	8001b5c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d023      	beq.n	8001b2a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae2:	4b6f      	ldr	r3, [pc, #444]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a6e      	ldr	r2, [pc, #440]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aee:	f7fe fe6b 	bl	80007c8 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af6:	f7fe fe67 	bl	80007c8 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e255      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b08:	4b65      	ldr	r3, [pc, #404]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b14:	4b62      	ldr	r3, [pc, #392]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	061b      	lsls	r3, r3, #24
 8001b22:	495f      	ldr	r1, [pc, #380]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	604b      	str	r3, [r1, #4]
 8001b28:	e018      	b.n	8001b5c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b2a:	4b5d      	ldr	r3, [pc, #372]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a5c      	ldr	r2, [pc, #368]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b36:	f7fe fe47 	bl	80007c8 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3e:	f7fe fe43 	bl	80007c8 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e231      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b50:	4b53      	ldr	r3, [pc, #332]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f0      	bne.n	8001b3e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d03c      	beq.n	8001be2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d01c      	beq.n	8001baa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b70:	4b4b      	ldr	r3, [pc, #300]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b76:	4a4a      	ldr	r2, [pc, #296]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b80:	f7fe fe22 	bl	80007c8 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b88:	f7fe fe1e 	bl	80007c8 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e20c      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b9a:	4b41      	ldr	r3, [pc, #260]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0ef      	beq.n	8001b88 <HAL_RCC_OscConfig+0x3ec>
 8001ba8:	e01b      	b.n	8001be2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001baa:	4b3d      	ldr	r3, [pc, #244]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb0:	4a3b      	ldr	r2, [pc, #236]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001bb2:	f023 0301 	bic.w	r3, r3, #1
 8001bb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bba:	f7fe fe05 	bl	80007c8 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc2:	f7fe fe01 	bl	80007c8 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e1ef      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bd4:	4b32      	ldr	r3, [pc, #200]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1ef      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 80a6 	beq.w	8001d3c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bf4:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10d      	bne.n	8001c1c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c00:	4b27      	ldr	r3, [pc, #156]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c04:	4a26      	ldr	r2, [pc, #152]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c0c:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c1c:	4b21      	ldr	r3, [pc, #132]	; (8001ca4 <HAL_RCC_OscConfig+0x508>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d118      	bne.n	8001c5a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c28:	4b1e      	ldr	r3, [pc, #120]	; (8001ca4 <HAL_RCC_OscConfig+0x508>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a1d      	ldr	r2, [pc, #116]	; (8001ca4 <HAL_RCC_OscConfig+0x508>)
 8001c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c34:	f7fe fdc8 	bl	80007c8 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3c:	f7fe fdc4 	bl	80007c8 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e1b2      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <HAL_RCC_OscConfig+0x508>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d108      	bne.n	8001c74 <HAL_RCC_OscConfig+0x4d8>
 8001c62:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c68:	4a0d      	ldr	r2, [pc, #52]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c72:	e029      	b.n	8001cc8 <HAL_RCC_OscConfig+0x52c>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b05      	cmp	r3, #5
 8001c7a:	d115      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x50c>
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c82:	4a07      	ldr	r2, [pc, #28]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001c84:	f043 0304 	orr.w	r3, r3, #4
 8001c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c8c:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c92:	4a03      	ldr	r2, [pc, #12]	; (8001ca0 <HAL_RCC_OscConfig+0x504>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c9c:	e014      	b.n	8001cc8 <HAL_RCC_OscConfig+0x52c>
 8001c9e:	bf00      	nop
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40007000 	.word	0x40007000
 8001ca8:	4b9a      	ldr	r3, [pc, #616]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cae:	4a99      	ldr	r2, [pc, #612]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001cb0:	f023 0301 	bic.w	r3, r3, #1
 8001cb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb8:	4b96      	ldr	r3, [pc, #600]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cbe:	4a95      	ldr	r2, [pc, #596]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001cc0:	f023 0304 	bic.w	r3, r3, #4
 8001cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d016      	beq.n	8001cfe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd0:	f7fe fd7a 	bl	80007c8 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd6:	e00a      	b.n	8001cee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd8:	f7fe fd76 	bl	80007c8 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e162      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cee:	4b89      	ldr	r3, [pc, #548]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0ed      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x53c>
 8001cfc:	e015      	b.n	8001d2a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfe:	f7fe fd63 	bl	80007c8 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d04:	e00a      	b.n	8001d1c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d06:	f7fe fd5f 	bl	80007c8 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e14b      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d1c:	4b7d      	ldr	r3, [pc, #500]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1ed      	bne.n	8001d06 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d2a:	7ffb      	ldrb	r3, [r7, #31]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d105      	bne.n	8001d3c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d30:	4b78      	ldr	r3, [pc, #480]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d34:	4a77      	ldr	r2, [pc, #476]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001d36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0320 	and.w	r3, r3, #32
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d03c      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d01c      	beq.n	8001d8a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d50:	4b70      	ldr	r3, [pc, #448]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d56:	4a6f      	ldr	r2, [pc, #444]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d60:	f7fe fd32 	bl	80007c8 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d68:	f7fe fd2e 	bl	80007c8 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e11c      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d7a:	4b66      	ldr	r3, [pc, #408]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001d7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0ef      	beq.n	8001d68 <HAL_RCC_OscConfig+0x5cc>
 8001d88:	e01b      	b.n	8001dc2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d8a:	4b62      	ldr	r3, [pc, #392]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001d8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d90:	4a60      	ldr	r2, [pc, #384]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001d92:	f023 0301 	bic.w	r3, r3, #1
 8001d96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9a:	f7fe fd15 	bl	80007c8 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001da2:	f7fe fd11 	bl	80007c8 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e0ff      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db4:	4b57      	ldr	r3, [pc, #348]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001db6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1ef      	bne.n	8001da2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 80f3 	beq.w	8001fb2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	f040 80c9 	bne.w	8001f68 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001dd6:	4b4f      	ldr	r3, [pc, #316]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f003 0203 	and.w	r2, r3, #3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d12c      	bne.n	8001e44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	3b01      	subs	r3, #1
 8001df6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d123      	bne.n	8001e44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e06:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d11b      	bne.n	8001e44 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e16:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d113      	bne.n	8001e44 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e26:	085b      	lsrs	r3, r3, #1
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d109      	bne.n	8001e44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	085b      	lsrs	r3, r3, #1
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d06b      	beq.n	8001f1c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	2b0c      	cmp	r3, #12
 8001e48:	d062      	beq.n	8001f10 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e4a:	4b32      	ldr	r3, [pc, #200]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e0ac      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e5a:	4b2e      	ldr	r3, [pc, #184]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a2d      	ldr	r2, [pc, #180]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001e60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e64:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e66:	f7fe fcaf 	bl	80007c8 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6e:	f7fe fcab 	bl	80007c8 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e099      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e80:	4b24      	ldr	r3, [pc, #144]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f0      	bne.n	8001e6e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e8c:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <HAL_RCC_OscConfig+0x77c>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e9c:	3a01      	subs	r2, #1
 8001e9e:	0112      	lsls	r2, r2, #4
 8001ea0:	4311      	orrs	r1, r2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ea6:	0212      	lsls	r2, r2, #8
 8001ea8:	4311      	orrs	r1, r2
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001eae:	0852      	lsrs	r2, r2, #1
 8001eb0:	3a01      	subs	r2, #1
 8001eb2:	0552      	lsls	r2, r2, #21
 8001eb4:	4311      	orrs	r1, r2
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001eba:	0852      	lsrs	r2, r2, #1
 8001ebc:	3a01      	subs	r2, #1
 8001ebe:	0652      	lsls	r2, r2, #25
 8001ec0:	4311      	orrs	r1, r2
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ec6:	06d2      	lsls	r2, r2, #27
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	4912      	ldr	r1, [pc, #72]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ed0:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0f      	ldr	r2, [pc, #60]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001edc:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	4a0c      	ldr	r2, [pc, #48]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001ee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ee6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ee8:	f7fe fc6e 	bl	80007c8 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef0:	f7fe fc6a 	bl	80007c8 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e058      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f02:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f0e:	e050      	b.n	8001fb2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e04f      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
 8001f14:	40021000 	.word	0x40021000
 8001f18:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f1c:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <HAL_RCC_OscConfig+0x820>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d144      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f28:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <HAL_RCC_OscConfig+0x820>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a23      	ldr	r2, [pc, #140]	; (8001fbc <HAL_RCC_OscConfig+0x820>)
 8001f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f34:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <HAL_RCC_OscConfig+0x820>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	4a20      	ldr	r2, [pc, #128]	; (8001fbc <HAL_RCC_OscConfig+0x820>)
 8001f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f40:	f7fe fc42 	bl	80007c8 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f48:	f7fe fc3e 	bl	80007c8 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e02c      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f5a:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <HAL_RCC_OscConfig+0x820>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0x7ac>
 8001f66:	e024      	b.n	8001fb2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	2b0c      	cmp	r3, #12
 8001f6c:	d01f      	beq.n	8001fae <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6e:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <HAL_RCC_OscConfig+0x820>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a12      	ldr	r2, [pc, #72]	; (8001fbc <HAL_RCC_OscConfig+0x820>)
 8001f74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7a:	f7fe fc25 	bl	80007c8 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f82:	f7fe fc21 	bl	80007c8 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e00f      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_RCC_OscConfig+0x820>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1f0      	bne.n	8001f82 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_RCC_OscConfig+0x820>)
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	4905      	ldr	r1, [pc, #20]	; (8001fbc <HAL_RCC_OscConfig+0x820>)
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_RCC_OscConfig+0x824>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60cb      	str	r3, [r1, #12]
 8001fac:	e001      	b.n	8001fb2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3720      	adds	r7, #32
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	feeefffc 	.word	0xfeeefffc

08001fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0e7      	b.n	80021a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd8:	4b75      	ldr	r3, [pc, #468]	; (80021b0 <HAL_RCC_ClockConfig+0x1ec>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d910      	bls.n	8002008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe6:	4b72      	ldr	r3, [pc, #456]	; (80021b0 <HAL_RCC_ClockConfig+0x1ec>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f023 0207 	bic.w	r2, r3, #7
 8001fee:	4970      	ldr	r1, [pc, #448]	; (80021b0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff6:	4b6e      	ldr	r3, [pc, #440]	; (80021b0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d001      	beq.n	8002008 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0cf      	b.n	80021a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d010      	beq.n	8002036 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	4b66      	ldr	r3, [pc, #408]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002020:	429a      	cmp	r2, r3
 8002022:	d908      	bls.n	8002036 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002024:	4b63      	ldr	r3, [pc, #396]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	4960      	ldr	r1, [pc, #384]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002032:	4313      	orrs	r3, r2
 8002034:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d04c      	beq.n	80020dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b03      	cmp	r3, #3
 8002048:	d107      	bne.n	800205a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800204a:	4b5a      	ldr	r3, [pc, #360]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d121      	bne.n	800209a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e0a6      	b.n	80021a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b02      	cmp	r3, #2
 8002060:	d107      	bne.n	8002072 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002062:	4b54      	ldr	r3, [pc, #336]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d115      	bne.n	800209a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e09a      	b.n	80021a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800207a:	4b4e      	ldr	r3, [pc, #312]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d109      	bne.n	800209a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e08e      	b.n	80021a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800208a:	4b4a      	ldr	r3, [pc, #296]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e086      	b.n	80021a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800209a:	4b46      	ldr	r3, [pc, #280]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f023 0203 	bic.w	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	4943      	ldr	r1, [pc, #268]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020ac:	f7fe fb8c 	bl	80007c8 <HAL_GetTick>
 80020b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b2:	e00a      	b.n	80020ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b4:	f7fe fb88 	bl	80007c8 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e06e      	b.n	80021a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ca:	4b3a      	ldr	r3, [pc, #232]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 020c 	and.w	r2, r3, #12
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	429a      	cmp	r2, r3
 80020da:	d1eb      	bne.n	80020b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d010      	beq.n	800210a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	4b31      	ldr	r3, [pc, #196]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d208      	bcs.n	800210a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b2e      	ldr	r3, [pc, #184]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	492b      	ldr	r1, [pc, #172]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800210a:	4b29      	ldr	r3, [pc, #164]	; (80021b0 <HAL_RCC_ClockConfig+0x1ec>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d210      	bcs.n	800213a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002118:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <HAL_RCC_ClockConfig+0x1ec>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f023 0207 	bic.w	r2, r3, #7
 8002120:	4923      	ldr	r1, [pc, #140]	; (80021b0 <HAL_RCC_ClockConfig+0x1ec>)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	4313      	orrs	r3, r2
 8002126:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002128:	4b21      	ldr	r3, [pc, #132]	; (80021b0 <HAL_RCC_ClockConfig+0x1ec>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d001      	beq.n	800213a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e036      	b.n	80021a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b00      	cmp	r3, #0
 8002144:	d008      	beq.n	8002158 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002146:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	4918      	ldr	r1, [pc, #96]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002154:	4313      	orrs	r3, r2
 8002156:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	2b00      	cmp	r3, #0
 8002162:	d009      	beq.n	8002178 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002164:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	4910      	ldr	r1, [pc, #64]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002174:	4313      	orrs	r3, r2
 8002176:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002178:	f000 f824 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 800217c:	4602      	mov	r2, r0
 800217e:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	091b      	lsrs	r3, r3, #4
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	490b      	ldr	r1, [pc, #44]	; (80021b8 <HAL_RCC_ClockConfig+0x1f4>)
 800218a:	5ccb      	ldrb	r3, [r1, r3]
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	fa22 f303 	lsr.w	r3, r2, r3
 8002194:	4a09      	ldr	r2, [pc, #36]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 8002196:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002198:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <HAL_RCC_ClockConfig+0x1fc>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe fac3 	bl	8000728 <HAL_InitTick>
 80021a2:	4603      	mov	r3, r0
 80021a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80021a6:	7afb      	ldrb	r3, [r7, #11]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40022000 	.word	0x40022000
 80021b4:	40021000 	.word	0x40021000
 80021b8:	08002c44 	.word	0x08002c44
 80021bc:	20000000 	.word	0x20000000
 80021c0:	20000004 	.word	0x20000004

080021c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	; 0x24
 80021c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021d2:	4b3e      	ldr	r3, [pc, #248]	; (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021dc:	4b3b      	ldr	r3, [pc, #236]	; (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_RCC_GetSysClockFreq+0x34>
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	2b0c      	cmp	r3, #12
 80021f0:	d121      	bne.n	8002236 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d11e      	bne.n	8002236 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021f8:	4b34      	ldr	r3, [pc, #208]	; (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	2b00      	cmp	r3, #0
 8002202:	d107      	bne.n	8002214 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002204:	4b31      	ldr	r3, [pc, #196]	; (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	61fb      	str	r3, [r7, #28]
 8002212:	e005      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002214:	4b2d      	ldr	r3, [pc, #180]	; (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	091b      	lsrs	r3, r3, #4
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002220:	4a2b      	ldr	r2, [pc, #172]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002228:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10d      	bne.n	800224c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002234:	e00a      	b.n	800224c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	2b04      	cmp	r3, #4
 800223a:	d102      	bne.n	8002242 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800223c:	4b25      	ldr	r3, [pc, #148]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800223e:	61bb      	str	r3, [r7, #24]
 8002240:	e004      	b.n	800224c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	2b08      	cmp	r3, #8
 8002246:	d101      	bne.n	800224c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002248:	4b23      	ldr	r3, [pc, #140]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800224a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	2b0c      	cmp	r3, #12
 8002250:	d134      	bne.n	80022bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002252:	4b1e      	ldr	r3, [pc, #120]	; (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d003      	beq.n	800226a <HAL_RCC_GetSysClockFreq+0xa6>
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2b03      	cmp	r3, #3
 8002266:	d003      	beq.n	8002270 <HAL_RCC_GetSysClockFreq+0xac>
 8002268:	e005      	b.n	8002276 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800226a:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800226c:	617b      	str	r3, [r7, #20]
      break;
 800226e:	e005      	b.n	800227c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002270:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002272:	617b      	str	r3, [r7, #20]
      break;
 8002274:	e002      	b.n	800227c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	617b      	str	r3, [r7, #20]
      break;
 800227a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800227c:	4b13      	ldr	r3, [pc, #76]	; (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	091b      	lsrs	r3, r3, #4
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	3301      	adds	r3, #1
 8002288:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	0a1b      	lsrs	r3, r3, #8
 8002290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	fb03 f202 	mul.w	r2, r3, r2
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	0e5b      	lsrs	r3, r3, #25
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	3301      	adds	r3, #1
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022bc:	69bb      	ldr	r3, [r7, #24]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3724      	adds	r7, #36	; 0x24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40021000 	.word	0x40021000
 80022d0:	08002c54 	.word	0x08002c54
 80022d4:	00f42400 	.word	0x00f42400
 80022d8:	007a1200 	.word	0x007a1200

080022dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022e4:	2300      	movs	r3, #0
 80022e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022e8:	4b2a      	ldr	r3, [pc, #168]	; (8002394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022f4:	f7ff f9ee 	bl	80016d4 <HAL_PWREx_GetVoltageRange>
 80022f8:	6178      	str	r0, [r7, #20]
 80022fa:	e014      	b.n	8002326 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022fc:	4b25      	ldr	r3, [pc, #148]	; (8002394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002300:	4a24      	ldr	r2, [pc, #144]	; (8002394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002306:	6593      	str	r3, [r2, #88]	; 0x58
 8002308:	4b22      	ldr	r3, [pc, #136]	; (8002394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800230a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002314:	f7ff f9de 	bl	80016d4 <HAL_PWREx_GetVoltageRange>
 8002318:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800231a:	4b1e      	ldr	r3, [pc, #120]	; (8002394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800231c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231e:	4a1d      	ldr	r2, [pc, #116]	; (8002394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002324:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800232c:	d10b      	bne.n	8002346 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b80      	cmp	r3, #128	; 0x80
 8002332:	d919      	bls.n	8002368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2ba0      	cmp	r3, #160	; 0xa0
 8002338:	d902      	bls.n	8002340 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800233a:	2302      	movs	r3, #2
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	e013      	b.n	8002368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002340:	2301      	movs	r3, #1
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	e010      	b.n	8002368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b80      	cmp	r3, #128	; 0x80
 800234a:	d902      	bls.n	8002352 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800234c:	2303      	movs	r3, #3
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	e00a      	b.n	8002368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b80      	cmp	r3, #128	; 0x80
 8002356:	d102      	bne.n	800235e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002358:	2302      	movs	r3, #2
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	e004      	b.n	8002368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b70      	cmp	r3, #112	; 0x70
 8002362:	d101      	bne.n	8002368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002364:	2301      	movs	r3, #1
 8002366:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f023 0207 	bic.w	r2, r3, #7
 8002370:	4909      	ldr	r1, [pc, #36]	; (8002398 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002378:	4b07      	ldr	r3, [pc, #28]	; (8002398 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	429a      	cmp	r2, r3
 8002384:	d001      	beq.n	800238a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000
 8002398:	40022000 	.word	0x40022000

0800239c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e049      	b.n	8002442 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d106      	bne.n	80023c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7fe f90a 	bl	80005dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3304      	adds	r3, #4
 80023d8:	4619      	mov	r1, r3
 80023da:	4610      	mov	r0, r2
 80023dc:	f000 f94c 	bl	8002678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b01      	cmp	r3, #1
 800245e:	d001      	beq.n	8002464 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e033      	b.n	80024cc <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a19      	ldr	r2, [pc, #100]	; (80024d8 <HAL_TIM_Base_Start+0x8c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d009      	beq.n	800248a <HAL_TIM_Base_Start+0x3e>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800247e:	d004      	beq.n	800248a <HAL_TIM_Base_Start+0x3e>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a15      	ldr	r2, [pc, #84]	; (80024dc <HAL_TIM_Base_Start+0x90>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d115      	bne.n	80024b6 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	4b13      	ldr	r3, [pc, #76]	; (80024e0 <HAL_TIM_Base_Start+0x94>)
 8002492:	4013      	ands	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2b06      	cmp	r3, #6
 800249a:	d015      	beq.n	80024c8 <HAL_TIM_Base_Start+0x7c>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a2:	d011      	beq.n	80024c8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024b4:	e008      	b.n	80024c8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0201 	orr.w	r2, r2, #1
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	e000      	b.n	80024ca <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	40012c00 	.word	0x40012c00
 80024dc:	40014000 	.word	0x40014000
 80024e0:	00010007 	.word	0x00010007

080024e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d101      	bne.n	8002500 <HAL_TIM_ConfigClockSource+0x1c>
 80024fc:	2302      	movs	r3, #2
 80024fe:	e0b6      	b.n	800266e <HAL_TIM_ConfigClockSource+0x18a>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800251e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002522:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800252a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800253c:	d03e      	beq.n	80025bc <HAL_TIM_ConfigClockSource+0xd8>
 800253e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002542:	f200 8087 	bhi.w	8002654 <HAL_TIM_ConfigClockSource+0x170>
 8002546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800254a:	f000 8086 	beq.w	800265a <HAL_TIM_ConfigClockSource+0x176>
 800254e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002552:	d87f      	bhi.n	8002654 <HAL_TIM_ConfigClockSource+0x170>
 8002554:	2b70      	cmp	r3, #112	; 0x70
 8002556:	d01a      	beq.n	800258e <HAL_TIM_ConfigClockSource+0xaa>
 8002558:	2b70      	cmp	r3, #112	; 0x70
 800255a:	d87b      	bhi.n	8002654 <HAL_TIM_ConfigClockSource+0x170>
 800255c:	2b60      	cmp	r3, #96	; 0x60
 800255e:	d050      	beq.n	8002602 <HAL_TIM_ConfigClockSource+0x11e>
 8002560:	2b60      	cmp	r3, #96	; 0x60
 8002562:	d877      	bhi.n	8002654 <HAL_TIM_ConfigClockSource+0x170>
 8002564:	2b50      	cmp	r3, #80	; 0x50
 8002566:	d03c      	beq.n	80025e2 <HAL_TIM_ConfigClockSource+0xfe>
 8002568:	2b50      	cmp	r3, #80	; 0x50
 800256a:	d873      	bhi.n	8002654 <HAL_TIM_ConfigClockSource+0x170>
 800256c:	2b40      	cmp	r3, #64	; 0x40
 800256e:	d058      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0x13e>
 8002570:	2b40      	cmp	r3, #64	; 0x40
 8002572:	d86f      	bhi.n	8002654 <HAL_TIM_ConfigClockSource+0x170>
 8002574:	2b30      	cmp	r3, #48	; 0x30
 8002576:	d064      	beq.n	8002642 <HAL_TIM_ConfigClockSource+0x15e>
 8002578:	2b30      	cmp	r3, #48	; 0x30
 800257a:	d86b      	bhi.n	8002654 <HAL_TIM_ConfigClockSource+0x170>
 800257c:	2b20      	cmp	r3, #32
 800257e:	d060      	beq.n	8002642 <HAL_TIM_ConfigClockSource+0x15e>
 8002580:	2b20      	cmp	r3, #32
 8002582:	d867      	bhi.n	8002654 <HAL_TIM_ConfigClockSource+0x170>
 8002584:	2b00      	cmp	r3, #0
 8002586:	d05c      	beq.n	8002642 <HAL_TIM_ConfigClockSource+0x15e>
 8002588:	2b10      	cmp	r3, #16
 800258a:	d05a      	beq.n	8002642 <HAL_TIM_ConfigClockSource+0x15e>
 800258c:	e062      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	6899      	ldr	r1, [r3, #8]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f000 f949 	bl	8002834 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	609a      	str	r2, [r3, #8]
      break;
 80025ba:	e04f      	b.n	800265c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	6899      	ldr	r1, [r3, #8]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f000 f932 	bl	8002834 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025de:	609a      	str	r2, [r3, #8]
      break;
 80025e0:	e03c      	b.n	800265c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	6859      	ldr	r1, [r3, #4]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	461a      	mov	r2, r3
 80025f0:	f000 f8a6 	bl	8002740 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2150      	movs	r1, #80	; 0x50
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 f8ff 	bl	80027fe <TIM_ITRx_SetConfig>
      break;
 8002600:	e02c      	b.n	800265c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6818      	ldr	r0, [r3, #0]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	6859      	ldr	r1, [r3, #4]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	461a      	mov	r2, r3
 8002610:	f000 f8c5 	bl	800279e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2160      	movs	r1, #96	; 0x60
 800261a:	4618      	mov	r0, r3
 800261c:	f000 f8ef 	bl	80027fe <TIM_ITRx_SetConfig>
      break;
 8002620:	e01c      	b.n	800265c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6818      	ldr	r0, [r3, #0]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	6859      	ldr	r1, [r3, #4]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	461a      	mov	r2, r3
 8002630:	f000 f886 	bl	8002740 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2140      	movs	r1, #64	; 0x40
 800263a:	4618      	mov	r0, r3
 800263c:	f000 f8df 	bl	80027fe <TIM_ITRx_SetConfig>
      break;
 8002640:	e00c      	b.n	800265c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4619      	mov	r1, r3
 800264c:	4610      	mov	r0, r2
 800264e:	f000 f8d6 	bl	80027fe <TIM_ITRx_SetConfig>
      break;
 8002652:	e003      	b.n	800265c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
      break;
 8002658:	e000      	b.n	800265c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800265a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800266c:	7bfb      	ldrb	r3, [r7, #15]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a2a      	ldr	r2, [pc, #168]	; (8002734 <TIM_Base_SetConfig+0xbc>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d003      	beq.n	8002698 <TIM_Base_SetConfig+0x20>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002696:	d108      	bne.n	80026aa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800269e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a21      	ldr	r2, [pc, #132]	; (8002734 <TIM_Base_SetConfig+0xbc>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d00b      	beq.n	80026ca <TIM_Base_SetConfig+0x52>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b8:	d007      	beq.n	80026ca <TIM_Base_SetConfig+0x52>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a1e      	ldr	r2, [pc, #120]	; (8002738 <TIM_Base_SetConfig+0xc0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d003      	beq.n	80026ca <TIM_Base_SetConfig+0x52>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a1d      	ldr	r2, [pc, #116]	; (800273c <TIM_Base_SetConfig+0xc4>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d108      	bne.n	80026dc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	4313      	orrs	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a0c      	ldr	r2, [pc, #48]	; (8002734 <TIM_Base_SetConfig+0xbc>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d007      	beq.n	8002718 <TIM_Base_SetConfig+0xa0>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a0b      	ldr	r2, [pc, #44]	; (8002738 <TIM_Base_SetConfig+0xc0>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d003      	beq.n	8002718 <TIM_Base_SetConfig+0xa0>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a0a      	ldr	r2, [pc, #40]	; (800273c <TIM_Base_SetConfig+0xc4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d103      	bne.n	8002720 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	615a      	str	r2, [r3, #20]
}
 8002726:	bf00      	nop
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40012c00 	.word	0x40012c00
 8002738:	40014000 	.word	0x40014000
 800273c:	40014400 	.word	0x40014400

08002740 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	f023 0201 	bic.w	r2, r3, #1
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800276a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f023 030a 	bic.w	r3, r3, #10
 800277c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	4313      	orrs	r3, r2
 8002784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	621a      	str	r2, [r3, #32]
}
 8002792:	bf00      	nop
 8002794:	371c      	adds	r7, #28
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800279e:	b480      	push	{r7}
 80027a0:	b087      	sub	sp, #28
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	f023 0210 	bic.w	r2, r3, #16
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	031b      	lsls	r3, r3, #12
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	621a      	str	r2, [r3, #32]
}
 80027f2:	bf00      	nop
 80027f4:	371c      	adds	r7, #28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027fe:	b480      	push	{r7}
 8002800:	b085      	sub	sp, #20
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002814:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4313      	orrs	r3, r2
 800281c:	f043 0307 	orr.w	r3, r3, #7
 8002820:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	609a      	str	r2, [r3, #8]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002834:	b480      	push	{r7}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
 8002840:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800284e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	021a      	lsls	r2, r3, #8
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	431a      	orrs	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4313      	orrs	r3, r2
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	4313      	orrs	r3, r2
 8002860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	609a      	str	r2, [r3, #8]
}
 8002868:	bf00      	nop
 800286a:	371c      	adds	r7, #28
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002888:	2302      	movs	r3, #2
 800288a:	e04f      	b.n	800292c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a21      	ldr	r2, [pc, #132]	; (8002938 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d108      	bne.n	80028c8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80028bc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a14      	ldr	r2, [pc, #80]	; (8002938 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d009      	beq.n	8002900 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f4:	d004      	beq.n	8002900 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a10      	ldr	r2, [pc, #64]	; (800293c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d10c      	bne.n	800291a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002906:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	4313      	orrs	r3, r2
 8002910:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	40012c00 	.word	0x40012c00
 800293c:	40014000 	.word	0x40014000

08002940 <app_setup>:

extern DAC_HandleTypeDef hdac1;
extern DMA_HandleTypeDef hdma_dac_ch1;
extern TIM_HandleTypeDef htim2;
//Runs once after all peripherals are initialized
void app_setup(){
 8002940:	b580      	push	{r7, lr}
 8002942:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002946:	af02      	add	r7, sp, #8

    uint32_t Wave_LUT[NS] = {
 8002948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8002950:	4a0b      	ldr	r2, [pc, #44]	; (8002980 <app_setup+0x40>)
 8002952:	4618      	mov	r0, r3
 8002954:	4611      	mov	r1, r2
 8002956:	f44f 7300 	mov.w	r3, #512	; 0x200
 800295a:	461a      	mov	r2, r3
 800295c:	f000 f850 	bl	8002a00 <memcpy>
            944, 860, 779, 701, 627, 556, 488, 424, 365, 309, 258, 211, 168, 130, 97,
            69, 45, 26, 13, 4, 0, 1, 8, 19, 35, 56, 82, 113, 149, 189,
            234, 283, 336, 394, 456, 521, 591, 664, 740, 820, 902, 987, 1075, 1166, 1258,
            1353, 1449, 1546, 1645, 1745, 1845, 1946, 2047
    };
    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)Wave_LUT, 128, DAC_ALIGN_12B_R);
 8002960:	463a      	mov	r2, r7
 8002962:	2300      	movs	r3, #0
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	2100      	movs	r1, #0
 800296a:	4806      	ldr	r0, [pc, #24]	; (8002984 <app_setup+0x44>)
 800296c:	f7fe f890 	bl	8000a90 <HAL_DAC_Start_DMA>
    HAL_TIM_Base_Start(&htim2);
 8002970:	4805      	ldr	r0, [pc, #20]	; (8002988 <app_setup+0x48>)
 8002972:	f7ff fd6b 	bl	800244c <HAL_TIM_Base_Start>
}
 8002976:	bf00      	nop
 8002978:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	08002a44 	.word	0x08002a44
 8002984:	20000028 	.word	0x20000028
 8002988:	20000084 	.word	0x20000084

0800298c <app_loop>:

//Runs repeatedly after app_setup() has finished
void app_loop() {
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8002990:	2108      	movs	r1, #8
 8002992:	4808      	ldr	r0, [pc, #32]	; (80029b4 <app_loop+0x28>)
 8002994:	f7fe fe84 	bl	80016a0 <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 8002998:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800299c:	f7fd ff20 	bl	80007e0 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80029a0:	2108      	movs	r1, #8
 80029a2:	4804      	ldr	r0, [pc, #16]	; (80029b4 <app_loop+0x28>)
 80029a4:	f7fe fe7c 	bl	80016a0 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 80029a8:	2064      	movs	r0, #100	; 0x64
 80029aa:	f7fd ff19 	bl	80007e0 <HAL_Delay>
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	48000400 	.word	0x48000400

080029b8 <__libc_init_array>:
 80029b8:	b570      	push	{r4, r5, r6, lr}
 80029ba:	4d0d      	ldr	r5, [pc, #52]	; (80029f0 <__libc_init_array+0x38>)
 80029bc:	4c0d      	ldr	r4, [pc, #52]	; (80029f4 <__libc_init_array+0x3c>)
 80029be:	1b64      	subs	r4, r4, r5
 80029c0:	10a4      	asrs	r4, r4, #2
 80029c2:	2600      	movs	r6, #0
 80029c4:	42a6      	cmp	r6, r4
 80029c6:	d109      	bne.n	80029dc <__libc_init_array+0x24>
 80029c8:	4d0b      	ldr	r5, [pc, #44]	; (80029f8 <__libc_init_array+0x40>)
 80029ca:	4c0c      	ldr	r4, [pc, #48]	; (80029fc <__libc_init_array+0x44>)
 80029cc:	f000 f82e 	bl	8002a2c <_init>
 80029d0:	1b64      	subs	r4, r4, r5
 80029d2:	10a4      	asrs	r4, r4, #2
 80029d4:	2600      	movs	r6, #0
 80029d6:	42a6      	cmp	r6, r4
 80029d8:	d105      	bne.n	80029e6 <__libc_init_array+0x2e>
 80029da:	bd70      	pop	{r4, r5, r6, pc}
 80029dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80029e0:	4798      	blx	r3
 80029e2:	3601      	adds	r6, #1
 80029e4:	e7ee      	b.n	80029c4 <__libc_init_array+0xc>
 80029e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ea:	4798      	blx	r3
 80029ec:	3601      	adds	r6, #1
 80029ee:	e7f2      	b.n	80029d6 <__libc_init_array+0x1e>
 80029f0:	08002c84 	.word	0x08002c84
 80029f4:	08002c84 	.word	0x08002c84
 80029f8:	08002c84 	.word	0x08002c84
 80029fc:	08002c88 	.word	0x08002c88

08002a00 <memcpy>:
 8002a00:	440a      	add	r2, r1
 8002a02:	4291      	cmp	r1, r2
 8002a04:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a08:	d100      	bne.n	8002a0c <memcpy+0xc>
 8002a0a:	4770      	bx	lr
 8002a0c:	b510      	push	{r4, lr}
 8002a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a16:	4291      	cmp	r1, r2
 8002a18:	d1f9      	bne.n	8002a0e <memcpy+0xe>
 8002a1a:	bd10      	pop	{r4, pc}

08002a1c <memset>:
 8002a1c:	4402      	add	r2, r0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d100      	bne.n	8002a26 <memset+0xa>
 8002a24:	4770      	bx	lr
 8002a26:	f803 1b01 	strb.w	r1, [r3], #1
 8002a2a:	e7f9      	b.n	8002a20 <memset+0x4>

08002a2c <_init>:
 8002a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a2e:	bf00      	nop
 8002a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a32:	bc08      	pop	{r3}
 8002a34:	469e      	mov	lr, r3
 8002a36:	4770      	bx	lr

08002a38 <_fini>:
 8002a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a3a:	bf00      	nop
 8002a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a3e:	bc08      	pop	{r3}
 8002a40:	469e      	mov	lr, r3
 8002a42:	4770      	bx	lr
