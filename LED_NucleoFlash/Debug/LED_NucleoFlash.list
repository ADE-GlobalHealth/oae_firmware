
LED_NucleoFlash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002968  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002af4  08002af4  00012af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b3c  08002b3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b3c  08002b3c  00012b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b44  08002b44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b44  08002b44  00012b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b48  08002b48  00012b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  08002b58  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08002b58  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000acaf  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000186c  00000000  00000000  0002aceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  0002c558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000868  00000000  00000000  0002ce58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ed5a  00000000  00000000  0002d6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a38a  00000000  00000000  0004c41a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb0f1  00000000  00000000  000567a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00111895  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023a8  00000000  00000000  001118e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002adc 	.word	0x08002adc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002adc 	.word	0x08002adc

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 f9ed 	bl	80008b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f816 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8a6 	bl	800062c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f874 	bl	80005cc <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOH, GPIO_PIN_3);
 80004e4:	2108      	movs	r1, #8
 80004e6:	4807      	ldr	r0, [pc, #28]	; (8000504 <main+0x34>)
 80004e8:	f000 fce4 	bl	8000eb4 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80004ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f0:	f000 fa54 	bl	800099c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOH, GPIO_PIN_3);
 80004f4:	2108      	movs	r1, #8
 80004f6:	4803      	ldr	r0, [pc, #12]	; (8000504 <main+0x34>)
 80004f8:	f000 fcdc 	bl	8000eb4 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80004fc:	2064      	movs	r0, #100	; 0x64
 80004fe:	f000 fa4d 	bl	800099c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOH, GPIO_PIN_3);
 8000502:	e7ef      	b.n	80004e4 <main+0x14>
 8000504:	48001c00 	.word	0x48001c00

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b096      	sub	sp, #88	; 0x58
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2244      	movs	r2, #68	; 0x44
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f002 fad8 	bl	8002acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	463b      	mov	r3, r7
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800052a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800052e:	f000 fcf9 	bl	8000f24 <HAL_PWREx_ControlVoltageScaling>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000538:	f000 f8c2 	bl	80006c0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800053c:	f000 fcd4 	bl	8000ee8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000540:	4b21      	ldr	r3, [pc, #132]	; (80005c8 <SystemClock_Config+0xc0>)
 8000542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000546:	4a20      	ldr	r2, [pc, #128]	; (80005c8 <SystemClock_Config+0xc0>)
 8000548:	f023 0318 	bic.w	r3, r3, #24
 800054c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000550:	2314      	movs	r3, #20
 8000552:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000554:	2301      	movs	r3, #1
 8000556:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000558:	2301      	movs	r3, #1
 800055a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000560:	2360      	movs	r3, #96	; 0x60
 8000562:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000564:	2302      	movs	r3, #2
 8000566:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000568:	2301      	movs	r3, #1
 800056a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800056c:	2301      	movs	r3, #1
 800056e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000570:	2310      	movs	r3, #16
 8000572:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000574:	2307      	movs	r3, #7
 8000576:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000578:	2302      	movs	r3, #2
 800057a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800057c:	2302      	movs	r3, #2
 800057e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	4618      	mov	r0, r3
 8000586:	f000 fd23 	bl	8000fd0 <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000590:	f000 f896 	bl	80006c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000598:	2303      	movs	r3, #3
 800059a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005a8:	463b      	mov	r3, r7
 80005aa:	2101      	movs	r1, #1
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 f923 	bl	80017f8 <HAL_RCC_ClockConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005b8:	f000 f882 	bl	80006c0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005bc:	f001 fd36 	bl	800202c <HAL_RCCEx_EnableMSIPLLMode>
}
 80005c0:	bf00      	nop
 80005c2:	3758      	adds	r7, #88	; 0x58
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40021000 	.word	0x40021000

080005cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_USART2_UART_Init+0x58>)
 80005d2:	4a15      	ldr	r2, [pc, #84]	; (8000628 <MX_USART2_UART_Init+0x5c>)
 80005d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_USART2_UART_Init+0x58>)
 80005d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_USART2_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_USART2_UART_Init+0x58>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_USART2_UART_Init+0x58>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_USART2_UART_Init+0x58>)
 80005f2:	220c      	movs	r2, #12
 80005f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <MX_USART2_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_USART2_UART_Init+0x58>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <MX_USART2_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_USART2_UART_Init+0x58>)
 800060a:	2200      	movs	r2, #0
 800060c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <MX_USART2_UART_Init+0x58>)
 8000610:	f001 fe0e 	bl	8002230 <HAL_UART_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800061a:	f000 f851 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000028 	.word	0x20000028
 8000628:	40004400 	.word	0x40004400

0800062c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000642:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <MX_GPIO_Init+0x8c>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	4a1c      	ldr	r2, [pc, #112]	; (80006b8 <MX_GPIO_Init+0x8c>)
 8000648:	f043 0304 	orr.w	r3, r3, #4
 800064c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064e:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <MX_GPIO_Init+0x8c>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	f003 0304 	and.w	r3, r3, #4
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <MX_GPIO_Init+0x8c>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	4a16      	ldr	r2, [pc, #88]	; (80006b8 <MX_GPIO_Init+0x8c>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000666:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <MX_GPIO_Init+0x8c>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_GPIO_Init+0x8c>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	4a10      	ldr	r2, [pc, #64]	; (80006b8 <MX_GPIO_Init+0x8c>)
 8000678:	f043 0302 	orr.w	r3, r3, #2
 800067c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_GPIO_Init+0x8c>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	f003 0302 	and.w	r3, r3, #2
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2108      	movs	r1, #8
 800068e:	480b      	ldr	r0, [pc, #44]	; (80006bc <MX_GPIO_Init+0x90>)
 8000690:	f000 fbf8 	bl	8000e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000694:	2308      	movs	r3, #8
 8000696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	2301      	movs	r3, #1
 800069a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	4619      	mov	r1, r3
 80006aa:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_GPIO_Init+0x90>)
 80006ac:	f000 fa80 	bl	8000bb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006b0:	bf00      	nop
 80006b2:	3720      	adds	r7, #32
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021000 	.word	0x40021000
 80006bc:	48000400 	.word	0x48000400

080006c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c4:	b672      	cpsid	i
}
 80006c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <Error_Handler+0x8>
	...

080006cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <HAL_MspInit+0x44>)
 80006d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006d6:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <HAL_MspInit+0x44>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6613      	str	r3, [r2, #96]	; 0x60
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <HAL_MspInit+0x44>)
 80006e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <HAL_MspInit+0x44>)
 80006ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ee:	4a08      	ldr	r2, [pc, #32]	; (8000710 <HAL_MspInit+0x44>)
 80006f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f4:	6593      	str	r3, [r2, #88]	; 0x58
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <HAL_MspInit+0x44>)
 80006f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	40021000 	.word	0x40021000

08000714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b09e      	sub	sp, #120	; 0x78
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800072c:	f107 0310 	add.w	r3, r7, #16
 8000730:	2254      	movs	r2, #84	; 0x54
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f002 f9c9 	bl	8002acc <memset>
  if(huart->Instance==USART2)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a28      	ldr	r2, [pc, #160]	; (80007e0 <HAL_UART_MspInit+0xcc>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d148      	bne.n	80007d6 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000744:	2302      	movs	r3, #2
 8000746:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000748:	2300      	movs	r3, #0
 800074a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800074c:	f107 0310 	add.w	r3, r7, #16
 8000750:	4618      	mov	r0, r3
 8000752:	f001 fa75 	bl	8001c40 <HAL_RCCEx_PeriphCLKConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800075c:	f7ff ffb0 	bl	80006c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000760:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <HAL_UART_MspInit+0xd0>)
 8000762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000764:	4a1f      	ldr	r2, [pc, #124]	; (80007e4 <HAL_UART_MspInit+0xd0>)
 8000766:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800076a:	6593      	str	r3, [r2, #88]	; 0x58
 800076c:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <HAL_UART_MspInit+0xd0>)
 800076e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000778:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <HAL_UART_MspInit+0xd0>)
 800077a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077c:	4a19      	ldr	r2, [pc, #100]	; (80007e4 <HAL_UART_MspInit+0xd0>)
 800077e:	f043 0301 	orr.w	r3, r3, #1
 8000782:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000784:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <HAL_UART_MspInit+0xd0>)
 8000786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000788:	f003 0301 	and.w	r3, r3, #1
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000790:	2304      	movs	r3, #4
 8000792:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079c:	2303      	movs	r3, #3
 800079e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007a0:	2307      	movs	r3, #7
 80007a2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80007a8:	4619      	mov	r1, r3
 80007aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ae:	f000 f9ff 	bl	8000bb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80007b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007b6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c0:	2303      	movs	r3, #3
 80007c2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80007c4:	2303      	movs	r3, #3
 80007c6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80007cc:	4619      	mov	r1, r3
 80007ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d2:	f000 f9ed 	bl	8000bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007d6:	bf00      	nop
 80007d8:	3778      	adds	r7, #120	; 0x78
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40004400 	.word	0x40004400
 80007e4:	40021000 	.word	0x40021000

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <NMI_Handler+0x4>

080007ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <MemManage_Handler+0x4>

080007fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <BusFault_Handler+0x4>

08000800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <UsageFault_Handler+0x4>

08000806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000834:	f000 f892 	bl	800095c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}

0800083c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <SystemInit+0x20>)
 8000842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000846:	4a05      	ldr	r2, [pc, #20]	; (800085c <SystemInit+0x20>)
 8000848:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800084c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000860:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000898 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000864:	f7ff ffea 	bl	800083c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000868:	480c      	ldr	r0, [pc, #48]	; (800089c <LoopForever+0x6>)
  ldr r1, =_edata
 800086a:	490d      	ldr	r1, [pc, #52]	; (80008a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800086c:	4a0d      	ldr	r2, [pc, #52]	; (80008a4 <LoopForever+0xe>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000870:	e002      	b.n	8000878 <LoopCopyDataInit>

08000872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000876:	3304      	adds	r3, #4

08000878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800087c:	d3f9      	bcc.n	8000872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000880:	4c0a      	ldr	r4, [pc, #40]	; (80008ac <LoopForever+0x16>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000884:	e001      	b.n	800088a <LoopFillZerobss>

08000886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000888:	3204      	adds	r2, #4

0800088a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800088c:	d3fb      	bcc.n	8000886 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800088e:	f002 f8f9 	bl	8002a84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000892:	f7ff fe1d 	bl	80004d0 <main>

08000896 <LoopForever>:

LoopForever:
    b LoopForever
 8000896:	e7fe      	b.n	8000896 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000898:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800089c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008a4:	08002b4c 	.word	0x08002b4c
  ldr r2, =_sbss
 80008a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008ac:	200000b0 	.word	0x200000b0

080008b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008b0:	e7fe      	b.n	80008b0 <ADC1_IRQHandler>

080008b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008b8:	2300      	movs	r3, #0
 80008ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008bc:	2003      	movs	r0, #3
 80008be:	f000 f943 	bl	8000b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008c2:	2000      	movs	r0, #0
 80008c4:	f000 f80e 	bl	80008e4 <HAL_InitTick>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d002      	beq.n	80008d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	71fb      	strb	r3, [r7, #7]
 80008d2:	e001      	b.n	80008d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008d4:	f7ff fefa 	bl	80006cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008d8:	79fb      	ldrb	r3, [r7, #7]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008ec:	2300      	movs	r3, #0
 80008ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <HAL_InitTick+0x6c>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d023      	beq.n	8000940 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008f8:	4b16      	ldr	r3, [pc, #88]	; (8000954 <HAL_InitTick+0x70>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <HAL_InitTick+0x6c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	4619      	mov	r1, r3
 8000902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000906:	fbb3 f3f1 	udiv	r3, r3, r1
 800090a:	fbb2 f3f3 	udiv	r3, r2, r3
 800090e:	4618      	mov	r0, r3
 8000910:	f000 f941 	bl	8000b96 <HAL_SYSTICK_Config>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d10f      	bne.n	800093a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2b0f      	cmp	r3, #15
 800091e:	d809      	bhi.n	8000934 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000920:	2200      	movs	r2, #0
 8000922:	6879      	ldr	r1, [r7, #4]
 8000924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000928:	f000 f919 	bl	8000b5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800092c:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <HAL_InitTick+0x74>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6013      	str	r3, [r2, #0]
 8000932:	e007      	b.n	8000944 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000934:	2301      	movs	r3, #1
 8000936:	73fb      	strb	r3, [r7, #15]
 8000938:	e004      	b.n	8000944 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	73fb      	strb	r3, [r7, #15]
 800093e:	e001      	b.n	8000944 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000940:	2301      	movs	r3, #1
 8000942:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000944:	7bfb      	ldrb	r3, [r7, #15]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000008 	.word	0x20000008
 8000954:	20000000 	.word	0x20000000
 8000958:	20000004 	.word	0x20000004

0800095c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_IncTick+0x20>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_IncTick+0x24>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4413      	add	r3, r2
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <HAL_IncTick+0x24>)
 800096e:	6013      	str	r3, [r2, #0]
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000008 	.word	0x20000008
 8000980:	200000ac 	.word	0x200000ac

08000984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return uwTick;
 8000988:	4b03      	ldr	r3, [pc, #12]	; (8000998 <HAL_GetTick+0x14>)
 800098a:	681b      	ldr	r3, [r3, #0]
}
 800098c:	4618      	mov	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	200000ac 	.word	0x200000ac

0800099c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009a4:	f7ff ffee 	bl	8000984 <HAL_GetTick>
 80009a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009b4:	d005      	beq.n	80009c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <HAL_Delay+0x44>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	461a      	mov	r2, r3
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	4413      	add	r3, r2
 80009c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009c2:	bf00      	nop
 80009c4:	f7ff ffde 	bl	8000984 <HAL_GetTick>
 80009c8:	4602      	mov	r2, r0
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d8f7      	bhi.n	80009c4 <HAL_Delay+0x28>
  {
  }
}
 80009d4:	bf00      	nop
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000008 	.word	0x20000008

080009e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <__NVIC_SetPriorityGrouping+0x44>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a00:	4013      	ands	r3, r2
 8000a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a16:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <__NVIC_SetPriorityGrouping+0x44>)
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	60d3      	str	r3, [r2, #12]
}
 8000a1c:	bf00      	nop
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a30:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <__NVIC_GetPriorityGrouping+0x18>)
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	0a1b      	lsrs	r3, r3, #8
 8000a36:	f003 0307 	and.w	r3, r3, #7
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	6039      	str	r1, [r7, #0]
 8000a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	db0a      	blt.n	8000a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	490c      	ldr	r1, [pc, #48]	; (8000a94 <__NVIC_SetPriority+0x4c>)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	0112      	lsls	r2, r2, #4
 8000a68:	b2d2      	uxtb	r2, r2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a70:	e00a      	b.n	8000a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4908      	ldr	r1, [pc, #32]	; (8000a98 <__NVIC_SetPriority+0x50>)
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	f003 030f 	and.w	r3, r3, #15
 8000a7e:	3b04      	subs	r3, #4
 8000a80:	0112      	lsls	r2, r2, #4
 8000a82:	b2d2      	uxtb	r2, r2
 8000a84:	440b      	add	r3, r1
 8000a86:	761a      	strb	r2, [r3, #24]
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000e100 	.word	0xe000e100
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b089      	sub	sp, #36	; 0x24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	f1c3 0307 	rsb	r3, r3, #7
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	bf28      	it	cs
 8000aba:	2304      	movcs	r3, #4
 8000abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	2b06      	cmp	r3, #6
 8000ac4:	d902      	bls.n	8000acc <NVIC_EncodePriority+0x30>
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3b03      	subs	r3, #3
 8000aca:	e000      	b.n	8000ace <NVIC_EncodePriority+0x32>
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43da      	mvns	r2, r3
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	401a      	ands	r2, r3
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	fa01 f303 	lsl.w	r3, r1, r3
 8000aee:	43d9      	mvns	r1, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	4313      	orrs	r3, r2
         );
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3724      	adds	r7, #36	; 0x24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
	...

08000b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b14:	d301      	bcc.n	8000b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b16:	2301      	movs	r3, #1
 8000b18:	e00f      	b.n	8000b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <SysTick_Config+0x40>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b22:	210f      	movs	r1, #15
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b28:	f7ff ff8e 	bl	8000a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <SysTick_Config+0x40>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b32:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <SysTick_Config+0x40>)
 8000b34:	2207      	movs	r2, #7
 8000b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	e000e010 	.word	0xe000e010

08000b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ff47 	bl	80009e4 <__NVIC_SetPriorityGrouping>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b086      	sub	sp, #24
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4603      	mov	r3, r0
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
 8000b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b70:	f7ff ff5c 	bl	8000a2c <__NVIC_GetPriorityGrouping>
 8000b74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	68b9      	ldr	r1, [r7, #8]
 8000b7a:	6978      	ldr	r0, [r7, #20]
 8000b7c:	f7ff ff8e 	bl	8000a9c <NVIC_EncodePriority>
 8000b80:	4602      	mov	r2, r0
 8000b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b86:	4611      	mov	r1, r2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff5d 	bl	8000a48 <__NVIC_SetPriority>
}
 8000b8e:	bf00      	nop
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff ffb0 	bl	8000b04 <SysTick_Config>
 8000ba4:	4603      	mov	r3, r0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b087      	sub	sp, #28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bbe:	e148      	b.n	8000e52 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f000 813a 	beq.w	8000e4c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f003 0303 	and.w	r3, r3, #3
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d005      	beq.n	8000bf0 <HAL_GPIO_Init+0x40>
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 0303 	and.w	r3, r3, #3
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d130      	bne.n	8000c52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	43db      	mvns	r3, r3
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4013      	ands	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	68da      	ldr	r2, [r3, #12]
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c26:	2201      	movs	r2, #1
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	091b      	lsrs	r3, r3, #4
 8000c3c:	f003 0201 	and.w	r2, r3, #1
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 0303 	and.w	r3, r3, #3
 8000c5a:	2b03      	cmp	r3, #3
 8000c5c:	d017      	beq.n	8000c8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	2203      	movs	r2, #3
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	689a      	ldr	r2, [r3, #8]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f003 0303 	and.w	r3, r3, #3
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d123      	bne.n	8000ce2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	08da      	lsrs	r2, r3, #3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	3208      	adds	r2, #8
 8000ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	220f      	movs	r2, #15
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	691a      	ldr	r2, [r3, #16]
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	f003 0307 	and.w	r3, r3, #7
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	08da      	lsrs	r2, r3, #3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3208      	adds	r2, #8
 8000cdc:	6939      	ldr	r1, [r7, #16]
 8000cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	2203      	movs	r2, #3
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 0203 	and.w	r2, r3, #3
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f000 8094 	beq.w	8000e4c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d24:	4b52      	ldr	r3, [pc, #328]	; (8000e70 <HAL_GPIO_Init+0x2c0>)
 8000d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d28:	4a51      	ldr	r2, [pc, #324]	; (8000e70 <HAL_GPIO_Init+0x2c0>)
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	6613      	str	r3, [r2, #96]	; 0x60
 8000d30:	4b4f      	ldr	r3, [pc, #316]	; (8000e70 <HAL_GPIO_Init+0x2c0>)
 8000d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d3c:	4a4d      	ldr	r2, [pc, #308]	; (8000e74 <HAL_GPIO_Init+0x2c4>)
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	089b      	lsrs	r3, r3, #2
 8000d42:	3302      	adds	r3, #2
 8000d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	220f      	movs	r2, #15
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d66:	d00d      	beq.n	8000d84 <HAL_GPIO_Init+0x1d4>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a43      	ldr	r2, [pc, #268]	; (8000e78 <HAL_GPIO_Init+0x2c8>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d007      	beq.n	8000d80 <HAL_GPIO_Init+0x1d0>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a42      	ldr	r2, [pc, #264]	; (8000e7c <HAL_GPIO_Init+0x2cc>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d101      	bne.n	8000d7c <HAL_GPIO_Init+0x1cc>
 8000d78:	2302      	movs	r3, #2
 8000d7a:	e004      	b.n	8000d86 <HAL_GPIO_Init+0x1d6>
 8000d7c:	2307      	movs	r3, #7
 8000d7e:	e002      	b.n	8000d86 <HAL_GPIO_Init+0x1d6>
 8000d80:	2301      	movs	r3, #1
 8000d82:	e000      	b.n	8000d86 <HAL_GPIO_Init+0x1d6>
 8000d84:	2300      	movs	r3, #0
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	f002 0203 	and.w	r2, r2, #3
 8000d8c:	0092      	lsls	r2, r2, #2
 8000d8e:	4093      	lsls	r3, r2
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d96:	4937      	ldr	r1, [pc, #220]	; (8000e74 <HAL_GPIO_Init+0x2c4>)
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	089b      	lsrs	r3, r3, #2
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000da4:	4b36      	ldr	r3, [pc, #216]	; (8000e80 <HAL_GPIO_Init+0x2d0>)
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	43db      	mvns	r3, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d003      	beq.n	8000dc8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dc8:	4a2d      	ldr	r2, [pc, #180]	; (8000e80 <HAL_GPIO_Init+0x2d0>)
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000dce:	4b2c      	ldr	r3, [pc, #176]	; (8000e80 <HAL_GPIO_Init+0x2d0>)
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000df2:	4a23      	ldr	r2, [pc, #140]	; (8000e80 <HAL_GPIO_Init+0x2d0>)
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000df8:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <HAL_GPIO_Init+0x2d0>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e1c:	4a18      	ldr	r2, [pc, #96]	; (8000e80 <HAL_GPIO_Init+0x2d0>)
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HAL_GPIO_Init+0x2d0>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e46:	4a0e      	ldr	r2, [pc, #56]	; (8000e80 <HAL_GPIO_Init+0x2d0>)
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	fa22 f303 	lsr.w	r3, r2, r3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	f47f aeaf 	bne.w	8000bc0 <HAL_GPIO_Init+0x10>
  }
}
 8000e62:	bf00      	nop
 8000e64:	bf00      	nop
 8000e66:	371c      	adds	r7, #28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	40021000 	.word	0x40021000
 8000e74:	40010000 	.word	0x40010000
 8000e78:	48000400 	.word	0x48000400
 8000e7c:	48000800 	.word	0x48000800
 8000e80:	40010400 	.word	0x40010400

08000e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	807b      	strh	r3, [r7, #2]
 8000e90:	4613      	mov	r3, r2
 8000e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e94:	787b      	ldrb	r3, [r7, #1]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e9a:	887a      	ldrh	r2, [r7, #2]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ea0:	e002      	b.n	8000ea8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ea2:	887a      	ldrh	r2, [r7, #2]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	695b      	ldr	r3, [r3, #20]
 8000ec4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ec6:	887a      	ldrh	r2, [r7, #2]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	041a      	lsls	r2, r3, #16
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	43d9      	mvns	r1, r3
 8000ed2:	887b      	ldrh	r3, [r7, #2]
 8000ed4:	400b      	ands	r3, r1
 8000ed6:	431a      	orrs	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	619a      	str	r2, [r3, #24]
}
 8000edc:	bf00      	nop
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40007000 	.word	0x40007000

08000f08 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40007000 	.word	0x40007000

08000f24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f32:	d130      	bne.n	8000f96 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f34:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f40:	d038      	beq.n	8000fb4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f42:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f4a:	4a1e      	ldr	r2, [pc, #120]	; (8000fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f50:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f52:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2232      	movs	r2, #50	; 0x32
 8000f58:	fb02 f303 	mul.w	r3, r2, r3
 8000f5c:	4a1b      	ldr	r2, [pc, #108]	; (8000fcc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f62:	0c9b      	lsrs	r3, r3, #18
 8000f64:	3301      	adds	r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f68:	e002      	b.n	8000f70 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f7c:	d102      	bne.n	8000f84 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1f2      	bne.n	8000f6a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f84:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f90:	d110      	bne.n	8000fb4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e00f      	b.n	8000fb6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fa2:	d007      	beq.n	8000fb4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fa4:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fac:	4a05      	ldr	r2, [pc, #20]	; (8000fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	40007000 	.word	0x40007000
 8000fc8:	20000000 	.word	0x20000000
 8000fcc:	431bde83 	.word	0x431bde83

08000fd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d102      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	f000 bc02 	b.w	80017e8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fe4:	4b96      	ldr	r3, [pc, #600]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	f003 030c 	and.w	r3, r3, #12
 8000fec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fee:	4b94      	ldr	r3, [pc, #592]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0310 	and.w	r3, r3, #16
 8001000:	2b00      	cmp	r3, #0
 8001002:	f000 80e4 	beq.w	80011ce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d007      	beq.n	800101c <HAL_RCC_OscConfig+0x4c>
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	2b0c      	cmp	r3, #12
 8001010:	f040 808b 	bne.w	800112a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	2b01      	cmp	r3, #1
 8001018:	f040 8087 	bne.w	800112a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800101c:	4b88      	ldr	r3, [pc, #544]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0302 	and.w	r3, r3, #2
 8001024:	2b00      	cmp	r3, #0
 8001026:	d005      	beq.n	8001034 <HAL_RCC_OscConfig+0x64>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d101      	bne.n	8001034 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e3d9      	b.n	80017e8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a1a      	ldr	r2, [r3, #32]
 8001038:	4b81      	ldr	r3, [pc, #516]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0308 	and.w	r3, r3, #8
 8001040:	2b00      	cmp	r3, #0
 8001042:	d004      	beq.n	800104e <HAL_RCC_OscConfig+0x7e>
 8001044:	4b7e      	ldr	r3, [pc, #504]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800104c:	e005      	b.n	800105a <HAL_RCC_OscConfig+0x8a>
 800104e:	4b7c      	ldr	r3, [pc, #496]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 8001050:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001054:	091b      	lsrs	r3, r3, #4
 8001056:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800105a:	4293      	cmp	r3, r2
 800105c:	d223      	bcs.n	80010a6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a1b      	ldr	r3, [r3, #32]
 8001062:	4618      	mov	r0, r3
 8001064:	f000 fd8c 	bl	8001b80 <RCC_SetFlashLatencyFromMSIRange>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e3ba      	b.n	80017e8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001072:	4b73      	ldr	r3, [pc, #460]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a72      	ldr	r2, [pc, #456]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 8001078:	f043 0308 	orr.w	r3, r3, #8
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	4b70      	ldr	r3, [pc, #448]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a1b      	ldr	r3, [r3, #32]
 800108a:	496d      	ldr	r1, [pc, #436]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 800108c:	4313      	orrs	r3, r2
 800108e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001090:	4b6b      	ldr	r3, [pc, #428]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	69db      	ldr	r3, [r3, #28]
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	4968      	ldr	r1, [pc, #416]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 80010a0:	4313      	orrs	r3, r2
 80010a2:	604b      	str	r3, [r1, #4]
 80010a4:	e025      	b.n	80010f2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010a6:	4b66      	ldr	r3, [pc, #408]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a65      	ldr	r2, [pc, #404]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 80010ac:	f043 0308 	orr.w	r3, r3, #8
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	4b63      	ldr	r3, [pc, #396]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a1b      	ldr	r3, [r3, #32]
 80010be:	4960      	ldr	r1, [pc, #384]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 80010c0:	4313      	orrs	r3, r2
 80010c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010c4:	4b5e      	ldr	r3, [pc, #376]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69db      	ldr	r3, [r3, #28]
 80010d0:	021b      	lsls	r3, r3, #8
 80010d2:	495b      	ldr	r1, [pc, #364]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d109      	bne.n	80010f2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a1b      	ldr	r3, [r3, #32]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 fd4c 	bl	8001b80 <RCC_SetFlashLatencyFromMSIRange>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e37a      	b.n	80017e8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80010f2:	f000 fc81 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 80010f6:	4602      	mov	r2, r0
 80010f8:	4b51      	ldr	r3, [pc, #324]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	091b      	lsrs	r3, r3, #4
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	4950      	ldr	r1, [pc, #320]	; (8001244 <HAL_RCC_OscConfig+0x274>)
 8001104:	5ccb      	ldrb	r3, [r1, r3]
 8001106:	f003 031f 	and.w	r3, r3, #31
 800110a:	fa22 f303 	lsr.w	r3, r2, r3
 800110e:	4a4e      	ldr	r2, [pc, #312]	; (8001248 <HAL_RCC_OscConfig+0x278>)
 8001110:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001112:	4b4e      	ldr	r3, [pc, #312]	; (800124c <HAL_RCC_OscConfig+0x27c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fbe4 	bl	80008e4 <HAL_InitTick>
 800111c:	4603      	mov	r3, r0
 800111e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d052      	beq.n	80011cc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	e35e      	b.n	80017e8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d032      	beq.n	8001198 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001132:	4b43      	ldr	r3, [pc, #268]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a42      	ldr	r2, [pc, #264]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800113e:	f7ff fc21 	bl	8000984 <HAL_GetTick>
 8001142:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001144:	e008      	b.n	8001158 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001146:	f7ff fc1d 	bl	8000984 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e347      	b.n	80017e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001158:	4b39      	ldr	r3, [pc, #228]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0f0      	beq.n	8001146 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001164:	4b36      	ldr	r3, [pc, #216]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a35      	ldr	r2, [pc, #212]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 800116a:	f043 0308 	orr.w	r3, r3, #8
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	4b33      	ldr	r3, [pc, #204]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	4930      	ldr	r1, [pc, #192]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 800117e:	4313      	orrs	r3, r2
 8001180:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001182:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	021b      	lsls	r3, r3, #8
 8001190:	492b      	ldr	r1, [pc, #172]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 8001192:	4313      	orrs	r3, r2
 8001194:	604b      	str	r3, [r1, #4]
 8001196:	e01a      	b.n	80011ce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001198:	4b29      	ldr	r3, [pc, #164]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a28      	ldr	r2, [pc, #160]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 800119e:	f023 0301 	bic.w	r3, r3, #1
 80011a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011a4:	f7ff fbee 	bl	8000984 <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011ac:	f7ff fbea 	bl	8000984 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e314      	b.n	80017e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f0      	bne.n	80011ac <HAL_RCC_OscConfig+0x1dc>
 80011ca:	e000      	b.n	80011ce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d073      	beq.n	80012c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d005      	beq.n	80011ec <HAL_RCC_OscConfig+0x21c>
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	2b0c      	cmp	r3, #12
 80011e4:	d10e      	bne.n	8001204 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d10b      	bne.n	8001204 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d063      	beq.n	80012c0 <HAL_RCC_OscConfig+0x2f0>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d15f      	bne.n	80012c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e2f1      	b.n	80017e8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800120c:	d106      	bne.n	800121c <HAL_RCC_OscConfig+0x24c>
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a0b      	ldr	r2, [pc, #44]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 8001214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	e025      	b.n	8001268 <HAL_RCC_OscConfig+0x298>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001224:	d114      	bne.n	8001250 <HAL_RCC_OscConfig+0x280>
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 800122c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	4b03      	ldr	r3, [pc, #12]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a02      	ldr	r2, [pc, #8]	; (8001240 <HAL_RCC_OscConfig+0x270>)
 8001238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	e013      	b.n	8001268 <HAL_RCC_OscConfig+0x298>
 8001240:	40021000 	.word	0x40021000
 8001244:	08002af4 	.word	0x08002af4
 8001248:	20000000 	.word	0x20000000
 800124c:	20000004 	.word	0x20000004
 8001250:	4ba0      	ldr	r3, [pc, #640]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a9f      	ldr	r2, [pc, #636]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 8001256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	4b9d      	ldr	r3, [pc, #628]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a9c      	ldr	r2, [pc, #624]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 8001262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d013      	beq.n	8001298 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001270:	f7ff fb88 	bl	8000984 <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001278:	f7ff fb84 	bl	8000984 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b64      	cmp	r3, #100	; 0x64
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e2ae      	b.n	80017e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800128a:	4b92      	ldr	r3, [pc, #584]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f0      	beq.n	8001278 <HAL_RCC_OscConfig+0x2a8>
 8001296:	e014      	b.n	80012c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001298:	f7ff fb74 	bl	8000984 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a0:	f7ff fb70 	bl	8000984 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b64      	cmp	r3, #100	; 0x64
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e29a      	b.n	80017e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012b2:	4b88      	ldr	r3, [pc, #544]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f0      	bne.n	80012a0 <HAL_RCC_OscConfig+0x2d0>
 80012be:	e000      	b.n	80012c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d060      	beq.n	8001390 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	2b04      	cmp	r3, #4
 80012d2:	d005      	beq.n	80012e0 <HAL_RCC_OscConfig+0x310>
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	2b0c      	cmp	r3, #12
 80012d8:	d119      	bne.n	800130e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d116      	bne.n	800130e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012e0:	4b7c      	ldr	r3, [pc, #496]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d005      	beq.n	80012f8 <HAL_RCC_OscConfig+0x328>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d101      	bne.n	80012f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e277      	b.n	80017e8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f8:	4b76      	ldr	r3, [pc, #472]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	061b      	lsls	r3, r3, #24
 8001306:	4973      	ldr	r1, [pc, #460]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 8001308:	4313      	orrs	r3, r2
 800130a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800130c:	e040      	b.n	8001390 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d023      	beq.n	800135e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001316:	4b6f      	ldr	r3, [pc, #444]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a6e      	ldr	r2, [pc, #440]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 800131c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001322:	f7ff fb2f 	bl	8000984 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800132a:	f7ff fb2b 	bl	8000984 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e255      	b.n	80017e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800133c:	4b65      	ldr	r3, [pc, #404]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0f0      	beq.n	800132a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001348:	4b62      	ldr	r3, [pc, #392]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	061b      	lsls	r3, r3, #24
 8001356:	495f      	ldr	r1, [pc, #380]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 8001358:	4313      	orrs	r3, r2
 800135a:	604b      	str	r3, [r1, #4]
 800135c:	e018      	b.n	8001390 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800135e:	4b5d      	ldr	r3, [pc, #372]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a5c      	ldr	r2, [pc, #368]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 8001364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136a:	f7ff fb0b 	bl	8000984 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001372:	f7ff fb07 	bl	8000984 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e231      	b.n	80017e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001384:	4b53      	ldr	r3, [pc, #332]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1f0      	bne.n	8001372 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0308 	and.w	r3, r3, #8
 8001398:	2b00      	cmp	r3, #0
 800139a:	d03c      	beq.n	8001416 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d01c      	beq.n	80013de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013a4:	4b4b      	ldr	r3, [pc, #300]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 80013a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013aa:	4a4a      	ldr	r2, [pc, #296]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b4:	f7ff fae6 	bl	8000984 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013bc:	f7ff fae2 	bl	8000984 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e20c      	b.n	80017e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013ce:	4b41      	ldr	r3, [pc, #260]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 80013d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0ef      	beq.n	80013bc <HAL_RCC_OscConfig+0x3ec>
 80013dc:	e01b      	b.n	8001416 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013de:	4b3d      	ldr	r3, [pc, #244]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 80013e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013e4:	4a3b      	ldr	r2, [pc, #236]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 80013e6:	f023 0301 	bic.w	r3, r3, #1
 80013ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ee:	f7ff fac9 	bl	8000984 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013f6:	f7ff fac5 	bl	8000984 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e1ef      	b.n	80017e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001408:	4b32      	ldr	r3, [pc, #200]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 800140a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1ef      	bne.n	80013f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	2b00      	cmp	r3, #0
 8001420:	f000 80a6 	beq.w	8001570 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001424:	2300      	movs	r3, #0
 8001426:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001428:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 800142a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d10d      	bne.n	8001450 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001434:	4b27      	ldr	r3, [pc, #156]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 8001436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001438:	4a26      	ldr	r2, [pc, #152]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 800143a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800143e:	6593      	str	r3, [r2, #88]	; 0x58
 8001440:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 8001442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800144c:	2301      	movs	r3, #1
 800144e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001450:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <HAL_RCC_OscConfig+0x508>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001458:	2b00      	cmp	r3, #0
 800145a:	d118      	bne.n	800148e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800145c:	4b1e      	ldr	r3, [pc, #120]	; (80014d8 <HAL_RCC_OscConfig+0x508>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a1d      	ldr	r2, [pc, #116]	; (80014d8 <HAL_RCC_OscConfig+0x508>)
 8001462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001466:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001468:	f7ff fa8c 	bl	8000984 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001470:	f7ff fa88 	bl	8000984 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e1b2      	b.n	80017e8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <HAL_RCC_OscConfig+0x508>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0f0      	beq.n	8001470 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d108      	bne.n	80014a8 <HAL_RCC_OscConfig+0x4d8>
 8001496:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 8001498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800149c:	4a0d      	ldr	r2, [pc, #52]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014a6:	e029      	b.n	80014fc <HAL_RCC_OscConfig+0x52c>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	2b05      	cmp	r3, #5
 80014ae:	d115      	bne.n	80014dc <HAL_RCC_OscConfig+0x50c>
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 80014b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014b6:	4a07      	ldr	r2, [pc, #28]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 80014c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014c6:	4a03      	ldr	r2, [pc, #12]	; (80014d4 <HAL_RCC_OscConfig+0x504>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014d0:	e014      	b.n	80014fc <HAL_RCC_OscConfig+0x52c>
 80014d2:	bf00      	nop
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40007000 	.word	0x40007000
 80014dc:	4b9a      	ldr	r3, [pc, #616]	; (8001748 <HAL_RCC_OscConfig+0x778>)
 80014de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014e2:	4a99      	ldr	r2, [pc, #612]	; (8001748 <HAL_RCC_OscConfig+0x778>)
 80014e4:	f023 0301 	bic.w	r3, r3, #1
 80014e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014ec:	4b96      	ldr	r3, [pc, #600]	; (8001748 <HAL_RCC_OscConfig+0x778>)
 80014ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014f2:	4a95      	ldr	r2, [pc, #596]	; (8001748 <HAL_RCC_OscConfig+0x778>)
 80014f4:	f023 0304 	bic.w	r3, r3, #4
 80014f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d016      	beq.n	8001532 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001504:	f7ff fa3e 	bl	8000984 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800150a:	e00a      	b.n	8001522 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800150c:	f7ff fa3a 	bl	8000984 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	f241 3288 	movw	r2, #5000	; 0x1388
 800151a:	4293      	cmp	r3, r2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e162      	b.n	80017e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001522:	4b89      	ldr	r3, [pc, #548]	; (8001748 <HAL_RCC_OscConfig+0x778>)
 8001524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0ed      	beq.n	800150c <HAL_RCC_OscConfig+0x53c>
 8001530:	e015      	b.n	800155e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001532:	f7ff fa27 	bl	8000984 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001538:	e00a      	b.n	8001550 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800153a:	f7ff fa23 	bl	8000984 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	f241 3288 	movw	r2, #5000	; 0x1388
 8001548:	4293      	cmp	r3, r2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e14b      	b.n	80017e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001550:	4b7d      	ldr	r3, [pc, #500]	; (8001748 <HAL_RCC_OscConfig+0x778>)
 8001552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1ed      	bne.n	800153a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800155e:	7ffb      	ldrb	r3, [r7, #31]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d105      	bne.n	8001570 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001564:	4b78      	ldr	r3, [pc, #480]	; (8001748 <HAL_RCC_OscConfig+0x778>)
 8001566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001568:	4a77      	ldr	r2, [pc, #476]	; (8001748 <HAL_RCC_OscConfig+0x778>)
 800156a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800156e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0320 	and.w	r3, r3, #32
 8001578:	2b00      	cmp	r3, #0
 800157a:	d03c      	beq.n	80015f6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001580:	2b00      	cmp	r3, #0
 8001582:	d01c      	beq.n	80015be <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001584:	4b70      	ldr	r3, [pc, #448]	; (8001748 <HAL_RCC_OscConfig+0x778>)
 8001586:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800158a:	4a6f      	ldr	r2, [pc, #444]	; (8001748 <HAL_RCC_OscConfig+0x778>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001594:	f7ff f9f6 	bl	8000984 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800159c:	f7ff f9f2 	bl	8000984 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e11c      	b.n	80017e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015ae:	4b66      	ldr	r3, [pc, #408]	; (8001748 <HAL_RCC_OscConfig+0x778>)
 80015b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0ef      	beq.n	800159c <HAL_RCC_OscConfig+0x5cc>
 80015bc:	e01b      	b.n	80015f6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015be:	4b62      	ldr	r3, [pc, #392]	; (8001748 <HAL_RCC_OscConfig+0x778>)
 80015c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015c4:	4a60      	ldr	r2, [pc, #384]	; (8001748 <HAL_RCC_OscConfig+0x778>)
 80015c6:	f023 0301 	bic.w	r3, r3, #1
 80015ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ce:	f7ff f9d9 	bl	8000984 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015d6:	f7ff f9d5 	bl	8000984 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e0ff      	b.n	80017e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015e8:	4b57      	ldr	r3, [pc, #348]	; (8001748 <HAL_RCC_OscConfig+0x778>)
 80015ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1ef      	bne.n	80015d6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 80f3 	beq.w	80017e6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001604:	2b02      	cmp	r3, #2
 8001606:	f040 80c9 	bne.w	800179c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800160a:	4b4f      	ldr	r3, [pc, #316]	; (8001748 <HAL_RCC_OscConfig+0x778>)
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f003 0203 	and.w	r2, r3, #3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161a:	429a      	cmp	r2, r3
 800161c:	d12c      	bne.n	8001678 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001628:	3b01      	subs	r3, #1
 800162a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800162c:	429a      	cmp	r2, r3
 800162e:	d123      	bne.n	8001678 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800163a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800163c:	429a      	cmp	r2, r3
 800163e:	d11b      	bne.n	8001678 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800164c:	429a      	cmp	r2, r3
 800164e:	d113      	bne.n	8001678 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800165a:	085b      	lsrs	r3, r3, #1
 800165c:	3b01      	subs	r3, #1
 800165e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001660:	429a      	cmp	r2, r3
 8001662:	d109      	bne.n	8001678 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	085b      	lsrs	r3, r3, #1
 8001670:	3b01      	subs	r3, #1
 8001672:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001674:	429a      	cmp	r2, r3
 8001676:	d06b      	beq.n	8001750 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	2b0c      	cmp	r3, #12
 800167c:	d062      	beq.n	8001744 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800167e:	4b32      	ldr	r3, [pc, #200]	; (8001748 <HAL_RCC_OscConfig+0x778>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e0ac      	b.n	80017e8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800168e:	4b2e      	ldr	r3, [pc, #184]	; (8001748 <HAL_RCC_OscConfig+0x778>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a2d      	ldr	r2, [pc, #180]	; (8001748 <HAL_RCC_OscConfig+0x778>)
 8001694:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001698:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800169a:	f7ff f973 	bl	8000984 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a2:	f7ff f96f 	bl	8000984 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e099      	b.n	80017e8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016b4:	4b24      	ldr	r3, [pc, #144]	; (8001748 <HAL_RCC_OscConfig+0x778>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f0      	bne.n	80016a2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016c0:	4b21      	ldr	r3, [pc, #132]	; (8001748 <HAL_RCC_OscConfig+0x778>)
 80016c2:	68da      	ldr	r2, [r3, #12]
 80016c4:	4b21      	ldr	r3, [pc, #132]	; (800174c <HAL_RCC_OscConfig+0x77c>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016d0:	3a01      	subs	r2, #1
 80016d2:	0112      	lsls	r2, r2, #4
 80016d4:	4311      	orrs	r1, r2
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016da:	0212      	lsls	r2, r2, #8
 80016dc:	4311      	orrs	r1, r2
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80016e2:	0852      	lsrs	r2, r2, #1
 80016e4:	3a01      	subs	r2, #1
 80016e6:	0552      	lsls	r2, r2, #21
 80016e8:	4311      	orrs	r1, r2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016ee:	0852      	lsrs	r2, r2, #1
 80016f0:	3a01      	subs	r2, #1
 80016f2:	0652      	lsls	r2, r2, #25
 80016f4:	4311      	orrs	r1, r2
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80016fa:	06d2      	lsls	r2, r2, #27
 80016fc:	430a      	orrs	r2, r1
 80016fe:	4912      	ldr	r1, [pc, #72]	; (8001748 <HAL_RCC_OscConfig+0x778>)
 8001700:	4313      	orrs	r3, r2
 8001702:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001704:	4b10      	ldr	r3, [pc, #64]	; (8001748 <HAL_RCC_OscConfig+0x778>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a0f      	ldr	r2, [pc, #60]	; (8001748 <HAL_RCC_OscConfig+0x778>)
 800170a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800170e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <HAL_RCC_OscConfig+0x778>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	4a0c      	ldr	r2, [pc, #48]	; (8001748 <HAL_RCC_OscConfig+0x778>)
 8001716:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800171a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800171c:	f7ff f932 	bl	8000984 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001724:	f7ff f92e 	bl	8000984 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e058      	b.n	80017e8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001736:	4b04      	ldr	r3, [pc, #16]	; (8001748 <HAL_RCC_OscConfig+0x778>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f0      	beq.n	8001724 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001742:	e050      	b.n	80017e6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e04f      	b.n	80017e8 <HAL_RCC_OscConfig+0x818>
 8001748:	40021000 	.word	0x40021000
 800174c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001750:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <HAL_RCC_OscConfig+0x820>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d144      	bne.n	80017e6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800175c:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <HAL_RCC_OscConfig+0x820>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a23      	ldr	r2, [pc, #140]	; (80017f0 <HAL_RCC_OscConfig+0x820>)
 8001762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001766:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001768:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <HAL_RCC_OscConfig+0x820>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	4a20      	ldr	r2, [pc, #128]	; (80017f0 <HAL_RCC_OscConfig+0x820>)
 800176e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001772:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001774:	f7ff f906 	bl	8000984 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177c:	f7ff f902 	bl	8000984 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e02c      	b.n	80017e8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800178e:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <HAL_RCC_OscConfig+0x820>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0x7ac>
 800179a:	e024      	b.n	80017e6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	2b0c      	cmp	r3, #12
 80017a0:	d01f      	beq.n	80017e2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a2:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <HAL_RCC_OscConfig+0x820>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <HAL_RCC_OscConfig+0x820>)
 80017a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ae:	f7ff f8e9 	bl	8000984 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b6:	f7ff f8e5 	bl	8000984 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e00f      	b.n	80017e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_RCC_OscConfig+0x820>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1f0      	bne.n	80017b6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_RCC_OscConfig+0x820>)
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	4905      	ldr	r1, [pc, #20]	; (80017f0 <HAL_RCC_OscConfig+0x820>)
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_RCC_OscConfig+0x824>)
 80017dc:	4013      	ands	r3, r2
 80017de:	60cb      	str	r3, [r1, #12]
 80017e0:	e001      	b.n	80017e6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3720      	adds	r7, #32
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40021000 	.word	0x40021000
 80017f4:	feeefffc 	.word	0xfeeefffc

080017f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e0e7      	b.n	80019dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800180c:	4b75      	ldr	r3, [pc, #468]	; (80019e4 <HAL_RCC_ClockConfig+0x1ec>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d910      	bls.n	800183c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181a:	4b72      	ldr	r3, [pc, #456]	; (80019e4 <HAL_RCC_ClockConfig+0x1ec>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 0207 	bic.w	r2, r3, #7
 8001822:	4970      	ldr	r1, [pc, #448]	; (80019e4 <HAL_RCC_ClockConfig+0x1ec>)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	4b6e      	ldr	r3, [pc, #440]	; (80019e4 <HAL_RCC_ClockConfig+0x1ec>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0cf      	b.n	80019dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d010      	beq.n	800186a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	4b66      	ldr	r3, [pc, #408]	; (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001854:	429a      	cmp	r2, r3
 8001856:	d908      	bls.n	800186a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001858:	4b63      	ldr	r3, [pc, #396]	; (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	4960      	ldr	r1, [pc, #384]	; (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001866:	4313      	orrs	r3, r2
 8001868:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d04c      	beq.n	8001910 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b03      	cmp	r3, #3
 800187c:	d107      	bne.n	800188e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800187e:	4b5a      	ldr	r3, [pc, #360]	; (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d121      	bne.n	80018ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e0a6      	b.n	80019dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d107      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001896:	4b54      	ldr	r3, [pc, #336]	; (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d115      	bne.n	80018ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e09a      	b.n	80019dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d107      	bne.n	80018be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018ae:	4b4e      	ldr	r3, [pc, #312]	; (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d109      	bne.n	80018ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e08e      	b.n	80019dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018be:	4b4a      	ldr	r3, [pc, #296]	; (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e086      	b.n	80019dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018ce:	4b46      	ldr	r3, [pc, #280]	; (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f023 0203 	bic.w	r2, r3, #3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	4943      	ldr	r1, [pc, #268]	; (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018e0:	f7ff f850 	bl	8000984 <HAL_GetTick>
 80018e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e6:	e00a      	b.n	80018fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e8:	f7ff f84c 	bl	8000984 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e06e      	b.n	80019dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fe:	4b3a      	ldr	r3, [pc, #232]	; (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 020c 	and.w	r2, r3, #12
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	429a      	cmp	r2, r3
 800190e:	d1eb      	bne.n	80018e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d010      	beq.n	800193e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	4b31      	ldr	r3, [pc, #196]	; (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001928:	429a      	cmp	r2, r3
 800192a:	d208      	bcs.n	800193e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800192c:	4b2e      	ldr	r3, [pc, #184]	; (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	492b      	ldr	r1, [pc, #172]	; (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 800193a:	4313      	orrs	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800193e:	4b29      	ldr	r3, [pc, #164]	; (80019e4 <HAL_RCC_ClockConfig+0x1ec>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d210      	bcs.n	800196e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194c:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <HAL_RCC_ClockConfig+0x1ec>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f023 0207 	bic.w	r2, r3, #7
 8001954:	4923      	ldr	r1, [pc, #140]	; (80019e4 <HAL_RCC_ClockConfig+0x1ec>)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	4313      	orrs	r3, r2
 800195a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195c:	4b21      	ldr	r3, [pc, #132]	; (80019e4 <HAL_RCC_ClockConfig+0x1ec>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d001      	beq.n	800196e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e036      	b.n	80019dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	2b00      	cmp	r3, #0
 8001978:	d008      	beq.n	800198c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800197a:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	4918      	ldr	r1, [pc, #96]	; (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001988:	4313      	orrs	r3, r2
 800198a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	2b00      	cmp	r3, #0
 8001996:	d009      	beq.n	80019ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001998:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	4910      	ldr	r1, [pc, #64]	; (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019ac:	f000 f824 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 80019b0:	4602      	mov	r2, r0
 80019b2:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	091b      	lsrs	r3, r3, #4
 80019b8:	f003 030f 	and.w	r3, r3, #15
 80019bc:	490b      	ldr	r1, [pc, #44]	; (80019ec <HAL_RCC_ClockConfig+0x1f4>)
 80019be:	5ccb      	ldrb	r3, [r1, r3]
 80019c0:	f003 031f 	and.w	r3, r3, #31
 80019c4:	fa22 f303 	lsr.w	r3, r2, r3
 80019c8:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <HAL_RCC_ClockConfig+0x1f8>)
 80019ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_RCC_ClockConfig+0x1fc>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7fe ff87 	bl	80008e4 <HAL_InitTick>
 80019d6:	4603      	mov	r3, r0
 80019d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80019da:	7afb      	ldrb	r3, [r7, #11]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40022000 	.word	0x40022000
 80019e8:	40021000 	.word	0x40021000
 80019ec:	08002af4 	.word	0x08002af4
 80019f0:	20000000 	.word	0x20000000
 80019f4:	20000004 	.word	0x20000004

080019f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	; 0x24
 80019fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a06:	4b3e      	ldr	r3, [pc, #248]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
 8001a0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a10:	4b3b      	ldr	r3, [pc, #236]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <HAL_RCC_GetSysClockFreq+0x34>
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	2b0c      	cmp	r3, #12
 8001a24:	d121      	bne.n	8001a6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d11e      	bne.n	8001a6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a2c:	4b34      	ldr	r3, [pc, #208]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d107      	bne.n	8001a48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a38:	4b31      	ldr	r3, [pc, #196]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a3e:	0a1b      	lsrs	r3, r3, #8
 8001a40:	f003 030f 	and.w	r3, r3, #15
 8001a44:	61fb      	str	r3, [r7, #28]
 8001a46:	e005      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a48:	4b2d      	ldr	r3, [pc, #180]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a54:	4a2b      	ldr	r2, [pc, #172]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10d      	bne.n	8001a80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a68:	e00a      	b.n	8001a80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d102      	bne.n	8001a76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a70:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a72:	61bb      	str	r3, [r7, #24]
 8001a74:	e004      	b.n	8001a80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a7c:	4b23      	ldr	r3, [pc, #140]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x114>)
 8001a7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	2b0c      	cmp	r3, #12
 8001a84:	d134      	bne.n	8001af0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a86:	4b1e      	ldr	r3, [pc, #120]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d003      	beq.n	8001a9e <HAL_RCC_GetSysClockFreq+0xa6>
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d003      	beq.n	8001aa4 <HAL_RCC_GetSysClockFreq+0xac>
 8001a9c:	e005      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x110>)
 8001aa0:	617b      	str	r3, [r7, #20]
      break;
 8001aa2:	e005      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001aa4:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x114>)
 8001aa6:	617b      	str	r3, [r7, #20]
      break;
 8001aa8:	e002      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	617b      	str	r3, [r7, #20]
      break;
 8001aae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ab0:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	091b      	lsrs	r3, r3, #4
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	3301      	adds	r3, #1
 8001abc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	0a1b      	lsrs	r3, r3, #8
 8001ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	fb03 f202 	mul.w	r2, r3, r2
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	0e5b      	lsrs	r3, r3, #25
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001af0:	69bb      	ldr	r3, [r7, #24]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3724      	adds	r7, #36	; 0x24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000
 8001b04:	08002b0c 	.word	0x08002b0c
 8001b08:	00f42400 	.word	0x00f42400
 8001b0c:	007a1200 	.word	0x007a1200

08001b10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000000 	.word	0x20000000

08001b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b2c:	f7ff fff0 	bl	8001b10 <HAL_RCC_GetHCLKFreq>
 8001b30:	4602      	mov	r2, r0
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	0a1b      	lsrs	r3, r3, #8
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	4904      	ldr	r1, [pc, #16]	; (8001b50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b3e:	5ccb      	ldrb	r3, [r1, r3]
 8001b40:	f003 031f 	and.w	r3, r3, #31
 8001b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	08002b04 	.word	0x08002b04

08001b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b58:	f7ff ffda 	bl	8001b10 <HAL_RCC_GetHCLKFreq>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	0adb      	lsrs	r3, r3, #11
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	4904      	ldr	r1, [pc, #16]	; (8001b7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b6a:	5ccb      	ldrb	r3, [r1, r3]
 8001b6c:	f003 031f 	and.w	r3, r3, #31
 8001b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	08002b04 	.word	0x08002b04

08001b80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b88:	2300      	movs	r3, #0
 8001b8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b8c:	4b2a      	ldr	r3, [pc, #168]	; (8001c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b98:	f7ff f9b6 	bl	8000f08 <HAL_PWREx_GetVoltageRange>
 8001b9c:	6178      	str	r0, [r7, #20]
 8001b9e:	e014      	b.n	8001bca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ba0:	4b25      	ldr	r3, [pc, #148]	; (8001c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba4:	4a24      	ldr	r2, [pc, #144]	; (8001c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001baa:	6593      	str	r3, [r2, #88]	; 0x58
 8001bac:	4b22      	ldr	r3, [pc, #136]	; (8001c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001bb8:	f7ff f9a6 	bl	8000f08 <HAL_PWREx_GetVoltageRange>
 8001bbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001bbe:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc2:	4a1d      	ldr	r2, [pc, #116]	; (8001c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bd0:	d10b      	bne.n	8001bea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b80      	cmp	r3, #128	; 0x80
 8001bd6:	d919      	bls.n	8001c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2ba0      	cmp	r3, #160	; 0xa0
 8001bdc:	d902      	bls.n	8001be4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bde:	2302      	movs	r3, #2
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	e013      	b.n	8001c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001be4:	2301      	movs	r3, #1
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	e010      	b.n	8001c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b80      	cmp	r3, #128	; 0x80
 8001bee:	d902      	bls.n	8001bf6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	e00a      	b.n	8001c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b80      	cmp	r3, #128	; 0x80
 8001bfa:	d102      	bne.n	8001c02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	e004      	b.n	8001c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b70      	cmp	r3, #112	; 0x70
 8001c06:	d101      	bne.n	8001c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c08:	2301      	movs	r3, #1
 8001c0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f023 0207 	bic.w	r2, r3, #7
 8001c14:	4909      	ldr	r1, [pc, #36]	; (8001c3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c1c:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d001      	beq.n	8001c2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40022000 	.word	0x40022000

08001c40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c48:	2300      	movs	r3, #0
 8001c4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d031      	beq.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001c64:	d01a      	beq.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001c66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001c6a:	d814      	bhi.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d009      	beq.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001c70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c74:	d10f      	bne.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001c76:	4b5d      	ldr	r3, [pc, #372]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	4a5c      	ldr	r2, [pc, #368]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c80:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c82:	e00c      	b.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3304      	adds	r3, #4
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 f9de 	bl	800204c <RCCEx_PLLSAI1_Config>
 8001c90:	4603      	mov	r3, r0
 8001c92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c94:	e003      	b.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	74fb      	strb	r3, [r7, #19]
      break;
 8001c9a:	e000      	b.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001c9e:	7cfb      	ldrb	r3, [r7, #19]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10b      	bne.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ca4:	4b51      	ldr	r3, [pc, #324]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001caa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb2:	494e      	ldr	r1, [pc, #312]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001cba:	e001      	b.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001cbc:	7cfb      	ldrb	r3, [r7, #19]
 8001cbe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 809e 	beq.w	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001cd2:	4b46      	ldr	r3, [pc, #280]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00d      	beq.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce8:	4b40      	ldr	r3, [pc, #256]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cec:	4a3f      	ldr	r2, [pc, #252]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8001cf4:	4b3d      	ldr	r3, [pc, #244]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d00:	2301      	movs	r3, #1
 8001d02:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d04:	4b3a      	ldr	r3, [pc, #232]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a39      	ldr	r2, [pc, #228]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d10:	f7fe fe38 	bl	8000984 <HAL_GetTick>
 8001d14:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d16:	e009      	b.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d18:	f7fe fe34 	bl	8000984 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d902      	bls.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	74fb      	strb	r3, [r7, #19]
        break;
 8001d2a:	e005      	b.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d2c:	4b30      	ldr	r3, [pc, #192]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0ef      	beq.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001d38:	7cfb      	ldrb	r3, [r7, #19]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d15a      	bne.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d3e:	4b2b      	ldr	r3, [pc, #172]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d48:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d01e      	beq.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d019      	beq.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d5a:	4b24      	ldr	r3, [pc, #144]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d64:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d66:	4b21      	ldr	r3, [pc, #132]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6c:	4a1f      	ldr	r2, [pc, #124]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d76:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7c:	4a1b      	ldr	r2, [pc, #108]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d86:	4a19      	ldr	r2, [pc, #100]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d016      	beq.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7fe fdf4 	bl	8000984 <HAL_GetTick>
 8001d9c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d9e:	e00b      	b.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da0:	f7fe fdf0 	bl	8000984 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d902      	bls.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	74fb      	strb	r3, [r7, #19]
            break;
 8001db6:	e006      	b.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0ec      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001dc6:	7cfb      	ldrb	r3, [r7, #19]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10b      	bne.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dda:	4904      	ldr	r1, [pc, #16]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001de2:	e009      	b.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001de4:	7cfb      	ldrb	r3, [r7, #19]
 8001de6:	74bb      	strb	r3, [r7, #18]
 8001de8:	e006      	b.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001dea:	bf00      	nop
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001df4:	7cfb      	ldrb	r3, [r7, #19]
 8001df6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001df8:	7c7b      	ldrb	r3, [r7, #17]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d105      	bne.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dfe:	4b8a      	ldr	r3, [pc, #552]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e02:	4a89      	ldr	r2, [pc, #548]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00a      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e16:	4b84      	ldr	r3, [pc, #528]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e1c:	f023 0203 	bic.w	r2, r3, #3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	4980      	ldr	r1, [pc, #512]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00a      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e38:	4b7b      	ldr	r3, [pc, #492]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e3e:	f023 020c 	bic.w	r2, r3, #12
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	4978      	ldr	r1, [pc, #480]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0320 	and.w	r3, r3, #32
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00a      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e5a:	4b73      	ldr	r3, [pc, #460]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e60:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	496f      	ldr	r1, [pc, #444]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00a      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e7c:	4b6a      	ldr	r3, [pc, #424]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e82:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8a:	4967      	ldr	r1, [pc, #412]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00a      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e9e:	4b62      	ldr	r3, [pc, #392]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eac:	495e      	ldr	r1, [pc, #376]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00a      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ec0:	4b59      	ldr	r3, [pc, #356]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ece:	4956      	ldr	r1, [pc, #344]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00a      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ee2:	4b51      	ldr	r3, [pc, #324]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	494d      	ldr	r1, [pc, #308]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d028      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f04:	4b48      	ldr	r3, [pc, #288]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	4945      	ldr	r1, [pc, #276]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f22:	d106      	bne.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f24:	4b40      	ldr	r3, [pc, #256]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	4a3f      	ldr	r2, [pc, #252]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f2e:	60d3      	str	r3, [r2, #12]
 8001f30:	e011      	b.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f3a:	d10c      	bne.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3304      	adds	r3, #4
 8001f40:	2101      	movs	r1, #1
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 f882 	bl	800204c <RCCEx_PLLSAI1_Config>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001f4c:	7cfb      	ldrb	r3, [r7, #19]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8001f52:	7cfb      	ldrb	r3, [r7, #19]
 8001f54:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d028      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f62:	4b31      	ldr	r3, [pc, #196]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f70:	492d      	ldr	r1, [pc, #180]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f80:	d106      	bne.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f82:	4b29      	ldr	r3, [pc, #164]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	4a28      	ldr	r2, [pc, #160]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f8c:	60d3      	str	r3, [r2, #12]
 8001f8e:	e011      	b.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f98:	d10c      	bne.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 f853 	bl	800204c <RCCEx_PLLSAI1_Config>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001faa:	7cfb      	ldrb	r3, [r7, #19]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8001fb0:	7cfb      	ldrb	r3, [r7, #19]
 8001fb2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d01c      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fc0:	4b19      	ldr	r3, [pc, #100]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fce:	4916      	ldr	r1, [pc, #88]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fde:	d10c      	bne.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	2102      	movs	r1, #2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 f830 	bl	800204c <RCCEx_PLLSAI1_Config>
 8001fec:	4603      	mov	r3, r0
 8001fee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001ff0:	7cfb      	ldrb	r3, [r7, #19]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8001ff6:	7cfb      	ldrb	r3, [r7, #19]
 8001ff8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00a      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002006:	4b08      	ldr	r3, [pc, #32]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002014:	4904      	ldr	r1, [pc, #16]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002016:	4313      	orrs	r3, r2
 8002018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800201c:	7cbb      	ldrb	r3, [r7, #18]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40021000 	.word	0x40021000

0800202c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a04      	ldr	r2, [pc, #16]	; (8002048 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002036:	f043 0304 	orr.w	r3, r3, #4
 800203a:	6013      	str	r3, [r2, #0]
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000

0800204c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800205a:	4b74      	ldr	r3, [pc, #464]	; (800222c <RCCEx_PLLSAI1_Config+0x1e0>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d018      	beq.n	8002098 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002066:	4b71      	ldr	r3, [pc, #452]	; (800222c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	f003 0203 	and.w	r2, r3, #3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d10d      	bne.n	8002092 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
       ||
 800207a:	2b00      	cmp	r3, #0
 800207c:	d009      	beq.n	8002092 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800207e:	4b6b      	ldr	r3, [pc, #428]	; (800222c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	091b      	lsrs	r3, r3, #4
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	1c5a      	adds	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
       ||
 800208e:	429a      	cmp	r2, r3
 8002090:	d047      	beq.n	8002122 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	73fb      	strb	r3, [r7, #15]
 8002096:	e044      	b.n	8002122 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b03      	cmp	r3, #3
 800209e:	d018      	beq.n	80020d2 <RCCEx_PLLSAI1_Config+0x86>
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d825      	bhi.n	80020f0 <RCCEx_PLLSAI1_Config+0xa4>
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d002      	beq.n	80020ae <RCCEx_PLLSAI1_Config+0x62>
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d009      	beq.n	80020c0 <RCCEx_PLLSAI1_Config+0x74>
 80020ac:	e020      	b.n	80020f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80020ae:	4b5f      	ldr	r3, [pc, #380]	; (800222c <RCCEx_PLLSAI1_Config+0x1e0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d11d      	bne.n	80020f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020be:	e01a      	b.n	80020f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80020c0:	4b5a      	ldr	r3, [pc, #360]	; (800222c <RCCEx_PLLSAI1_Config+0x1e0>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d116      	bne.n	80020fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020d0:	e013      	b.n	80020fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80020d2:	4b56      	ldr	r3, [pc, #344]	; (800222c <RCCEx_PLLSAI1_Config+0x1e0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10f      	bne.n	80020fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80020de:	4b53      	ldr	r3, [pc, #332]	; (800222c <RCCEx_PLLSAI1_Config+0x1e0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d109      	bne.n	80020fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80020ee:	e006      	b.n	80020fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	73fb      	strb	r3, [r7, #15]
      break;
 80020f4:	e004      	b.n	8002100 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80020f6:	bf00      	nop
 80020f8:	e002      	b.n	8002100 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80020fa:	bf00      	nop
 80020fc:	e000      	b.n	8002100 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80020fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10d      	bne.n	8002122 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002106:	4b49      	ldr	r3, [pc, #292]	; (800222c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6819      	ldr	r1, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	3b01      	subs	r3, #1
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	430b      	orrs	r3, r1
 800211c:	4943      	ldr	r1, [pc, #268]	; (800222c <RCCEx_PLLSAI1_Config+0x1e0>)
 800211e:	4313      	orrs	r3, r2
 8002120:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002122:	7bfb      	ldrb	r3, [r7, #15]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d17c      	bne.n	8002222 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002128:	4b40      	ldr	r3, [pc, #256]	; (800222c <RCCEx_PLLSAI1_Config+0x1e0>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a3f      	ldr	r2, [pc, #252]	; (800222c <RCCEx_PLLSAI1_Config+0x1e0>)
 800212e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002132:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002134:	f7fe fc26 	bl	8000984 <HAL_GetTick>
 8002138:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800213a:	e009      	b.n	8002150 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800213c:	f7fe fc22 	bl	8000984 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d902      	bls.n	8002150 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	73fb      	strb	r3, [r7, #15]
        break;
 800214e:	e005      	b.n	800215c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002150:	4b36      	ldr	r3, [pc, #216]	; (800222c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1ef      	bne.n	800213c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d15f      	bne.n	8002222 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d110      	bne.n	800218a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002168:	4b30      	ldr	r3, [pc, #192]	; (800222c <RCCEx_PLLSAI1_Config+0x1e0>)
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002170:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6892      	ldr	r2, [r2, #8]
 8002178:	0211      	lsls	r1, r2, #8
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68d2      	ldr	r2, [r2, #12]
 800217e:	06d2      	lsls	r2, r2, #27
 8002180:	430a      	orrs	r2, r1
 8002182:	492a      	ldr	r1, [pc, #168]	; (800222c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002184:	4313      	orrs	r3, r2
 8002186:	610b      	str	r3, [r1, #16]
 8002188:	e027      	b.n	80021da <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d112      	bne.n	80021b6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002190:	4b26      	ldr	r3, [pc, #152]	; (800222c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002198:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6892      	ldr	r2, [r2, #8]
 80021a0:	0211      	lsls	r1, r2, #8
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6912      	ldr	r2, [r2, #16]
 80021a6:	0852      	lsrs	r2, r2, #1
 80021a8:	3a01      	subs	r2, #1
 80021aa:	0552      	lsls	r2, r2, #21
 80021ac:	430a      	orrs	r2, r1
 80021ae:	491f      	ldr	r1, [pc, #124]	; (800222c <RCCEx_PLLSAI1_Config+0x1e0>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	610b      	str	r3, [r1, #16]
 80021b4:	e011      	b.n	80021da <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80021b6:	4b1d      	ldr	r3, [pc, #116]	; (800222c <RCCEx_PLLSAI1_Config+0x1e0>)
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80021be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6892      	ldr	r2, [r2, #8]
 80021c6:	0211      	lsls	r1, r2, #8
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	6952      	ldr	r2, [r2, #20]
 80021cc:	0852      	lsrs	r2, r2, #1
 80021ce:	3a01      	subs	r2, #1
 80021d0:	0652      	lsls	r2, r2, #25
 80021d2:	430a      	orrs	r2, r1
 80021d4:	4915      	ldr	r1, [pc, #84]	; (800222c <RCCEx_PLLSAI1_Config+0x1e0>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80021da:	4b14      	ldr	r3, [pc, #80]	; (800222c <RCCEx_PLLSAI1_Config+0x1e0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a13      	ldr	r2, [pc, #76]	; (800222c <RCCEx_PLLSAI1_Config+0x1e0>)
 80021e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021e4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e6:	f7fe fbcd 	bl	8000984 <HAL_GetTick>
 80021ea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80021ec:	e009      	b.n	8002202 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80021ee:	f7fe fbc9 	bl	8000984 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d902      	bls.n	8002202 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	73fb      	strb	r3, [r7, #15]
          break;
 8002200:	e005      	b.n	800220e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002202:	4b0a      	ldr	r3, [pc, #40]	; (800222c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0ef      	beq.n	80021ee <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800220e:	7bfb      	ldrb	r3, [r7, #15]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d106      	bne.n	8002222 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002214:	4b05      	ldr	r3, [pc, #20]	; (800222c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	4903      	ldr	r1, [pc, #12]	; (800222c <RCCEx_PLLSAI1_Config+0x1e0>)
 800221e:	4313      	orrs	r3, r2
 8002220:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002222:	7bfb      	ldrb	r3, [r7, #15]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000

08002230 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e040      	b.n	80022c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002246:	2b00      	cmp	r3, #0
 8002248:	d106      	bne.n	8002258 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7fe fa5e 	bl	8000714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2224      	movs	r2, #36	; 0x24
 800225c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0201 	bic.w	r2, r2, #1
 800226c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f82c 	bl	80022cc <UART_SetConfig>
 8002274:	4603      	mov	r3, r0
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e022      	b.n	80022c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 fa4c 	bl	8002724 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800229a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 fad3 	bl	8002868 <UART_CheckIdleState>
 80022c2:	4603      	mov	r3, r0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022d0:	b08a      	sub	sp, #40	; 0x28
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80022d6:	2300      	movs	r3, #0
 80022d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	431a      	orrs	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	431a      	orrs	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	4bb4      	ldr	r3, [pc, #720]	; (80025cc <UART_SetConfig+0x300>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	6812      	ldr	r2, [r2, #0]
 8002302:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002304:	430b      	orrs	r3, r1
 8002306:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4aa9      	ldr	r2, [pc, #676]	; (80025d0 <UART_SetConfig+0x304>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d004      	beq.n	8002338 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002334:	4313      	orrs	r3, r2
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002348:	430a      	orrs	r2, r1
 800234a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4aa0      	ldr	r2, [pc, #640]	; (80025d4 <UART_SetConfig+0x308>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d126      	bne.n	80023a4 <UART_SetConfig+0xd8>
 8002356:	4ba0      	ldr	r3, [pc, #640]	; (80025d8 <UART_SetConfig+0x30c>)
 8002358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	2b03      	cmp	r3, #3
 8002362:	d81b      	bhi.n	800239c <UART_SetConfig+0xd0>
 8002364:	a201      	add	r2, pc, #4	; (adr r2, 800236c <UART_SetConfig+0xa0>)
 8002366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236a:	bf00      	nop
 800236c:	0800237d 	.word	0x0800237d
 8002370:	0800238d 	.word	0x0800238d
 8002374:	08002385 	.word	0x08002385
 8002378:	08002395 	.word	0x08002395
 800237c:	2301      	movs	r3, #1
 800237e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002382:	e080      	b.n	8002486 <UART_SetConfig+0x1ba>
 8002384:	2302      	movs	r3, #2
 8002386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800238a:	e07c      	b.n	8002486 <UART_SetConfig+0x1ba>
 800238c:	2304      	movs	r3, #4
 800238e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002392:	e078      	b.n	8002486 <UART_SetConfig+0x1ba>
 8002394:	2308      	movs	r3, #8
 8002396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800239a:	e074      	b.n	8002486 <UART_SetConfig+0x1ba>
 800239c:	2310      	movs	r3, #16
 800239e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023a2:	e070      	b.n	8002486 <UART_SetConfig+0x1ba>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a8c      	ldr	r2, [pc, #560]	; (80025dc <UART_SetConfig+0x310>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d138      	bne.n	8002420 <UART_SetConfig+0x154>
 80023ae:	4b8a      	ldr	r3, [pc, #552]	; (80025d8 <UART_SetConfig+0x30c>)
 80023b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b4:	f003 030c 	and.w	r3, r3, #12
 80023b8:	2b0c      	cmp	r3, #12
 80023ba:	d82d      	bhi.n	8002418 <UART_SetConfig+0x14c>
 80023bc:	a201      	add	r2, pc, #4	; (adr r2, 80023c4 <UART_SetConfig+0xf8>)
 80023be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c2:	bf00      	nop
 80023c4:	080023f9 	.word	0x080023f9
 80023c8:	08002419 	.word	0x08002419
 80023cc:	08002419 	.word	0x08002419
 80023d0:	08002419 	.word	0x08002419
 80023d4:	08002409 	.word	0x08002409
 80023d8:	08002419 	.word	0x08002419
 80023dc:	08002419 	.word	0x08002419
 80023e0:	08002419 	.word	0x08002419
 80023e4:	08002401 	.word	0x08002401
 80023e8:	08002419 	.word	0x08002419
 80023ec:	08002419 	.word	0x08002419
 80023f0:	08002419 	.word	0x08002419
 80023f4:	08002411 	.word	0x08002411
 80023f8:	2300      	movs	r3, #0
 80023fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023fe:	e042      	b.n	8002486 <UART_SetConfig+0x1ba>
 8002400:	2302      	movs	r3, #2
 8002402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002406:	e03e      	b.n	8002486 <UART_SetConfig+0x1ba>
 8002408:	2304      	movs	r3, #4
 800240a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800240e:	e03a      	b.n	8002486 <UART_SetConfig+0x1ba>
 8002410:	2308      	movs	r3, #8
 8002412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002416:	e036      	b.n	8002486 <UART_SetConfig+0x1ba>
 8002418:	2310      	movs	r3, #16
 800241a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800241e:	e032      	b.n	8002486 <UART_SetConfig+0x1ba>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a6a      	ldr	r2, [pc, #424]	; (80025d0 <UART_SetConfig+0x304>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d12a      	bne.n	8002480 <UART_SetConfig+0x1b4>
 800242a:	4b6b      	ldr	r3, [pc, #428]	; (80025d8 <UART_SetConfig+0x30c>)
 800242c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002430:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002434:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002438:	d01a      	beq.n	8002470 <UART_SetConfig+0x1a4>
 800243a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800243e:	d81b      	bhi.n	8002478 <UART_SetConfig+0x1ac>
 8002440:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002444:	d00c      	beq.n	8002460 <UART_SetConfig+0x194>
 8002446:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800244a:	d815      	bhi.n	8002478 <UART_SetConfig+0x1ac>
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <UART_SetConfig+0x18c>
 8002450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002454:	d008      	beq.n	8002468 <UART_SetConfig+0x19c>
 8002456:	e00f      	b.n	8002478 <UART_SetConfig+0x1ac>
 8002458:	2300      	movs	r3, #0
 800245a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800245e:	e012      	b.n	8002486 <UART_SetConfig+0x1ba>
 8002460:	2302      	movs	r3, #2
 8002462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002466:	e00e      	b.n	8002486 <UART_SetConfig+0x1ba>
 8002468:	2304      	movs	r3, #4
 800246a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800246e:	e00a      	b.n	8002486 <UART_SetConfig+0x1ba>
 8002470:	2308      	movs	r3, #8
 8002472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002476:	e006      	b.n	8002486 <UART_SetConfig+0x1ba>
 8002478:	2310      	movs	r3, #16
 800247a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800247e:	e002      	b.n	8002486 <UART_SetConfig+0x1ba>
 8002480:	2310      	movs	r3, #16
 8002482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a51      	ldr	r2, [pc, #324]	; (80025d0 <UART_SetConfig+0x304>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d17a      	bne.n	8002586 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002490:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002494:	2b08      	cmp	r3, #8
 8002496:	d824      	bhi.n	80024e2 <UART_SetConfig+0x216>
 8002498:	a201      	add	r2, pc, #4	; (adr r2, 80024a0 <UART_SetConfig+0x1d4>)
 800249a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249e:	bf00      	nop
 80024a0:	080024c5 	.word	0x080024c5
 80024a4:	080024e3 	.word	0x080024e3
 80024a8:	080024cd 	.word	0x080024cd
 80024ac:	080024e3 	.word	0x080024e3
 80024b0:	080024d3 	.word	0x080024d3
 80024b4:	080024e3 	.word	0x080024e3
 80024b8:	080024e3 	.word	0x080024e3
 80024bc:	080024e3 	.word	0x080024e3
 80024c0:	080024db 	.word	0x080024db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024c4:	f7ff fb30 	bl	8001b28 <HAL_RCC_GetPCLK1Freq>
 80024c8:	61f8      	str	r0, [r7, #28]
        break;
 80024ca:	e010      	b.n	80024ee <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024cc:	4b44      	ldr	r3, [pc, #272]	; (80025e0 <UART_SetConfig+0x314>)
 80024ce:	61fb      	str	r3, [r7, #28]
        break;
 80024d0:	e00d      	b.n	80024ee <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024d2:	f7ff fa91 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 80024d6:	61f8      	str	r0, [r7, #28]
        break;
 80024d8:	e009      	b.n	80024ee <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024de:	61fb      	str	r3, [r7, #28]
        break;
 80024e0:	e005      	b.n	80024ee <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80024ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 8107 	beq.w	8002704 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	4413      	add	r3, r2
 8002500:	69fa      	ldr	r2, [r7, #28]
 8002502:	429a      	cmp	r2, r3
 8002504:	d305      	bcc.n	8002512 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800250c:	69fa      	ldr	r2, [r7, #28]
 800250e:	429a      	cmp	r2, r3
 8002510:	d903      	bls.n	800251a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002518:	e0f4      	b.n	8002704 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	2200      	movs	r2, #0
 800251e:	461c      	mov	r4, r3
 8002520:	4615      	mov	r5, r2
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	f04f 0300 	mov.w	r3, #0
 800252a:	022b      	lsls	r3, r5, #8
 800252c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002530:	0222      	lsls	r2, r4, #8
 8002532:	68f9      	ldr	r1, [r7, #12]
 8002534:	6849      	ldr	r1, [r1, #4]
 8002536:	0849      	lsrs	r1, r1, #1
 8002538:	2000      	movs	r0, #0
 800253a:	4688      	mov	r8, r1
 800253c:	4681      	mov	r9, r0
 800253e:	eb12 0a08 	adds.w	sl, r2, r8
 8002542:	eb43 0b09 	adc.w	fp, r3, r9
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	603b      	str	r3, [r7, #0]
 800254e:	607a      	str	r2, [r7, #4]
 8002550:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002554:	4650      	mov	r0, sl
 8002556:	4659      	mov	r1, fp
 8002558:	f7fd fe38 	bl	80001cc <__aeabi_uldivmod>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4613      	mov	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800256a:	d308      	bcc.n	800257e <UART_SetConfig+0x2b2>
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002572:	d204      	bcs.n	800257e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	60da      	str	r2, [r3, #12]
 800257c:	e0c2      	b.n	8002704 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002584:	e0be      	b.n	8002704 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800258e:	d16a      	bne.n	8002666 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8002590:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002594:	2b08      	cmp	r3, #8
 8002596:	d834      	bhi.n	8002602 <UART_SetConfig+0x336>
 8002598:	a201      	add	r2, pc, #4	; (adr r2, 80025a0 <UART_SetConfig+0x2d4>)
 800259a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259e:	bf00      	nop
 80025a0:	080025c5 	.word	0x080025c5
 80025a4:	080025e5 	.word	0x080025e5
 80025a8:	080025ed 	.word	0x080025ed
 80025ac:	08002603 	.word	0x08002603
 80025b0:	080025f3 	.word	0x080025f3
 80025b4:	08002603 	.word	0x08002603
 80025b8:	08002603 	.word	0x08002603
 80025bc:	08002603 	.word	0x08002603
 80025c0:	080025fb 	.word	0x080025fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025c4:	f7ff fab0 	bl	8001b28 <HAL_RCC_GetPCLK1Freq>
 80025c8:	61f8      	str	r0, [r7, #28]
        break;
 80025ca:	e020      	b.n	800260e <UART_SetConfig+0x342>
 80025cc:	efff69f3 	.word	0xefff69f3
 80025d0:	40008000 	.word	0x40008000
 80025d4:	40013800 	.word	0x40013800
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40004400 	.word	0x40004400
 80025e0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80025e4:	f7ff fab6 	bl	8001b54 <HAL_RCC_GetPCLK2Freq>
 80025e8:	61f8      	str	r0, [r7, #28]
        break;
 80025ea:	e010      	b.n	800260e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025ec:	4b4c      	ldr	r3, [pc, #304]	; (8002720 <UART_SetConfig+0x454>)
 80025ee:	61fb      	str	r3, [r7, #28]
        break;
 80025f0:	e00d      	b.n	800260e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025f2:	f7ff fa01 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 80025f6:	61f8      	str	r0, [r7, #28]
        break;
 80025f8:	e009      	b.n	800260e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025fe:	61fb      	str	r3, [r7, #28]
        break;
 8002600:	e005      	b.n	800260e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800260c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d077      	beq.n	8002704 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005a      	lsls	r2, r3, #1
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	085b      	lsrs	r3, r3, #1
 800261e:	441a      	add	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	fbb2 f3f3 	udiv	r3, r2, r3
 8002628:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	2b0f      	cmp	r3, #15
 800262e:	d916      	bls.n	800265e <UART_SetConfig+0x392>
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002636:	d212      	bcs.n	800265e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	b29b      	uxth	r3, r3
 800263c:	f023 030f 	bic.w	r3, r3, #15
 8002640:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	085b      	lsrs	r3, r3, #1
 8002646:	b29b      	uxth	r3, r3
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	b29a      	uxth	r2, r3
 800264e:	8afb      	ldrh	r3, [r7, #22]
 8002650:	4313      	orrs	r3, r2
 8002652:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	8afa      	ldrh	r2, [r7, #22]
 800265a:	60da      	str	r2, [r3, #12]
 800265c:	e052      	b.n	8002704 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002664:	e04e      	b.n	8002704 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002666:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800266a:	2b08      	cmp	r3, #8
 800266c:	d827      	bhi.n	80026be <UART_SetConfig+0x3f2>
 800266e:	a201      	add	r2, pc, #4	; (adr r2, 8002674 <UART_SetConfig+0x3a8>)
 8002670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002674:	08002699 	.word	0x08002699
 8002678:	080026a1 	.word	0x080026a1
 800267c:	080026a9 	.word	0x080026a9
 8002680:	080026bf 	.word	0x080026bf
 8002684:	080026af 	.word	0x080026af
 8002688:	080026bf 	.word	0x080026bf
 800268c:	080026bf 	.word	0x080026bf
 8002690:	080026bf 	.word	0x080026bf
 8002694:	080026b7 	.word	0x080026b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002698:	f7ff fa46 	bl	8001b28 <HAL_RCC_GetPCLK1Freq>
 800269c:	61f8      	str	r0, [r7, #28]
        break;
 800269e:	e014      	b.n	80026ca <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80026a0:	f7ff fa58 	bl	8001b54 <HAL_RCC_GetPCLK2Freq>
 80026a4:	61f8      	str	r0, [r7, #28]
        break;
 80026a6:	e010      	b.n	80026ca <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026a8:	4b1d      	ldr	r3, [pc, #116]	; (8002720 <UART_SetConfig+0x454>)
 80026aa:	61fb      	str	r3, [r7, #28]
        break;
 80026ac:	e00d      	b.n	80026ca <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026ae:	f7ff f9a3 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 80026b2:	61f8      	str	r0, [r7, #28]
        break;
 80026b4:	e009      	b.n	80026ca <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026ba:	61fb      	str	r3, [r7, #28]
        break;
 80026bc:	e005      	b.n	80026ca <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80026c8:	bf00      	nop
    }

    if (pclk != 0U)
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d019      	beq.n	8002704 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	085a      	lsrs	r2, r3, #1
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	441a      	add	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	2b0f      	cmp	r3, #15
 80026e8:	d909      	bls.n	80026fe <UART_SetConfig+0x432>
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f0:	d205      	bcs.n	80026fe <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	60da      	str	r2, [r3, #12]
 80026fc:	e002      	b.n	8002704 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002710:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002714:	4618      	mov	r0, r3
 8002716:	3728      	adds	r7, #40	; 0x28
 8002718:	46bd      	mov	sp, r7
 800271a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800271e:	bf00      	nop
 8002720:	00f42400 	.word	0x00f42400

08002724 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00a      	beq.n	800274e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00a      	beq.n	8002792 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00a      	beq.n	80027b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	f003 0310 	and.w	r3, r3, #16
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00a      	beq.n	80027d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	f003 0320 	and.w	r3, r3, #32
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002800:	2b00      	cmp	r3, #0
 8002802:	d01a      	beq.n	800283a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002822:	d10a      	bne.n	800283a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00a      	beq.n	800285c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	605a      	str	r2, [r3, #4]
  }
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af02      	add	r7, sp, #8
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002878:	f7fe f884 	bl	8000984 <HAL_GetTick>
 800287c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b08      	cmp	r3, #8
 800288a:	d10e      	bne.n	80028aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800288c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f82d 	bl	80028fa <UART_WaitOnFlagUntilTimeout>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e023      	b.n	80028f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d10e      	bne.n	80028d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f817 	bl	80028fa <UART_WaitOnFlagUntilTimeout>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e00d      	b.n	80028f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2220      	movs	r2, #32
 80028da:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2220      	movs	r2, #32
 80028e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b09c      	sub	sp, #112	; 0x70
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	603b      	str	r3, [r7, #0]
 8002906:	4613      	mov	r3, r2
 8002908:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800290a:	e0a5      	b.n	8002a58 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800290c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800290e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002912:	f000 80a1 	beq.w	8002a58 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002916:	f7fe f835 	bl	8000984 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002922:	429a      	cmp	r2, r3
 8002924:	d302      	bcc.n	800292c <UART_WaitOnFlagUntilTimeout+0x32>
 8002926:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002928:	2b00      	cmp	r3, #0
 800292a:	d13e      	bne.n	80029aa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002934:	e853 3f00 	ldrex	r3, [r3]
 8002938:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800293a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800293c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002940:	667b      	str	r3, [r7, #100]	; 0x64
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	461a      	mov	r2, r3
 8002948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800294a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800294c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002950:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002952:	e841 2300 	strex	r3, r2, [r1]
 8002956:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1e6      	bne.n	800292c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	3308      	adds	r3, #8
 8002964:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002968:	e853 3f00 	ldrex	r3, [r3]
 800296c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800296e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002970:	f023 0301 	bic.w	r3, r3, #1
 8002974:	663b      	str	r3, [r7, #96]	; 0x60
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	3308      	adds	r3, #8
 800297c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800297e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002980:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002982:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002984:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002986:	e841 2300 	strex	r3, r2, [r1]
 800298a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800298c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1e5      	bne.n	800295e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2220      	movs	r2, #32
 8002996:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2220      	movs	r2, #32
 800299c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e067      	b.n	8002a7a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d04f      	beq.n	8002a58 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029c6:	d147      	bne.n	8002a58 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029d0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029da:	e853 3f00 	ldrex	r3, [r3]
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80029e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	461a      	mov	r2, r3
 80029ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029f0:	637b      	str	r3, [r7, #52]	; 0x34
 80029f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029f8:	e841 2300 	strex	r3, r2, [r1]
 80029fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80029fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1e6      	bne.n	80029d2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	3308      	adds	r3, #8
 8002a0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	e853 3f00 	ldrex	r3, [r3]
 8002a12:	613b      	str	r3, [r7, #16]
   return(result);
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f023 0301 	bic.w	r3, r3, #1
 8002a1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	3308      	adds	r3, #8
 8002a22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002a24:	623a      	str	r2, [r7, #32]
 8002a26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a28:	69f9      	ldr	r1, [r7, #28]
 8002a2a:	6a3a      	ldr	r2, [r7, #32]
 8002a2c:	e841 2300 	strex	r3, r2, [r1]
 8002a30:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1e5      	bne.n	8002a04 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2220      	movs	r2, #32
 8002a42:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e010      	b.n	8002a7a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	69da      	ldr	r2, [r3, #28]
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	4013      	ands	r3, r2
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	bf0c      	ite	eq
 8002a68:	2301      	moveq	r3, #1
 8002a6a:	2300      	movne	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	461a      	mov	r2, r3
 8002a70:	79fb      	ldrb	r3, [r7, #7]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	f43f af4a 	beq.w	800290c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3770      	adds	r7, #112	; 0x70
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <__libc_init_array>:
 8002a84:	b570      	push	{r4, r5, r6, lr}
 8002a86:	4d0d      	ldr	r5, [pc, #52]	; (8002abc <__libc_init_array+0x38>)
 8002a88:	4c0d      	ldr	r4, [pc, #52]	; (8002ac0 <__libc_init_array+0x3c>)
 8002a8a:	1b64      	subs	r4, r4, r5
 8002a8c:	10a4      	asrs	r4, r4, #2
 8002a8e:	2600      	movs	r6, #0
 8002a90:	42a6      	cmp	r6, r4
 8002a92:	d109      	bne.n	8002aa8 <__libc_init_array+0x24>
 8002a94:	4d0b      	ldr	r5, [pc, #44]	; (8002ac4 <__libc_init_array+0x40>)
 8002a96:	4c0c      	ldr	r4, [pc, #48]	; (8002ac8 <__libc_init_array+0x44>)
 8002a98:	f000 f820 	bl	8002adc <_init>
 8002a9c:	1b64      	subs	r4, r4, r5
 8002a9e:	10a4      	asrs	r4, r4, #2
 8002aa0:	2600      	movs	r6, #0
 8002aa2:	42a6      	cmp	r6, r4
 8002aa4:	d105      	bne.n	8002ab2 <__libc_init_array+0x2e>
 8002aa6:	bd70      	pop	{r4, r5, r6, pc}
 8002aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aac:	4798      	blx	r3
 8002aae:	3601      	adds	r6, #1
 8002ab0:	e7ee      	b.n	8002a90 <__libc_init_array+0xc>
 8002ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ab6:	4798      	blx	r3
 8002ab8:	3601      	adds	r6, #1
 8002aba:	e7f2      	b.n	8002aa2 <__libc_init_array+0x1e>
 8002abc:	08002b44 	.word	0x08002b44
 8002ac0:	08002b44 	.word	0x08002b44
 8002ac4:	08002b44 	.word	0x08002b44
 8002ac8:	08002b48 	.word	0x08002b48

08002acc <memset>:
 8002acc:	4402      	add	r2, r0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d100      	bne.n	8002ad6 <memset+0xa>
 8002ad4:	4770      	bx	lr
 8002ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8002ada:	e7f9      	b.n	8002ad0 <memset+0x4>

08002adc <_init>:
 8002adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ade:	bf00      	nop
 8002ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ae2:	bc08      	pop	{r3}
 8002ae4:	469e      	mov	lr, r3
 8002ae6:	4770      	bx	lr

08002ae8 <_fini>:
 8002ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aea:	bf00      	nop
 8002aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aee:	bc08      	pop	{r3}
 8002af0:	469e      	mov	lr, r3
 8002af2:	4770      	bx	lr
